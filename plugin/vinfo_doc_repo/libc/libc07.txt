
       set_input_mode ();

       while (1)
         {
           read (STDIN_FILENO, &c, 1);
           if (c == '\004')          /* 'C-d' */
             break;
           else
             putchar (c);
         }

       return EXIT_SUCCESS;
     }

   This program is careful to restore the original terminal modes before
exiting or terminating with a signal.  It uses the 'atexit' function
(*note Cleanups on Exit::) to make sure this is done by 'exit'.

   The shell is supposed to take care of resetting the terminal modes
when a process is stopped or continued; see *note Job Control::.  But
some existing shells do not actually do this, so you may wish to
establish handlers for job control signals that reset terminal modes.
The above example does so.

==============================================================================
File: libc.info,  Node: |Pseudo_Terminals|,  Prev: |Noncanon_Example|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                              *Pseudo_Terminals*

17.8 Pseudo-Terminals
---------------------

A 'pseudo-terminal' is a special interprocess communication channel that
acts like a terminal.  One end of the channel is called the 'master'
side or 'master pseudo-terminal device', the other side is called the
'slave' side.  Data written to the master side is received by the slave
side as if it was the result of a user typing at an ordinary terminal,
and data written to the slave side is sent to the master side as if it
was written on an ordinary terminal.

   Pseudo terminals are the way programs like 'xterm' and  emacs’
implement their terminal emulation functionality.

MENU

* |Allocation|::             Allocating a pseudo terminal.
* |Pseudo_Terminal_Pairs|::  How to open both sides of a
                            pseudo-terminal in a single operation.

==============================================================================
File: libc.info,  Node: |Allocation|,  Next: |Pseudo_Terminal_Pairs|,  Up: |Pseudo_Terminals|
==============================================================================

                                                                    *Allocation*

17.8.1 Allocating Pseudo-Terminals
----------------------------------

This subsection describes functions for allocating a pseudo-terminal,
and for making this pseudo-terminal available for actual use.  These
functions are declared in the header file 'stdlib.h'.

 -- Function: int getpt (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe fd | *Note POSIX Safety
     Concepts::.

     The 'getpt' function returns a new file descriptor for the next
     available master pseudo-terminal.  The normal return value from
     'getpt' is a non-negative integer file descriptor.  In the case of
     an error, a value of -1 is returned instead.  The following 'errno'
     conditions are defined for this function:

     'ENOENT'
          There are no free master pseudo-terminals available.

     This function is a GNU extension.

 -- Function: int grantpt (int FILEDES)
     Preliminary: | MT-Safe locale | AS-Unsafe dlopen plugin heap lock |
     AC-Unsafe corrupt lock fd mem | *Note POSIX Safety Concepts::.

     The 'grantpt' function changes the ownership and access permission
     of the slave pseudo-terminal device corresponding to the master
     pseudo-terminal device associated with the file descriptor FILEDES.
     The owner is set from the real user ID of the calling process
     (*note Process Persona::), and the group is set to a special group
     (typically 'tty') or from the real group ID of the calling process.
     The access permission is set such that the file is both readable
     and writable by the owner and only writable by the group.

     On some systems this function is implemented by invoking a special
     'setuid' root program (*note How Change Persona::).  As a
     consequence, installing a signal handler for the 'SIGCHLD' signal
     (*note Job Control Signals::) may interfere with a call to
     'grantpt'.

     The normal return value from 'grantpt' is 0; a value of -1 is
     returned in case of failure.  The following 'errno' error
     conditions are defined for this function:

     'EBADF'
          The FILEDES argument is not a valid file descriptor.

     'EINVAL'
          The FILEDES argument is not associated with a master
          pseudo-terminal device.

     'EACCES'
          The slave pseudo-terminal device corresponding to the master
          associated with FILEDES could not be accessed.

 -- Function: int unlockpt (int FILEDES)
     Preliminary: | MT-Safe | AS-Unsafe heap/bsd | AC-Unsafe mem fd |
     *Note POSIX Safety Concepts::.

     The 'unlockpt' function unlocks the slave pseudo-terminal device
     corresponding to the master pseudo-terminal device associated with
     the file descriptor FILEDES.  On many systems, the slave can only
     be opened after unlocking, so portable applications should always
     call 'unlockpt' before trying to open the slave.

     The normal return value from 'unlockpt' is 0; a value of -1 is
     returned in case of failure.  The following 'errno' error
     conditions are defined for this function:

     'EBADF'
          The FILEDES argument is not a valid file descriptor.

     'EINVAL'
          The FILEDES argument is not associated with a master
          pseudo-terminal device.

 -- Function: char * ptsname (int FILEDES)
     Preliminary: | MT-Unsafe race:ptsname | AS-Unsafe heap/bsd |
     AC-Unsafe mem fd | *Note POSIX Safety Concepts::.

     If the file descriptor FILEDES is associated with a master
     pseudo-terminal device, the 'ptsname' function returns a pointer to
     a statically-allocated, null-terminated string containing the file
     name of the associated slave pseudo-terminal file.  This string
     might be overwritten by subsequent calls to 'ptsname'.

 -- Function: int ptsname_r (int FILEDES, char *BUF, size_t LEN)
     Preliminary: | MT-Safe | AS-Unsafe heap/bsd | AC-Unsafe mem fd |
     *Note POSIX Safety Concepts::.

     The 'ptsname_r' function is similar to the  ptsname’ function
     except that it places its result into the user-specified buffer
     starting at BUF with length LEN.

     This function is a GNU extension.

   *Portability Note:* On System V derived systems, the file returned by
the 'ptsname' and  ptsname_r’ functions may be STREAMS-based, and
therefore require additional processing after opening before it actually
behaves as a pseudo terminal.

   Typical usage of these functions is illustrated by the following
example:
     int
     open_pty_pair (int *amaster, int *aslave)
     {
       int master, slave;
       char *name;

       master = getpt ();
       if (master < 0)
         return 0;

       if (grantpt (master) < 0 || unlockpt (master) < 0)
         goto close_master;
       name = ptsname (master);
       if (name == NULL)
         goto close_master;

       slave = open (name, O_RDWR);
       if (slave == -1)
         goto close_master;

       if (isastream (slave))
         {
           if (ioctl (slave, I_PUSH, "ptem") < 0
               || ioctl (slave, I_PUSH, "ldterm") < 0)
             goto close_slave;
         }

       *amaster = master;
       *aslave = slave;
       return 1;

     close_slave:
       close (slave);

     close_master:
       close (master);
       return 0;
     }

==============================================================================
File: libc.info,  Node: |Pseudo_Terminal_Pairs|,  Prev: |Allocation|,  Up: |Pseudo_Terminals|
==============================================================================

                                                         *Pseudo_Terminal_Pairs*

17.8.2 Opening a Pseudo-Terminal Pair
-------------------------------------

These functions, derived from BSD, are available in the separate
'libutil' library, and declared in  pty.h’.

 -- Function: int openpty (int *AMASTER, int *ASLAVE, char *NAME, const
          struct termios *TERMP, const struct winsize *WINP)
     Preliminary: | MT-Safe locale | AS-Unsafe dlopen plugin heap lock |
     AC-Unsafe corrupt lock fd mem | *Note POSIX Safety Concepts::.

     This function allocates and opens a pseudo-terminal pair, returning
     the file descriptor for the master in *AMASTER, and the file
     descriptor for the slave in *ASLAVE.  If the argument NAME is not a
     null pointer, the file name of the slave pseudo-terminal device is
     stored in '*name'.  If TERMP is not a null pointer, the terminal
     attributes of the slave are set to the ones specified in the
     structure that TERMP points to (*note Terminal Modes::).  Likewise,
     if WINP is not a null pointer, the screen size of the slave is set
     to the values specified in the structure that WINP points to.

     The normal return value from 'openpty' is 0; a value of -1 is
     returned in case of failure.  The following 'errno' conditions are
     defined for this function:

     'ENOENT'
          There are no free pseudo-terminal pairs available.

     Warning: Using the 'openpty' function with NAME not set to  NULL’
     is *very dangerous* because it provides no protection against
     overflowing the string NAME.  You should use the 'ttyname' function
     on the file descriptor returned in *SLAVE to find out the file name
     of the slave pseudo-terminal device instead.

 -- Function: int forkpty (int *AMASTER, char *NAME, const struct
          termios *TERMP, const struct winsize *WINP)
     Preliminary: | MT-Safe locale | AS-Unsafe dlopen plugin heap lock |
     AC-Unsafe corrupt lock fd mem | *Note POSIX Safety Concepts::.

     This function is similar to the 'openpty' function, but in
     addition, forks a new process (*note Creating a Process::) and
     makes the newly opened slave pseudo-terminal device the controlling
     terminal (*note Controlling Terminal::) for the child process.

     If the operation is successful, there are then both parent and
     child processes and both see 'forkpty' return, but with different
     values: it returns a value of 0 in the child process and returns
     the child's process ID in the parent process.

     If the allocation of a pseudo-terminal pair or the process creation
     failed, 'forkpty' returns a value of -1 in the parent process.

     Warning: The 'forkpty' function has the same problems with
     respect to the NAME argument as 'openpty'.

==============================================================================
File: libc.info,  Node: |Syslog|,  Next: |Mathematics|,  Prev: |Low_Level_Terminal_Interface|,  Up: |Top|
==============================================================================

                                                                        *Syslog*

18 Syslog
=========

This chapter describes facilities for issuing and logging messages of
system administration interest.  This chapter has nothing to do with
programs issuing messages to their own users or keeping private logs
(One would typically do that with the facilities described in *note I/O
on Streams::).

   Most systems have a facility called 'Syslog' that allows programs to
submit messages of interest to system administrators and can be
configured to pass these messages on in various ways, such as printing
on the console, mailing to a particular person, or recording in a log
file for future reference.

   A program uses the facilities in this chapter to submit such
messages.

MENU

* |Overview_of_Syslog|::           Overview of a system's Syslog facility
* |Submitting_Syslog_Messages|::   Functions to submit messages to Syslog

==============================================================================
File: libc.info,  Node: |Overview_of_Syslog|,  Next: |Submitting_Syslog_Messages|,  Up: |Syslog|
==============================================================================

                                                            *Overview_of_Syslog*

18.1 Overview of Syslog
-----------------------

System administrators have to deal with lots of different kinds of
messages from a plethora of subsystems within each system, and usually
lots of systems as well.  For example, an FTP server might report every
connection it gets.  The kernel might report hardware failures on a disk
drive.  A DNS server might report usage statistics at regular intervals.

   Some of these messages need to be brought to a system administrator's
attention immediately.  And it may not be just any system administrator
  there may be a particular system administrator who deals with a
particular kind of message.  Other messages just need to be recorded for
future reference if there is a problem.  Still others may need to have
information extracted from them by an automated process that generates
monthly reports.

   To deal with these messages, most Unix systems have a facility called
"Syslog."  It is generally based on a daemon called 'Syslogd' Syslogd
listens for messages on a Unix domain socket named '/dev/log'.  Based on
classification information in the messages and its configuration file
(usually '/etc/syslog.conf'), Syslogd routes them in various ways.  Some
of the popular routings are:

   - Write to the system console
   - Mail to a specific user
   - Write to a log file
   - Pass to another daemon
   - Discard

   Syslogd can also handle messages from other systems.  It listens on
the 'syslog' UDP port as well as the local socket for messages.

   Syslog can handle messages from the kernel itself.  But the kernel
doesn't write to '/dev/log ; rather, another daemon (sometimes called
'Klogd') extracts messages from the kernel and passes them on to Syslog
as any other process would (and it properly identifies them as messages
from the kernel).

   Syslog can even handle messages that the kernel issued before Syslogd
or Klogd was running.  A Linux kernel, for example, stores startup
messages in a kernel message ring and they are normally still there when
Klogd later starts up.  Assuming Syslogd is running by the time Klogd
starts, Klogd then passes everything in the message ring to it.

   In order to classify messages for disposition, Syslog requires any
process that submits a message to it to provide two pieces of
classification information with it:

facility
     This identifies who submitted the message.  There are a small
     number of facilities defined.  The kernel, the mail subsystem, and
     an FTP server are examples of recognized facilities.  For the
     complete list, *Note syslog; vsyslog::.  Keep in mind that these
     are essentially arbitrary classifications.  "Mail subsystem"
     doesn't have any more meaning than the system administrator gives
     to it.

priority
     This tells how important the content of the message is.  Examples
     of defined priority values are: debug, informational, warning and
     critical.  For the complete list, see *note syslog; vsyslog::.
     Except for the fact that the priorities have a defined order, the
     meaning of each of these priorities is entirely determined by the
     system administrator.

   A 'facility/priority' is a number that indicates both the facility
and the priority.

   Warning: This terminology is not universal.  Some people use
'level' to refer to the priority and  priority” to refer to the
combination of facility and priority.  A Linux kernel has a concept of a
message 'level,' which corresponds both to a Syslog priority and to a
Syslog facility/priority (It can be both because the facility code for
the kernel is zero, and that makes priority and facility/priority the
same value).

   The GNU C Library provides functions to submit messages to Syslog.
They do it by writing to the '/dev/log' socket.  *Note Submitting Syslog
Messages::.

   The GNU C Library functions only work to submit messages to the
Syslog facility on the same system.  To submit a message to the Syslog
facility on another system, use the socket I/O functions to write a UDP
datagram to the 'syslog' UDP port on that system.  *Note Sockets::.

==============================================================================
File: libc.info,  Node: |Submitting_Syslog_Messages|,  Prev: |Overview_of_Syslog|,  Up: |Syslog|
==============================================================================

                                                    *Submitting_Syslog_Messages*

18.2 Submitting Syslog Messages
-------------------------------

The GNU C Library provides functions to submit messages to the Syslog
facility:

MENU

* |openlog|::                      Open connection to Syslog
* |syslog;_vsyslog|::              Submit message to Syslog
* |closelog|::                     Close connection to Syslog
* |setlogmask|::                   Cause certain messages to be ignored
* |Syslog_Example|::               Example of all of the above

   These functions only work to submit messages to the Syslog facility
on the same system.  To submit a message to the Syslog facility on
another system, use the socket I/O functions to write a UDP datagram to
the 'syslog' UDP port on that system.  *Note Sockets::.

==============================================================================
File: libc.info,  Node: |openlog|,  Next: |syslog;_vsyslog|,  Up: |Submitting_Syslog_Messages|
==============================================================================

                                                                       *openlog*

18.2.1 openlog
--------------

The symbols referred to in this section are declared in the file
'syslog.h'.

 -- Function: void openlog (const char *IDENT, int OPTION, int FACILITY)
     Preliminary: | MT-Safe | AS-Unsafe lock | AC-Unsafe lock fd | *Note
     POSIX Safety Concepts::.

     'openlog' opens or reopens a connection to Syslog in preparation
     for submitting messages.

     IDENT is an arbitrary identification string which future 'syslog'
     invocations will prefix to each message.  This is intended to
     identify the source of the message, and people conventionally set
     it to the name of the program that will submit the messages.

     If IDENT is NULL, or if 'openlog' is not called, the default
     identification string used in Syslog messages will be the program
     name, taken from argv[0].

     Please note that the string pointer IDENT will be retained
     internally by the Syslog routines.  You must not free the memory
     that IDENT points to.  It is also dangerous to pass a reference to
     an automatic variable since leaving the scope would mean ending the
     lifetime of the variable.  If you want to change the IDENT string,
     you must call 'openlog' again; overwriting the string pointed to by
     IDENT is not thread-safe.

     You can cause the Syslog routines to drop the reference to IDENT
     and go back to the default string (the program name taken from
     argv[0]), by calling 'closelog': *Note closelog::.

     In particular, if you are writing code for a shared library that
     might get loaded and then unloaded (e.g.  a PAM module), and you
     use 'openlog', you must call  closelog’ before any point where your
     library might get unloaded, as in this example:

          #include <syslog.h>

          void
          shared_library_function (void)
          {
            openlog ("mylibrary", option, priority);

            syslog (LOG_INFO, "shared library has been invoked");

            closelog ();
          }

     Without the call to 'closelog', future invocations of  syslog’ by
     the program using the shared library may crash, if the library gets
     unloaded and the memory containing the string '"mylibrary"' becomes
     unmapped.  This is a limitation of the BSD syslog interface.

     'openlog' may or may not open the  /dev/log’ socket, depending on
     OPTION.  If it does, it tries to open it and connect it as a stream
     socket.  If that doesn't work, it tries to open it and connect it
     as a datagram socket.  The socket has the 'Close on Exec'
     attribute, so the kernel will close it if the process performs an
     exec.

     You don't have to use 'openlog .  If you call ‘syslog’ without
     having called 'openlog',  syslog’ just opens the connection
     implicitly and uses defaults for the information in IDENT and
     OPTIONS.

     OPTIONS is a bit string, with the bits as defined by the following
     single bit masks:

     'LOG_PERROR'
          If on, 'openlog' sets up the connection so that any  syslog’
          on this connection writes its message to the calling process'
          Standard Error stream in addition to submitting it to Syslog.
          If off, 'syslog' does not write the message to Standard Error.

     'LOG_CONS'
          If on, 'openlog' sets up the connection so that a  syslog’ on
          this connection that fails to submit a message to Syslog
          writes the message instead to system console.  If off,
          'syslog' does not write to the system console (but of course
          Syslog may write messages it receives to the console).

     'LOG_PID'
          When on, 'openlog' sets up the connection so that a  syslog’
          on this connection inserts the calling process' Process ID
          (PID) into the message.  When off, 'openlog' does not insert
          the PID.

     'LOG_NDELAY'
          When on, 'openlog' opens and connects the  /dev/log’ socket.
          When off, a future 'syslog' call must open and connect the
          socket.

          *Portability note:* In early systems, the sense of this bit
          was exactly the opposite.

     'LOG_ODELAY'
          This bit does nothing.  It exists for backward compatibility.

     If any other bit in OPTIONS is on, the result is undefined.

     FACILITY is the default facility code for this connection.  A
     'syslog' on this connection that specifies default facility causes
     this facility to be associated with the message.  See 'syslog' for
     possible values.  A value of zero means the default, which is
     'LOG_USER'.

     If a Syslog connection is already open when you call 'openlog',
     'openlog' 'reopens' the connection.  Reopening is like opening
     except that if you specify zero for the default facility code, the
     default facility code simply remains unchanged and if you specify
     LOG_NDELAY and the socket is already open and connected, 'openlog'
     just leaves it that way.

==============================================================================
File: libc.info,  Node: |syslog;_vsyslog|,  Next: |closelog|,  Prev: |openlog|,  Up: |Submitting_Syslog_Messages|
==============================================================================

                                                               *syslog;_vsyslog*

18.2.2 syslog, vsyslog
----------------------

The symbols referred to in this section are declared in the file
'syslog.h'.

 -- Function: void syslog (int FACILITY_PRIORITY, const char *FORMAT,
          ...)
     Preliminary: | MT-Safe env locale | AS-Unsafe corrupt heap lock
     dlopen | AC-Unsafe corrupt lock mem fd | *Note POSIX Safety
     Concepts::.

     'syslog' submits a message to the Syslog facility.  It does this by
     writing to the Unix domain socket '/dev/log'.

     'syslog' submits the message with the facility and priority
     indicated by FACILITY_PRIORITY.  The macro 'LOG_MAKEPRI' generates
     a facility/priority from a facility and a priority, as in the
     following example:

          LOG_MAKEPRI(LOG_USER, LOG_WARNING)

     The possible values for the facility code are (macros):

     'LOG_USER'
          A miscellaneous user process
     'LOG_MAIL'
          Mail
     'LOG_DAEMON'
          A miscellaneous system daemon
     'LOG_AUTH'
          Security (authorization)
     'LOG_SYSLOG'
          Syslog
     'LOG_LPR'
          Central printer
     'LOG_NEWS'
          Network news (e.g.  Usenet)
     'LOG_UUCP'
          UUCP
     'LOG_CRON'
          Cron and At
     'LOG_AUTHPRIV'
          Private security (authorization)
     'LOG_FTP'
          Ftp server
     'LOG_LOCAL0'
          Locally defined
     'LOG_LOCAL1'
          Locally defined
     'LOG_LOCAL2'
          Locally defined
     'LOG_LOCAL3'
          Locally defined
     'LOG_LOCAL4'
          Locally defined
     'LOG_LOCAL5'
          Locally defined
     'LOG_LOCAL6'
          Locally defined
     'LOG_LOCAL7'
          Locally defined

     Results are undefined if the facility code is anything else.

     NB: 'syslog' recognizes one other facility code: that of the
     kernel.  But you can't specify that facility code with these
     functions.  If you try, it looks the same to 'syslog' as if you are
     requesting the default facility.  But you wouldn't want to anyway,
     because any program that uses the GNU C Library is not the kernel.

     You can use just a priority code as FACILITY_PRIORITY.  In that
     case, 'syslog' assumes the default facility established when the
     Syslog connection was opened.  *Note Syslog Example::.

     The possible values for the priority code are (macros):

     'LOG_EMERG'
          The message says the system is unusable.
     'LOG_ALERT'
          Action on the message must be taken immediately.
     'LOG_CRIT'
          The message states a critical condition.
     'LOG_ERR'
          The message describes an error.
     'LOG_WARNING'
          The message is a warning.
     'LOG_NOTICE'
          The message describes a normal but important event.
     'LOG_INFO'
          The message is purely informational.
     'LOG_DEBUG'
          The message is only for debugging purposes.

     Results are undefined if the priority code is anything else.

     If the process does not presently have a Syslog connection open
     (i.e., it did not call 'openlog'),  syslog’ implicitly opens the
     connection the same as 'openlog' would, with the following defaults
     for information that would otherwise be included in an 'openlog'
     call: The default identification string is the program name.  The
     default default facility is 'LOG_USER'.  The default for all the
     connection options in OPTIONS is as if those bits were off.
     'syslog' leaves the Syslog connection open.

     If the '/dev/log' socket is not open and connected,  syslog’ opens
     and connects it, the same as 'openlog' with the  LOG_NDELAY’ option
     would.

     'syslog' leaves  /dev/log’ open and connected unless its attempt to
     send the message failed, in which case 'syslog' closes it (with the
     hope that a future implicit open will restore the Syslog connection
     to a usable state).

     Example:


          #include <syslog.h>
          syslog (LOG_MAKEPRI(LOG_LOCAL1, LOG_ERROR),
                  "Unable to make network connection to %s.  Error=%m", host);


 -- Function: void vsyslog (int FACILITY_PRIORITY, const char *FORMAT,
          va_list ARGLIST)
     Preliminary: | MT-Safe env locale | AS-Unsafe corrupt heap lock
     dlopen | AC-Unsafe corrupt lock mem fd | *Note POSIX Safety
     Concepts::.

     This is functionally identical to 'syslog', with the BSD style
     variable length argument.

==============================================================================
File: libc.info,  Node: |closelog|,  Next: |setlogmask|,  Prev: |syslog;_vsyslog|,  Up: |Submitting_Syslog_Messages|
==============================================================================

                                                                      *closelog*

18.2.3 closelog
---------------

The symbols referred to in this section are declared in the file
'syslog.h'.

 -- Function: void closelog (void)
     Preliminary: | MT-Safe | AS-Unsafe lock | AC-Unsafe lock fd | *Note
     POSIX Safety Concepts::.

     'closelog' closes the current Syslog connection, if there is one.
     This includes closing the '/dev/log' socket, if it is open.
     'closelog' also sets the identification string for Syslog messages
     back to the default, if 'openlog' was called with a non-NULL
     argument to IDENT.  The default identification string is the
     program name taken from argv[0].

     If you are writing shared library code that uses 'openlog' to
     generate custom syslog output, you should use 'closelog' to drop
     the GNU C Library's internal reference to the IDENT pointer when
     you are done.  Please read the section on 'openlog' for more
     information: *Note openlog::.

     'closelog' does not flush any buffers.  You do not have to call
     'closelog' before re-opening a Syslog connection with  openlog’.
     Syslog connections are automatically closed on exec or exit.

==============================================================================
File: libc.info,  Node: |setlogmask|,  Next: |Syslog_Example|,  Prev: |closelog|,  Up: |Submitting_Syslog_Messages|
==============================================================================

                                                                    *setlogmask*

18.2.4 setlogmask
-----------------

The symbols referred to in this section are declared in the file
'syslog.h'.

 -- Function: int setlogmask (int MASK)
     Preliminary: | MT-Unsafe race:LogMask | AS-Unsafe | AC-Safe | *Note
     POSIX Safety Concepts::.

     'setlogmask' sets a mask (the 'logmask') that determines which
     future 'syslog' calls shall be ignored.  If a program has not
     called 'setlogmask',  syslog’ doesn’t ignore any calls.  You can
     use 'setlogmask' to specify that messages of particular priorities
     shall be ignored in the future.

     A 'setlogmask' call overrides any previous  setlogmask’ call.

     Note that the logmask exists entirely independently of opening and
     closing of Syslog connections.

     Setting the logmask has a similar effect to, but is not the same
     as, configuring Syslog.  The Syslog configuration may cause Syslog
     to discard certain messages it receives, but the logmask causes
     certain messages never to get submitted to Syslog in the first
     place.

     MASK is a bit string with one bit corresponding to each of the
     possible message priorities.  If the bit is on, 'syslog' handles
     messages of that priority normally.  If it is off, 'syslog'
     discards messages of that priority.  Use the message priority
     macros described in *note syslog; vsyslog:: and the 'LOG_MASK' to
     construct an appropriate MASK value, as in this example:

          LOG_MASK(LOG_EMERG) | LOG_MASK(LOG_ERROR)

     or

          ~(LOG_MASK(LOG_INFO))

     There is also a 'LOG_UPTO' macro, which generates a mask with the
     bits on for a certain priority and all priorities above it:

          LOG_UPTO(LOG_ERROR)

     The unfortunate naming of the macro is due to the fact that
     internally, higher numbers are used for lower message priorities.

==============================================================================
File: libc.info,  Node: |Syslog_Example|,  Prev: |setlogmask|,  Up: |Submitting_Syslog_Messages|
==============================================================================

                                                                *Syslog_Example*

18.2.5 Syslog Example
---------------------

Here is an example of 'openlog',  syslog’, and ‘closelog’:

   This example sets the logmask so that debug and informational
messages get discarded without ever reaching Syslog.  So the second
'syslog' in the example does nothing.

     #include <syslog.h>

     setlogmask (LOG_UPTO (LOG_NOTICE));

     openlog ("exampleprog", LOG_CONS | LOG_PID | LOG_NDELAY, LOG_LOCAL1);

     syslog (LOG_NOTICE, "Program started by User %d", getuid ());
     syslog (LOG_INFO, "A tree falls in a forest");

     closelog ();


==============================================================================
File: libc.info,  Node: |Mathematics|,  Next: |Arithmetic|,  Prev: |Syslog|,  Up: |Top|
==============================================================================

                                                                   *Mathematics*

19 Mathematics
==============

This chapter contains information about functions for performing
mathematical computations, such as trigonometric functions.  Most of
these functions have prototypes declared in the header file 'math.h'.
The complex-valued functions are defined in 'complex.h'.

   All mathematical functions which take a floating-point argument have
three variants, one each for 'double',  float’, and ‘long double’
arguments.  The 'double' versions are mostly defined in ISO C89.  The
'float' and  long double’ versions are from the numeric extensions to C
included in ISO C99.

   Which of the three versions of a function should be used depends on
the situation.  For most calculations, the 'float' functions are the
fastest.  On the other hand, the 'long double' functions have the
highest precision.  'double' is somewhere in between.  It is usually
wise to pick the narrowest type that can accommodate your data.  Not all
machines have a distinct 'long double' type; it may be the same as
'double'.

MENU

* |Mathematical_Constants|::      Precise numeric values for often-used
                                 constants.
* |Trig_Functions|::              Sine, cosine, tangent, and friends.
* |Inverse_Trig_Functions|::      Arcsine, arccosine, etc.
* |Exponents_and_Logarithms|::    Also pow and sqrt.
* |Hyperbolic_Functions|::        sinh, cosh, tanh, etc.
* |Special_Functions|::           Bessel, gamma, erf.
* |Errors_in_Math_Functions|::    Known Maximum Errors in Math Functions.
* |Pseudo_Random_Numbers|::       Functions for generating pseudo-random
				 numbers.
* |FP_Function_Optimizations|::   Fast code or small code.

==============================================================================
File: libc.info,  Node: |Mathematical_Constants|,  Next: |Trig_Functions|,  Up: |Mathematics|
==============================================================================

                                                        *Mathematical_Constants*

19.1 Predefined Mathematical Constants
--------------------------------------

The header 'math.h' defines several useful mathematical constants.  All
values are defined as preprocessor macros starting with 'M_'.  The
values provided are:

'M_E'
     The base of natural logarithms.
'M_LOG2E'
     The logarithm to base '2' of  M_E’.
'M_LOG10E'
     The logarithm to base '10' of  M_E’.
'M_LN2'
     The natural logarithm of '2'.
'M_LN10'
     The natural logarithm of '10'.
'M_PI'
     Pi, the ratio of a circle's circumference to its diameter.
'M_PI_2'
     Pi divided by two.
'M_PI_4'
     Pi divided by four.
'M_1_PI'
     The reciprocal of pi (1/pi)
'M_2_PI'
     Two times the reciprocal of pi.
'M_2_SQRTPI'
     Two times the reciprocal of the square root of pi.
'M_SQRT2'
     The square root of two.
'M_SQRT1_2'
     The reciprocal of the square root of two (also the square root of
     1/2).

   These constants come from the Unix98 standard and were also available
in 4.4BSD; therefore they are only defined if '_XOPEN_SOURCE=500', or a
more general feature select macro, is defined.  The default set of
features includes these constants.  *Note Feature Test Macros::.

   All values are of type 'double'.  As an extension, the GNU C Library
also defines these constants with type 'long double'.  The  long double’
macros have a lowercase 'l' appended to their names:  M_El’, ‘M_PIl’,
and so forth.  These are only available if '_GNU_SOURCE' is defined.

   _Note:_ Some programs use a constant named 'PI' which has the same
value as 'M_PI'.  This constant is not standard; it may have appeared in
some old AT&T headers, and is mentioned in Stroustrup's book on C++.  It
infringes on the user's name space, so the GNU C Library does not define
it.  Fixing programs written to expect it is simple: replace 'PI' with
'M_PI' throughout, or put  -DPI=M_PI’ on the compiler command line.

==============================================================================
File: libc.info,  Node: |Trig_Functions|,  Next: |Inverse_Trig_Functions|,  Prev: |Mathematical_Constants|,  Up: |Mathematics|
==============================================================================

                                                                *Trig_Functions*

19.2 Trigonometric Functions
----------------------------

These are the familiar 'sin',  cos’, and ‘tan’ functions.  The arguments
to all of these functions are in units of radians; recall that pi
radians equals 180 degrees.

   The math library normally defines 'M_PI' to a  double’ approximation
of pi.  If strict ISO and/or POSIX compliance are requested this
constant is not defined, but you can easily define it yourself:

     #define M_PI 3.14159265358979323846264338327

You can also compute the value of pi with the expression 'acos (-1.0)'.

 -- Function: double sin (double X)
 -- Function: float sinf (float X)
 -- Function: long double sinl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the sine of X, where X is given in radians.
     The return value is in the range '-1' to  1’.

 -- Function: double cos (double X)
 -- Function: float cosf (float X)
 -- Function: long double cosl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the cosine of X, where X is given in
     radians.  The return value is in the range '-1' to  1’.

 -- Function: double tan (double X)
 -- Function: float tanf (float X)
 -- Function: long double tanl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the tangent of X, where X is given in
     radians.

     Mathematically, the tangent function has singularities at odd
     multiples of pi/2.  If the argument X is too close to one of these
     singularities, 'tan' will signal overflow.

   In many applications where 'sin' and  cos’ are used, the sine and
cosine of the same angle are needed at the same time.  It is more
efficient to compute them simultaneously, so the library provides a
function to do that.

 -- Function: void sincos (double X, double *SINX, double *COSX)
 -- Function: void sincosf (float X, float *SINX, float *COSX)
 -- Function: void sincosl (long double X, long double *SINX, long
          double *COSX)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the sine of X in '*SINX' and the cosine of X
     in '*COSX', where X is given in radians.  Both values,  *SINX’ and
     '*COSX', are in the range of  -1’ to ‘1’.

     This function is a GNU extension.  Portable programs should be
     prepared to cope with its absence.

   ISO C99 defines variants of the trig functions which work on complex
numbers.  The GNU C Library provides these functions, but they are only
useful if your compiler supports the new complex types defined by the
standard.  (As of this writing GCC supports complex numbers, but there
are bugs in the implementation.)

 -- Function: complex double csin (complex double Z)
 -- Function: complex float csinf (complex float Z)
 -- Function: complex long double csinl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex sine of Z.  The mathematical
     definition of the complex sine is

     sin (z) = 1/(2*i) * (exp (z*i) - exp (-z*i)).

 -- Function: complex double ccos (complex double Z)
 -- Function: complex float ccosf (complex float Z)
 -- Function: complex long double ccosl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex cosine of Z.  The mathematical
     definition of the complex cosine is

     cos (z) = 1/2 * (exp (z*i) + exp (-z*i))

 -- Function: complex double ctan (complex double Z)
 -- Function: complex float ctanf (complex float Z)
 -- Function: complex long double ctanl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex tangent of Z.  The mathematical
     definition of the complex tangent is

     tan (z) = -i * (exp (z*i) - exp (-z*i)) / (exp (z*i) + exp (-z*i))

     The complex tangent has poles at pi/2 + 2n, where n is an integer.
     'ctan' may signal overflow if Z is too close to a pole.

==============================================================================
File: libc.info,  Node: |Inverse_Trig_Functions|,  Next: |Exponents_and_Logarithms|,  Prev: |Trig_Functions|,  Up: |Mathematics|
==============================================================================

                                                        *Inverse_Trig_Functions*

19.3 Inverse Trigonometric Functions
------------------------------------

These are the usual arcsine, arccosine and arctangent functions, which
are the inverses of the sine, cosine and tangent functions respectively.

 -- Function: double asin (double X)
 -- Function: float asinf (float X)
 -- Function: long double asinl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the arcsine of X that is, the value whose
     sine is X.  The value is in units of radians.  Mathematically,
     there are infinitely many such values; the one actually returned is
     the one between '-pi/2' and  pi/2’ (inclusive).

     The arcsine function is defined mathematically only over the domain
     '-1' to  1’.  If X is outside the domain, ‘asin’ signals a domain
     error.

 -- Function: double acos (double X)
 -- Function: float acosf (float X)
 -- Function: long double acosl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the arccosine of X that is, the value whose
     cosine is X.  The value is in units of radians.  Mathematically,
     there are infinitely many such values; the one actually returned is
     the one between '0' and  pi’ (inclusive).

     The arccosine function is defined mathematically only over the
     domain '-1' to  1’.  If X is outside the domain, ‘acos’ signals a
     domain error.

 -- Function: double atan (double X)
 -- Function: float atanf (float X)
 -- Function: long double atanl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the arctangent of X that is, the value
     whose tangent is X.  The value is in units of radians.
     Mathematically, there are infinitely many such values; the one
     actually returned is the one between '-pi/2' and  pi/2’
     (inclusive).

 -- Function: double atan2 (double Y, double X)
 -- Function: float atan2f (float Y, float X)
 -- Function: long double atan2l (long double Y, long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function computes the arctangent of Y/X, but the signs of both
     arguments are used to determine the quadrant of the result, and X
     is permitted to be zero.  The return value is given in radians and
     is in the range '-pi' to  pi’, inclusive.

     If X and Y are coordinates of a point in the plane, 'atan2' returns
     the signed angle between the line from the origin to that point and
     the x-axis.  Thus, 'atan2' is useful for converting Cartesian
     coordinates to polar coordinates.  (To compute the radial
     coordinate, use 'hypot'; see *note Exponents and Logarithms::.)

     If both X and Y are zero, 'atan2' returns zero.

   ISO C99 defines complex versions of the inverse trig functions.

 -- Function: complex double casin (complex double Z)
 -- Function: complex float casinf (complex float Z)
 -- Function: complex long double casinl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the complex arcsine of Z that is, the value
     whose sine is Z.  The value returned is in radians.

     Unlike the real-valued functions, 'casin' is defined for all values
     of Z.

 -- Function: complex double cacos (complex double Z)
 -- Function: complex float cacosf (complex float Z)
 -- Function: complex long double cacosl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the complex arccosine of Z that is, the
     value whose cosine is Z.  The value returned is in radians.

     Unlike the real-valued functions, 'cacos' is defined for all values
     of Z.

 -- Function: complex double catan (complex double Z)
 -- Function: complex float catanf (complex float Z)
 -- Function: complex long double catanl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the complex arctangent of Z that is, the
     value whose tangent is Z.  The value is in units of radians.

==============================================================================
File: libc.info,  Node: |Exponents_and_Logarithms|,  Next: |Hyperbolic_Functions|,  Prev: |Inverse_Trig_Functions|,  Up: |Mathematics|
==============================================================================

                                                      *Exponents_and_Logarithms*

19.4 Exponentiation and Logarithms
----------------------------------

 -- Function: double exp (double X)
 -- Function: float expf (float X)
 -- Function: long double expl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute 'e' (the base of natural logarithms) raised
     to the power X.

     If the magnitude of the result is too large to be representable,
     'exp' signals overflow.

 -- Function: double exp2 (double X)
 -- Function: float exp2f (float X)
 -- Function: long double exp2l (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute '2' raised to the power X.  Mathematically,
     'exp2 (x)' is the same as  exp (x * log (2))’.

 -- Function: double exp10 (double X)
 -- Function: float exp10f (float X)
 -- Function: long double exp10l (long double X)
 -- Function: double pow10 (double X)
 -- Function: float pow10f (float X)
 -- Function: long double pow10l (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute '10' raised to the power X.
     Mathematically, 'exp10 (x)' is the same as  exp (x * log (10))’.

     The 'exp10' functions are from TS 18661-4:2015; the  pow10’ names
     are GNU extensions.  The name 'exp10' is preferred, since it is
     analogous to 'exp' and  exp2’.

 -- Function: double log (double X)
 -- Function: float logf (float X)
 -- Function: long double logl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the natural logarithm of X.  'exp (log
     (X))' equals X, exactly in mathematics and approximately in C.

     If X is negative, 'log' signals a domain error.  If X is zero, it
     returns negative infinity; if X is too close to zero, it may signal
     overflow.

 -- Function: double log10 (double X)
 -- Function: float log10f (float X)
 -- Function: long double log10l (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the base-10 logarithm of X.  'log10 (X)'
     equals 'log (X) / log (10)'.

 -- Function: double log2 (double X)
 -- Function: float log2f (float X)
 -- Function: long double log2l (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the base-2 logarithm of X.  'log2 (X)'
     equals 'log (X) / log (2)'.

 -- Function: double logb (double X)
 -- Function: float logbf (float X)
 -- Function: long double logbl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions extract the exponent of X and return it as a
     floating-point value.  If 'FLT_RADIX' is two,  logb’ is equal to
     'floor (log2 (x))', except it s probably faster.

     If X is de-normalized, 'logb' returns the exponent X would have if
     it were normalized.  If X is infinity (positive or negative),
     'logb' returns oo.  If X is zero,  logb’ returns oo.  It does not
     signal.

 -- Function: int ilogb (double X)
 -- Function: int ilogbf (float X)
 -- Function: int ilogbl (long double X)
 -- Function: long int llogb (double X)
 -- Function: long int llogbf (float X)
 -- Function: long int llogbl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions are equivalent to the corresponding 'logb'
     functions except that they return signed integer values.  The
     'ilogb' functions are from ISO C99; the  llogb’ functions are from
     TS 18661-1:2014.

Since integers cannot represent infinity and NaN, 'ilogb' instead
returns an integer that can't be the exponent of a normal floating-point
number.  'math.h' defines constants so you can check for this.

 -- Macro: int FP_ILOGB0
     'ilogb' returns this value if its argument is  0’.  The numeric
     value is either 'INT_MIN' or  -INT_MAX’.

     This macro is defined in ISO C99.

 -- Macro: long int FP_LLOGB0
     'llogb' returns this value if its argument is  0’.  The numeric
     value is either 'LONG_MIN' or  -LONG_MAX’.

     This macro is defined in TS 18661-1:2014.

 -- Macro: int FP_ILOGBNAN
     'ilogb' returns this value if its argument is  NaN’.  The numeric
     value is either 'INT_MIN' or  INT_MAX’.

     This macro is defined in ISO C99.

 -- Macro: long int FP_LLOGBNAN
     'llogb' returns this value if its argument is  NaN’.  The numeric
     value is either 'LONG_MIN' or  LONG_MAX’.

     This macro is defined in TS 18661-1:2014.

   These values are system specific.  They might even be the same.  The
proper way to test the result of 'ilogb' is as follows:

     i = ilogb (f);
     if (i == FP_ILOGB0 || i == FP_ILOGBNAN)
       {
         if (isnan (f))
           {
             /* Handle NaN.  */
           }
         else if (f  == 0.0)
           {
             /* Handle 0.0.  */
           }
         else
           {
             /* Some other value with large exponent,
                perhaps +Inf.  */
           }
       }

 -- Function: double pow (double BASE, double POWER)
 -- Function: float powf (float BASE, float POWER)
 -- Function: long double powl (long double BASE, long double POWER)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These are general exponentiation functions, returning BASE raised
     to POWER.

     Mathematically, 'pow' would return a complex number when BASE is
     negative and POWER is not an integral value.  'pow' can t do that,
     so instead it signals a domain error.  'pow' may also underflow or
     overflow the destination type.

 -- Function: double sqrt (double X)
 -- Function: float sqrtf (float X)
 -- Function: long double sqrtl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the nonnegative square root of X.

     If X is negative, 'sqrt' signals a domain error.  Mathematically,
     it should return a complex number.

 -- Function: double cbrt (double X)
 -- Function: float cbrtf (float X)
 -- Function: long double cbrtl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the cube root of X.  They cannot fail; every
     representable real value has a representable real cube root.

 -- Function: double hypot (double X, double Y)
 -- Function: float hypotf (float X, float Y)
 -- Function: long double hypotl (long double X, long double Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return 'sqrt (X*X + Y*Y)'.  This is the length of
     the hypotenuse of a right triangle with sides of length X and Y, or
     the distance of the point (X, Y) from the origin.  Using this
     function instead of the direct formula is wise, since the error is
     much smaller.  See also the function 'cabs' in *note Absolute
     Value::.

 -- Function: double expm1 (double X)
 -- Function: float expm1f (float X)
 -- Function: long double expm1l (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return a value equivalent to 'exp (X) - 1'.  They
     are computed in a way that is accurate even if X is near zero a
     case where 'exp (X) - 1' would be inaccurate owing to subtraction
     of two numbers that are nearly equal.

 -- Function: double log1p (double X)
 -- Function: float log1pf (float X)
 -- Function: long double log1pl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return a value equivalent to 'log (1 + X)'.  They
     are computed in a way that is accurate even if X is near zero.

   ISO C99 defines complex variants of some of the exponentiation and
logarithm functions.

 -- Function: complex double cexp (complex double Z)
 -- Function: complex float cexpf (complex float Z)
 -- Function: complex long double cexpl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return 'e' (the base of natural logarithms) raised
     to the power of Z.  Mathematically, this corresponds to the value

     exp (z) = exp (creal (z)) * (cos (cimag (z)) + I * sin (cimag (z)))

 -- Function: complex double clog (complex double Z)
 -- Function: complex float clogf (complex float Z)
 -- Function: complex long double clogl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the natural logarithm of Z.  Mathematically,
     this corresponds to the value

     log (z) = log (cabs (z)) + I * carg (z)

     'clog' has a pole at 0, and will signal overflow if Z equals or is
     very close to 0.  It is well-defined for all other values of Z.

 -- Function: complex double clog10 (complex double Z)
 -- Function: complex float clog10f (complex float Z)
 -- Function: complex long double clog10l (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the base 10 logarithm of the complex value
     Z.  Mathematically, this corresponds to the value

     log10 (z) = log10 (cabs (z)) + I * carg (z) / log (10)

     These functions are GNU extensions.

 -- Function: complex double csqrt (complex double Z)
 -- Function: complex float csqrtf (complex float Z)
 -- Function: complex long double csqrtl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex square root of the argument Z.
     Unlike the real-valued functions, they are defined for all values
     of Z.

 -- Function: complex double cpow (complex double BASE, complex double
          POWER)
 -- Function: complex float cpowf (complex float BASE, complex float
          POWER)
 -- Function: complex long double cpowl (complex long double BASE,
          complex long double POWER)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return BASE raised to the power of POWER.  This is
     equivalent to 'cexp (y * clog (x))'

==============================================================================
File: libc.info,  Node: |Hyperbolic_Functions|,  Next: |Special_Functions|,  Prev: |Exponents_and_Logarithms|,  Up: |Mathematics|
==============================================================================

                                                          *Hyperbolic_Functions*

19.5 Hyperbolic Functions
-------------------------

The functions in this section are related to the exponential functions;
see *note Exponents and Logarithms::.

 -- Function: double sinh (double X)
 -- Function: float sinhf (float X)
 -- Function: long double sinhl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the hyperbolic sine of X, defined
     mathematically as '(exp (X) - exp (-X)) / 2'.  They may signal
     overflow if X is too large.

 -- Function: double cosh (double X)
 -- Function: float coshf (float X)
 -- Function: long double coshl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the hyperbolic cosine of X, defined
     mathematically as '(exp (X) + exp (-X)) / 2'.  They may signal
     overflow if X is too large.

 -- Function: double tanh (double X)
 -- Function: float tanhf (float X)
 -- Function: long double tanhl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the hyperbolic tangent of X, defined
     mathematically as 'sinh (X) / cosh (X)'.  They may signal overflow
     if X is too large.

   There are counterparts for the hyperbolic functions which take
complex arguments.

 -- Function: complex double csinh (complex double Z)
 -- Function: complex float csinhf (complex float Z)
 -- Function: complex long double csinhl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex hyperbolic sine of Z, defined
     mathematically as '(exp (Z) - exp (-Z)) / 2'.

 -- Function: complex double ccosh (complex double Z)
 -- Function: complex float ccoshf (complex float Z)
 -- Function: complex long double ccoshl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex hyperbolic cosine of Z, defined
     mathematically as '(exp (Z) + exp (-Z)) / 2'.

 -- Function: complex double ctanh (complex double Z)
 -- Function: complex float ctanhf (complex float Z)
 -- Function: complex long double ctanhl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the complex hyperbolic tangent of Z, defined
     mathematically as 'csinh (Z) / ccosh (Z)'.

 -- Function: double asinh (double X)
 -- Function: float asinhf (float X)
 -- Function: long double asinhl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the inverse hyperbolic sine of X the value
     whose hyperbolic sine is X.

 -- Function: double acosh (double X)
 -- Function: float acoshf (float X)
 -- Function: long double acoshl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the inverse hyperbolic cosine of X the value
     whose hyperbolic cosine is X.  If X is less than '1',  acosh’
     signals a domain error.

 -- Function: double atanh (double X)
 -- Function: float atanhf (float X)
 -- Function: long double atanhl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the inverse hyperbolic tangent of X the
     value whose hyperbolic tangent is X.  If the absolute value of X is
     greater than '1',  atanh’ signals a domain error; if it is equal to
     1, 'atanh' returns infinity.

 -- Function: complex double casinh (complex double Z)
 -- Function: complex float casinhf (complex float Z)
 -- Function: complex long double casinhl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the inverse complex hyperbolic sine of Z the
     value whose complex hyperbolic sine is Z.

 -- Function: complex double cacosh (complex double Z)
 -- Function: complex float cacoshf (complex float Z)
 -- Function: complex long double cacoshl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the inverse complex hyperbolic cosine of
     Z the value whose complex hyperbolic cosine is Z.  Unlike the
     real-valued functions, there are no restrictions on the value of Z.

 -- Function: complex double catanh (complex double Z)
 -- Function: complex float catanhf (complex float Z)
 -- Function: complex long double catanhl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the inverse complex hyperbolic tangent of
     Z the value whose complex hyperbolic tangent is Z.  Unlike the
     real-valued functions, there are no restrictions on the value of Z.

==============================================================================
File: libc.info,  Node: |Special_Functions|,  Next: |Errors_in_Math_Functions|,  Prev: |Hyperbolic_Functions|,  Up: |Mathematics|
==============================================================================

                                                             *Special_Functions*

19.6 Special Functions
----------------------

These are some more exotic mathematical functions which are sometimes
useful.  Currently they only have real-valued versions.

 -- Function: double erf (double X)
 -- Function: float erff (float X)
 -- Function: long double erfl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'erf' returns the error function of X.  The error function is
     defined as
          erf (x) = 2/sqrt(pi) * integral from 0 to x of exp(-t^2) dt

 -- Function: double erfc (double X)
 -- Function: float erfcf (float X)
 -- Function: long double erfcl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'erfc' returns  1.0 - erf(X)’, but computed in a fashion that
     avoids round-off error when X is large.

 -- Function: double lgamma (double X)
 -- Function: float lgammaf (float X)
 -- Function: long double lgammal (long double X)
     Preliminary: | MT-Unsafe race:signgam | AS-Unsafe | AC-Safe | *Note
     POSIX Safety Concepts::.

     'lgamma' returns the natural logarithm of the absolute value of the
     gamma function of X.  The gamma function is defined as
          gamma (x) = integral from 0 to oo of t^(x-1) e^-t dt

     The sign of the gamma function is stored in the global variable
     SIGNGAM, which is declared in 'math.h'.  It is  1’ if the
     intermediate result was positive or zero, or '-1' if it was
     negative.

     To compute the real gamma function you can use the 'tgamma'
     function or you can compute the values as follows:
          lgam = lgamma(x);
          gam  = signgam*exp(lgam);

     The gamma function has singularities at the non-positive integers.
     'lgamma' will raise the zero divide exception if evaluated at a
     singularity.

 -- Function: double lgamma_r (double X, int *SIGNP)
 -- Function: float lgammaf_r (float X, int *SIGNP)
 -- Function: long double lgammal_r (long double X, int *SIGNP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'lgamma_r' is just like  lgamma’, but it stores the sign of the
     intermediate result in the variable pointed to by SIGNP instead of
     in the SIGNGAM global.  This means it is reentrant.

 -- Function: double gamma (double X)
 -- Function: float gammaf (float X)
 -- Function: long double gammal (long double X)
     Preliminary: | MT-Unsafe race:signgam | AS-Unsafe | AC-Safe | *Note
     POSIX Safety Concepts::.

     These functions exist for compatibility reasons.  They are
     equivalent to 'lgamma' etc.  It is better to use  lgamma’ since for
     one the name reflects better the actual computation, and moreover
     'lgamma' is standardized in ISO C99 while  gamma’ is not.

 -- Function: double tgamma (double X)
 -- Function: float tgammaf (float X)
 -- Function: long double tgammal (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'tgamma' applies the gamma function to X.  The gamma function is
     defined as
          gamma (x) = integral from 0 to oo of t^(x-1) e^-t dt

     This function was introduced in ISO C99.

 -- Function: double j0 (double X)
 -- Function: float j0f (float X)
 -- Function: long double j0l (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'j0' returns the Bessel function of the first kind of order 0 of X.
     It may signal underflow if X is too large.

 -- Function: double j1 (double X)
 -- Function: float j1f (float X)
 -- Function: long double j1l (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'j1' returns the Bessel function of the first kind of order 1 of X.
     It may signal underflow if X is too large.

 -- Function: double jn (int N, double X)
 -- Function: float jnf (int N, float X)
 -- Function: long double jnl (int N, long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'jn' returns the Bessel function of the first kind of order N of X.
     It may signal underflow if X is too large.

 -- Function: double y0 (double X)
 -- Function: float y0f (float X)
 -- Function: long double y0l (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'y0' returns the Bessel function of the second kind of order 0 of
     X.  It may signal underflow if X is too large.  If X is negative,
     'y0' signals a domain error; if it is zero,  y0’ signals overflow
     and returns -oo.

 -- Function: double y1 (double X)
 -- Function: float y1f (float X)
 -- Function: long double y1l (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'y1' returns the Bessel function of the second kind of order 1 of
     X.  It may signal underflow if X is too large.  If X is negative,
     'y1' signals a domain error; if it is zero,  y1’ signals overflow
     and returns -oo.

 -- Function: double yn (int N, double X)
 -- Function: float ynf (int N, float X)
 -- Function: long double ynl (int N, long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'yn' returns the Bessel function of the second kind of order N of
     X.  It may signal underflow if X is too large.  If X is negative,
     'yn' signals a domain error; if it is zero,  yn’ signals overflow
     and returns -oo.

==============================================================================
File: libc.info,  Node: |Errors_in_Math_Functions|,  Next: |Pseudo_Random_Numbers|,  Prev: |Special_Functions|,  Up: |Mathematics|
==============================================================================

                                                      *Errors_in_Math_Functions*

19.7 Known Maximum Errors in Math Functions
-------------------------------------------

This section lists the known errors of the functions in the math
library.  Errors are measured in 'units of the last place'.  This is a
measure for the relative error.  For a number z with the representation
d.d...d*2^e (we assume IEEE floating-point numbers with base 2) the ULP
is represented by

     |d.d...d - (z / 2^e)| / 2^(p - 1)

where p is the number of bits in the mantissa of the floating-point
number representation.  Ideally the error for all functions is always
less than 0.5ulps in round-to-nearest mode.  Using rounding bits this is
also possible and normally implemented for the basic operations.  Except
for certain functions such as 'sqrt',  fma’ and ‘rint’ whose results are
fully specified by reference to corresponding IEEE 754 floating-point
operations, and conversions between strings and floating point, the GNU
C Library does not aim for correctly rounded results for functions in
the math library, and does not aim for correctness in whether 'inexact'
exceptions are raised.  Instead, the goals for accuracy of functions
without fully specified results are as follows; some functions have bugs
meaning they do not meet these goals in all cases.  In the future, the
GNU C Library may provide some other correctly rounding functions under
the names such as 'crsin' proposed for an extension to ISO C.

   - Each function with a floating-point result behaves as if it
     computes an infinite-precision result that is within a few ulp (in
     both real and complex parts, for functions with complex results) of
     the mathematically correct value of the function (interpreted
     together with ISO C or POSIX semantics for the function in
     question) at the exact value passed as the input.  Exceptions are
     raised appropriately for this value and in accordance with IEEE 754
     / ISO C / POSIX semantics, and it is then rounded according to the
     current rounding direction to the result that is returned to the
     user.  'errno' may also be set (*note Math Error Reporting::).
     (The 'inexact' exception may be raised, or not raised, even if this
     is inconsistent with the infinite-precision value.)

   - For the IBM 'long double' format, as used on PowerPC GNU/Linux, the
     accuracy goal is weaker for input values not exactly representable
     in 106 bits of precision; it is as if the input value is some value
     within 0.5ulp of the value actually passed, where 'ulp' is
     interpreted in terms of a fixed-precision 106-bit mantissa, but not
     necessarily the exact value actually passed with discontiguous
     mantissa bits.

   - For the IBM 'long double' format, functions whose results are fully
     specified by reference to corresponding IEEE 754 floating-point
     operations have the same accuracy goals as other functions, but
     with the error bound being the same as that for division (3ulp).
     Furthermore, 'inexact' and  underflow” exceptions may be raised for
     all functions for any inputs, even where such exceptions are
     inconsistent with the returned value, since the underlying
     floating-point arithmetic has that property.

   - Functions behave as if the infinite-precision result computed is
     zero, infinity or NaN if and only if that is the mathematically
     correct infinite-precision result.  They behave as if the
     infinite-precision result computed always has the same sign as the
     mathematically correct result.

   - If the mathematical result is more than a few ulp above the
     overflow threshold for the current rounding direction, the value
     returned is the appropriate overflow value for the current rounding
     direction, with the overflow exception raised.

   - If the mathematical result has magnitude well below half the least
     subnormal magnitude, the returned value is either zero or the least
     subnormal (in each case, with the correct sign), according to the
     current rounding direction and with the underflow exception raised.

   - Where the mathematical result underflows (before rounding) and is
     not exactly representable as a floating-point value, the function
     does not behave as if the computed infinite-precision result is an
     exact value in the subnormal range.  This means that the underflow
     exception is raised other than possibly for cases where the
     mathematical result is very close to the underflow threshold and
     the function behaves as if it computes an infinite-precision result
     that does not underflow.  (So there may be spurious underflow
     exceptions in cases where the underflowing result is exact, but not
     missing underflow exceptions in cases where it is inexact.)

   - The GNU C Library does not aim for functions to satisfy other
     properties of the underlying mathematical function, such as
     monotonicity, where not implied by the above goals.

   - All the above applies to both real and complex parts, for complex
     functions.

   Therefore many of the functions in the math library have errors.  The
table lists the maximum error for each function which is exposed by one
of the existing tests in the test suite.  The table tries to cover as
much as possible and list the actual maximum error (or at least a
ballpark figure) but this is often not achieved due to the large search
space.

   The table lists the ULP values for different architectures.
Different architectures have different results since their hardware
support for floating-point operations varies and also the existing
hardware support is different.

Function      AArch64         ARM             Alpha           ColdFire        Generic
acosf         1               1               1               -               -
acos          -               -               -               -               -
acosl         1               -               1               -               -
acoshf        2               2               2               -               -
acosh         2               2               2               -               -
acoshl        2               -               2               -               -
asinf         1               1               1               -               -
asin          -               -               -               -               -
asinl         1               -               1               -               -
asinhf        1               1               1               -               -
asinh         1               1               1               -               -
asinhl        3               -               3               -               -
atanf         1               1               1               -               -
atan          1               -               -               -               -
atanl         1               -               1               -               -
atanhf        2               2               2               1               -
atanh         2               2               2               -               -
atanhl        3               -               3               -               -
atan2f        1               1               1               1               -
atan2         -               -               -               -               -
atan2l        1               -               1               -               -
cabsf         -               -               -               -               -
cabs          1               1               1               -               -
cabsl         1               -               1               -               -
cacosf        2 + i 2         2 + i 2         2 + i 2         -               -
cacos         1 + i 1         1 + i 1         1 + i 1         -               -
cacosl        2 + i 2         -               2 + i 2         -               -
cacoshf       2 + i 2         2 + i 2         2 + i 2         0 + i 1         -
cacosh        1 + i 1         1 + i 1         1 + i 1         -               -
cacoshl       2 + i 2         -               2 + i 2         -               -
cargf         1               1               1               -               -
carg          1               -               -               -               -
cargl         2               -               2               -               -
casinf        1 + i 2         1 + i 2         1 + i 2         1 + i 0         -
casin         1 + i 1         1 + i 1         1 + i 1         1 + i 0         -
casinl        2 + i 2         -               2 + i 2         -               -
casinhf       2 + i 1         2 + i 1         2 + i 1         1 + i 6         -
casinh        1 + i 1         1 + i 1         1 + i 1         5 + i 3         -
casinhl       2 + i 2         -               2 + i 2         -               -
catanf        1 + i 1         1 + i 1         1 + i 1         0 + i 1         -
catan         0 + i 1         0 + i 1         0 + i 1         0 + i 1         -
catanl        1 + i 1         -               1 + i 1         -               -
catanhf       1 + i 1         1 + i 1         1 + i 1         -               -
catanh        1 + i 0         1 + i 0         1 + i 0         4 + i 0         -
catanhl       1 + i 1         -               1 + i 1         -               -
cbrtf         1               1               1               -               -
cbrt          3               3               3               1               -
cbrtl         1               -               1               -               -
ccosf         1 + i 1         1 + i 1         1 + i 1         1 + i 1         -
ccos          1 + i 1         1 + i 1         1 + i 1         1 + i 0         -
ccosl         1 + i 1         -               1 + i 1         -               -
ccoshf        1 + i 1         1 + i 1         1 + i 1         1 + i 1         -
ccosh         1 + i 1         1 + i 1         1 + i 1         1 + i 0         -
ccoshl        1 + i 1         -               1 + i 1         -               -
ceilf         -               -               -               -               -
ceil          -               -               -               -               -
ceill         -               -               -               -               -
cexpf         1 + i 2         1 + i 2         1 + i 2         1 + i 1         -
cexp          2 + i 1         2 + i 1         2 + i 1         -               -
cexpl         1 + i 1         -               1 + i 1         -               -
cimagf        -               -               -               -               -
cimag         -               -               -               -               -
cimagl        -               -               -               -               -
clogf         3 + i 1         3 + i 1         3 + i 1         1 + i 0         -
clog          3 + i 1         3 + i 0         3 + i 0         -               -
clogl         2 + i 1         -               2 + i 1         -               -
clog10f       4 + i 2         4 + i 2         4 + i 2         1 + i 1         -
clog10        3 + i 2         3 + i 2         3 + i 2         0 + i 1         -
clog10l       2 + i 2         -               2 + i 2         -               -
conjf         -               -               -               -               -
conj          -               -               -               -               -
conjl         -               -               -               -               -
copysignf     -               -               -               -               -
copysign      -               -               -               -               -
copysignl     -               -               -               -               -
cosf          1               1               1               1               -
cos           -               -               -               2               -
cosl          1               -               1               -               -
coshf         1               1               1               -               -
cosh          1               1               1               -               -
coshl         1               -               1               -               -
cpowf         5 + i 2         4 + i 2         4 + i 2         4 + i 2         -
cpow          2 + i 0         2 + i 0         2 + i 0         2 + i 2         -
cpowl         4 + i 1         -               4 + i 1         -               -
cprojf        -               -               -               -               -
cproj         -               -               -               -               -
cprojl        -               -               -               -               -
crealf        -               -               -               -               -
creal         -               -               -               -               -
creall        -               -               -               -               -
csinf         1 + i 0         1 + i 0         1 + i 0         -               -
csin          1 + i 0         1 + i 0         1 + i 0         -               -
csinl         1 + i 1         -               1 + i 1         -               -
csinhf        1 + i 1         1 + i 1         1 + i 1         1 + i 1         -
csinh         0 + i 1         0 + i 1         0 + i 1         0 + i 1         -
csinhl        1 + i 1         -               1 + i 1         -               -
csqrtf        2 + i 2         2 + i 2         2 + i 2         1 + i 0         -
csqrt         2 + i 2         2 + i 2         2 + i 2         -               -
csqrtl        2 + i 2         -               2 + i 2         -               -
ctanf         1 + i 1         1 + i 1         1 + i 1         -               -
ctan          1 + i 2         1 + i 2         1 + i 2         0 + i 1         -
ctanl         3 + i 3         -               3 + i 3         -               -
ctanhf        2 + i 1         1 + i 2         1 + i 2         2 + i 1         -
ctanh         2 + i 2         2 + i 2         2 + i 2         1 + i 0         -
ctanhl        3 + i 3         -               3 + i 3         -               -
erff          1               1               1               -               -
erf           1               1               1               1               -
erfl          1               -               1               -               -
erfcf         2               2               2               -               -
erfc          2               3               3               1               -
erfcl         2               -               2               -               -
expf          1               1               1               -               -
exp           -               -               -               -               -
expl          1               -               1               -               -
exp10f        -               -               -               2               -
exp10         2               2               2               6               -
exp10l        2               -               2               -               -
exp2f         1               1               1               -               -
exp2          1               1               1               -               -
exp2l         1               -               1               -               -
expm1f        1               1               1               1               -
expm1         1               1               1               1               -
expm1l        1               -               1               -               -
fabsf         -               -               -               -               -
fabs          -               -               -               -               -
fabsl         -               -               -               -               -
fdimf         -               -               -               -               -
fdim          -               -               -               -               -
fdiml         -               -               -               -               -
floorf        -               -               -               -               -
floor         -               -               -               -               -
floorl        -               -               -               -               -
fmaf          -               -               -               -               -
fma           -               -               -               -               -
fmal          -               -               -               -               -
fmaxf         -               -               -               -               -
fmax          -               -               -               -               -
fmaxl         -               -               -               -               -
fmaxmagf      -               -               -               -               -
fmaxmag       -               -               -               -               -
fmaxmagl      -               -               -               -               -
fminf         -               -               -               -               -
fmin          -               -               -               -               -
fminl         -               -               -               -               -
fminmagf      -               -               -               -               -
fminmag       -               -               -               -               -
fminmagl      -               -               -               -               -
fmodf         -               -               -               -               -
fmod          -               -               -               -               -
fmodl         -               -               -               -               -
frexpf        -               -               -               -               -
frexp         -               -               -               -               -
frexpl        -               -               -               -               -
fromfpf       -               -               -               -               -
fromfp        -               -               -               -               -
fromfpl       -               -               -               -               -
fromfpxf      -               -               -               -               -
fromfpx       -               -               -               -               -
fromfpxl      -               -               -               -               -
gammaf        4               4               4               -               -
gamma         3               4               4               -               -
gammal        5               -               5               -               -
hypotf        -               -               -               1               -
hypot         1               1               1               -               -
hypotl        1               -               1               -               -
ilogbf        -               -               -               -               -
ilogb         -               -               -               -               -
ilogbl        -               -               -               -               -
j0f           2               2               2               2               -
j0            2               2               2               2               -
j0l           2               -               2               -               -
j1f           2               2               2               2               -
j1            1               1               1               1               -
j1l           4               -               4               -               -
jnf           4               4               4               4               -
jn            4               4               4               4               -
jnl           7               -               7               -               -
lgammaf       4               4               4               2               -
lgamma        3               4               4               1               -
lgammal       5               -               5               -               -
llogbf        -               -               -               -               -
llogb         -               -               -               -               -
llogbl        -               -               -               -               -
lrintf        -               -               -               -               -
lrint         -               -               -               -               -
lrintl        -               -               -               -               -
llrintf       -               -               -               -               -
llrint        -               -               -               -               -
llrintl       -               -               -               -               -
logf          1               1               1               -               -
log           -               -               -               -               -
logl          1               -               1               -               -
log10f        2               2               2               2               -
log10         2               2               2               1               -
log10l        1               -               1               -               -
log1pf        1               1               1               1               -
log1p         1               1               1               -               -
log1pl        2               -               2               -               -
log2f         1               1               1               -               -
log2          1               2               2               -               -
log2l         2               -               2               -               -
logbf         -               -               -               -               -
logb          -               -               -               -               -
logbl         -               -               -               -               -
lroundf       -               -               -               -               -
lround        -               -               -               -               -
lroundl       -               -               -               -               -
llroundf      -               -               -               -               -
llround       -               -               -               -               -
llroundl      -               -               -               -               -
modff         -               -               -               -               -
modf          -               -               -               -               -
modfl         -               -               -               -               -
nearbyintf    -               -               -               -               -
nearbyint     -               -               -               -               -
nearbyintl    -               -               -               -               -
nextafterf    -               -               -               -               -
nextafter     -               -               -               -               -
nextafterl    -               -               -               -               -
nextdownf     -               -               -               -               -
nextdown      -               -               -               -               -
nextdownl     -               -               -               -               -
nexttowardf   -               -               -               -               -
nexttoward    -               -               -               -               -
nexttowardl   -               -               -               -               -
nextupf       -               -               -               -               -
nextup        -               -               -               -               -
nextupl       -               -               -               -               -
powf          1               1               1               -               -
pow           -               -               -               -               -
powl          2               -               2               -               -
remainderf    -               -               -               -               -
remainder     -               -               -               -               -
remainderl    -               -               -               -               -
remquof       -               -               -               -               -
remquo        -               -               -               -               -
remquol       -               -               -               -               -
rintf         -               -               -               -               -
rint          -               -               -               -               -
rintl         -               -               -               -               -
roundf        -               -               -               -               -
round         -               -               -               -               -
roundl        -               -               -               -               -
roundevenf    -               -               -               -               -
roundeven     -               -               -               -               -
roundevenl    -               -               -               -               -
scalbf        -               -               -               -               -
scalb         -               -               -               -               -
scalbl        -               -               -               -               -
scalbnf       -               -               -               -               -
scalbn        -               -               -               -               -
scalbnl       -               -               -               -               -
sinf          1               1               1               -               -
sin           -               -               -               -               -
sinl          1               -               1               -               -
sincosf       1               1               1               1               -
sincos        -               -               -               1               -
sincosl       1               -               1               -               -
sinhf         2               2               2               -               -
sinh          2               2               2               -               -
sinhl         2               -               2               -               -
sqrtf         -               -               -               -               -
sqrt          -               -               -               -               -
sqrtl         -               -               -               -               -
tanf          1               1               1               -               -
tan           -               -               -               1               -
tanl          1               -               1               -               -
tanhf         2               2               2               -               -
tanh          2               2               2               -               -
tanhl         2               -               2               -               -
tgammaf       4               4               4               1               -
tgamma        5               5               5               1               -
tgammal       4               -               4               -               -
truncf        -               -               -               -               -
trunc         -               -               -               -               -
truncl        -               -               -               -               -
ufromfpf      -               -               -               -               -
ufromfp       -               -               -               -               -
ufromfpl      -               -               -               -               -
ufromfpxf     -               -               -               -               -
ufromfpx      -               -               -               -               -
ufromfpxl     -               -               -               -               -
y0f           1               1               1               1               -
y0            2               2               2               2               -
y0l           3               -               3               -               -
y1f           2               2               2               2               -
y1            3               3               3               3               -
y1l           2               -               2               -               -
ynf           2               2               2               2               -
yn            3               3               3               3               -
ynl           5               -               5               -               -
Function      HPPA            IA64            M68k            MIPS 32-bit     MIPS 64-bit
acosf         1               -               -               1               1
acos          -               -               -               -               -
acosl         -               -               -               -               1
acoshf        2               -               1               2               2
acosh         2               -               1               2               2
acoshl        -               -               1               -               2
asinf         1               -               -               1               1
asin          -               -               -               -               -
asinl         -               -               -               -               1
asinhf        1               -               1               1               1
asinh         1               -               1               1               1
asinhl        -               -               1               -               3
atanf         1               -               -               1               1
atan          -               -               -               -               -
atanl         -               -               -               -               1
atanhf        2               -               -               2               2
atanh         2               -               -               2               2
atanhl        -               -               -               -               3
atan2f        1               -               1               1               1
atan2         -               -               -               -               -
atan2l        -               -               1               -               1
cabsf         -               -               -               -               -
cabs          1               -               1               1               1
cabsl         -               -               1               -               1
cacosf        2 + i 2         2 + i 2         2 + i 1         2 + i 2         2 + i 2
cacos         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
cacosl        -               1 + i 2         1 + i 2         -               2 + i 2
cacoshf       2 + i 2         2 + i 2         1 + i 2         2 + i 2         2 + i 2
cacosh        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
cacoshl       -               2 + i 1         2 + i 1         -               2 + i 2
cargf         1               -               1               1               1
carg          -               -               -               -               -
cargl         -               -               1               -               2
casinf        1 + i 2         1 + i 2         1 + i 1         1 + i 2         1 + i 2
casin         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
casinl        1 + i 0         1 + i 2         1 + i 2         -               2 + i 2
casinhf       2 + i 1         2 + i 1         1 + i 1         2 + i 1         2 + i 1
casinh        5 + i 3         1 + i 1         1 + i 1         1 + i 1         1 + i 1
casinhl       5 + i 3         2 + i 1         2 + i 1         -               2 + i 2
catanf        1 + i 1         0 + i 1         0 + i 1         1 + i 1         1 + i 1
catan         0 + i 1         0 + i 1         0 + i 1         0 + i 1         0 + i 1
catanl        0 + i 1         0 + i 1         1 + i 1         -               1 + i 1
catanhf       1 + i 1         1 + i 0         1 + i 0         1 + i 1         1 + i 1
catanh        4 + i 0         1 + i 0         1 + i 0         1 + i 0         1 + i 0
catanhl       4 + i 0         1 + i 0         1 + i 1         -               1 + i 1
cbrtf         1               -               1               1               1
cbrt          3               -               1               3               3
cbrtl         1               -               1               -               1
ccosf         1 + i 1         0 + i 1         -               1 + i 1         1 + i 1
ccos          1 + i 1         1 + i 1         -               1 + i 1         1 + i 1
ccosl         1 + i 0         1 + i 1         1 + i 1         -               1 + i 1
ccoshf        1 + i 1         1 + i 1         -               1 + i 1         1 + i 1
ccosh         1 + i 1         1 + i 1         -               1 + i 1         1 + i 1
ccoshl        1 + i 0         0 + i 1         0 + i 1         -               1 + i 1
ceilf         -               -               -               -               -
ceil          -               -               -               -               -
ceill         -               -               -               -               -
cexpf         1 + i 2         1 + i 2         -               1 + i 2         1 + i 2
cexp          2 + i 1         2 + i 1         -               2 + i 1         2 + i 1
cexpl         -               1 + i 1         1 + i 1         -               1 + i 1
cimagf        -               -               -               -               -
cimag         -               -               -               -               -
cimagl        -               -               -               -               -
clogf         3 + i 1         1 + i 0         2 + i 1         3 + i 1         3 + i 1
clog          3 + i 0         1 + i 1         3 + i 1         3 + i 0         3 + i 0
clogl         -               1 + i 1         3 + i 1         -               2 + i 1
clog10f       4 + i 2         2 + i 1         2 + i 1         4 + i 2         4 + i 2
clog10        3 + i 2         2 + i 1         2 + i 1         3 + i 2         3 + i 2
clog10l       0 + i 1         1 + i 1         3 + i 2         -               2 + i 2
conjf         -               -               -               -               -
conj          -               -               -               -               -
conjl         -               -               -               -               -
copysignf     -               -               -               -               -
copysign      -               -               -               -               -
copysignl     -               -               -               -               -
cosf          1               -               -               1               1
cos           2               1               1               -               -
cosl          2               -               -               -               1
coshf         1               -               -               1               1
cosh          1               -               -               1               1
coshl         -               -               -               -               1
cpowf         4 + i 2         5 + i 2         3 + i 5         4 + i 2         4 + i 2
cpow          2 + i 2         2 + i 0         1 + i 0         2 + i 0         2 + i 0
cpowl         2 + i 2         3 + i 4         3 + i 1         -               4 + i 1
cprojf        -               -               -               -               -
cproj         -               -               -               -               -
cprojl        -               -               -               -               -
crealf        -               -               -               -               -
creal         -               -               -               -               -
creall        -               -               -               -               -
csinf         1 + i 0         1 + i 1         -               1 + i 0         1 + i 0
csin          1 + i 0         1 + i 0         -               1 + i 0         1 + i 0
csinl         -               1 + i 0         1 + i 0         -               1 + i 1
csinhf        1 + i 1         1 + i 1         -               1 + i 1         1 + i 1
csinh         0 + i 1         1 + i 1         -               0 + i 1         0 + i 1
csinhl        0 + i 1         1 + i 0         1 + i 0         -               1 + i 1
csqrtf        2 + i 2         1 + i 1         1 + i 1         2 + i 2         2 + i 2
csqrt         2 + i 2         1 + i 1         1 + i 1         2 + i 2         2 + i 2
csqrtl        -               1 + i 1         2 + i 2         -               2 + i 2
ctanf         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ctan          1 + i 2         1 + i 2         1 + i 1         1 + i 2         1 + i 2
ctanl         0 + i 1         2 + i 2         2 + i 2         -               3 + i 3
ctanhf        1 + i 2         1 + i 1         1 + i 2         1 + i 2         1 + i 2
ctanh         2 + i 2         2 + i 2         1 + i 1         2 + i 2         2 + i 2
ctanhl        1 + i 0         1 + i 2         2 + i 2         -               3 + i 3
erff          1               -               1               1               1
erf           1               -               -               1               1
erfl          1               -               1               -               1
erfcf         2               -               1               2               2
erfc          3               -               -               3               3
erfcl         1               -               2               -               2
expf          1               -               -               1               1
exp           -               -               -               -               -
expl          -               -               -               -               1
exp10f        2               -               -               -               -
exp10         6               -               -               2               2
exp10l        6               -               -               -               2
exp2f         1               -               -               1               1
exp2          1               -               1               1               1
exp2l         -               -               -               -               1
expm1f        1               -               -               1               1
expm1         1               -               -               1               1
expm1l        1               1               -               -               1
fabsf         -               -               -               -               -
fabs          -               -               -               -               -
fabsl         -               -               -               -               -
fdimf         -               -               -               -               -
fdim          -               -               -               -               -
fdiml         -               -               -               -               -
floorf        -               -               -               -               -
floor         -               -               -               -               -
floorl        -               -               -               -               -
fmaf          -               -               -               -               -
fma           -               -               -               -               -
fmal          -               -               -               -               -
fmaxf         -               -               -               -               -
fmax          -               -               -               -               -
fmaxl         -               -               -               -               -
fmaxmagf      -               -               -               -               -
fmaxmag       -               -               -               -               -
fmaxmagl      -               -               -               -               -
fminf         -               -               -               -               -
fmin          -               -               -               -               -
fminl         -               -               -               -               -
fminmagf      -               -               -               -               -
fminmag       -               -               -               -               -
fminmagl      -               -               -               -               -
fmodf         -               -               -               -               -
fmod          -               -               -               -               -
fmodl         -               -               -               -               -
frexpf        -               -               -               -               -
frexp         -               -               -               -               -
frexpl        -               -               -               -               -
fromfpf       -               -               -               -               -
fromfp        -               -               -               -               -
fromfpl       -               -               -               -               -
fromfpxf      -               -               -               -               -
fromfpx       -               -               -               -               -
fromfpxl      -               -               -               -               -
gammaf        4               -               1               4               4
gamma         4               -               -               4               4
gammal        -               -               2               -               5
hypotf        1               -               -               -               -
hypot         1               -               1               1               1
hypotl        -               -               1               -               1
ilogbf        -               -               -               -               -
ilogb         -               -               -               -               -
ilogbl        -               -               -               -               -
j0f           2               2               2               2               2
j0            2               2               1               2               2
j0l           2               2               2               -               2
j1f           2               2               2               2               2
j1            1               1               -               1               1
j1l           1               1               1               -               4
jnf           5               4               2               4               4
jn            4               4               2               4               4
jnl           4               4               4               -               7
lgammaf       4               -               1               4               4
lgamma        4               -               -               4               4
lgammal       1               -               2               -               5
llogbf        -               -               -               -               -
llogb         -               -               -               -               -
llogbl        -               -               -               -               -
lrintf        -               -               -               -               -
lrint         -               -               -               -               -
lrintl        -               -               -               -               -
llrintf       -               -               -               -               -
llrint        -               -               -               -               -
llrintl       -               -               -               -               -
logf          1               -               -               1               1
log           -               -               -               -               -
logl          -               -               -               -               1
log10f        2               -               -               2               2
log10         2               -               -               2               2
log10l        1               -               -               -               1
log1pf        1               -               -               1               1
log1p         1               -               -               1               1
log1pl        -               -               -               -               2
log2f         1               -               -               1               1
log2          2               -               -               2               2
log2l         -               -               -               -               2
logbf         -               -               -               -               -
logb          -               -               -               -               -
logbl         -               -               -               -               -
lroundf       -               -               -               -               -
lround        -               -               -               -               -
lroundl       -               -               -               -               -
llroundf      -               -               -               -               -
llround       -               -               -               -               -
llroundl      -               -               -               -               -
modff         -               -               -               -               -
modf          -               -               -               -               -
modfl         -               -               -               -               -
nearbyintf    -               -               -               -               -
nearbyint     -               -               -               -               -
nearbyintl    -               -               -               -               -
nextafterf    -               -               -               -               -
nextafter     -               -               -               -               -
nextafterl    -               -               -               -               -
nextdownf     -               -               -               -               -
nextdown      -               -               -               -               -
nextdownl     -               -               -               -               -
nexttowardf   -               -               -               -               -
nexttoward    -               -               -               -               -
nexttowardl   -               -               -               -               -
nextupf       -               -               -               -               -
nextup        -               -               -               -               -
nextupl       -               -               -               -               -
powf          1               -               7               1               1
pow           -               -               1               -               -
powl          -               -               9               -               2
remainderf    -               -               -               -               -
remainder     -               -               -               -               -
remainderl    -               -               -               -               -
remquof       -               -               -               -               -
remquo        -               -               -               -               -
remquol       -               -               -               -               -
rintf         -               -               -               -               -
rint          -               -               -               -               -
rintl         -               -               -               -               -
roundf        -               -               -               -               -
round         -               -               -               -               -
roundl        -               -               -               -               -
roundevenf    -               -               -               -               -
roundeven     -               -               -               -               -
roundevenl    -               -               -               -               -
scalbf        -               -               -               -               -
scalb         -               -               -               -               -
scalbl        -               -               -               -               -
scalbnf       -               -               -               -               -
scalbn        -               -               -               -               -
scalbnl       -               -               -               -               -
sinf          1               -               -               1               1
sin           -               1               1               -               -
sinl          -               -               -               -               1
sincosf       1               -               -               1               1
sincos        1               1               -               -               -
sincosl       1               -               -               -               1
sinhf         2               -               -               2               2
sinh          2               -               -               2               2
sinhl         -               -               -               -               2
sqrtf         -               -               -               -               -
sqrt          -               -               -               -               -
sqrtl         -               -               -               -               -
tanf          1               -               -               1               1
tan           1               -               -               -               -
tanl          1               -               -               -               1
tanhf         2               -               -               2               2
tanh          2               -               -               2               2
tanhl         -               -               -               -               2
tgammaf       4               -               4               4               4
tgamma        5               -               1               5               5
tgammal       1               1               9               -               4
truncf        -               -               -               -               -
trunc         -               -               -               -               -
truncl        -               -               -               -               -
ufromfpf      -               -               -               -               -
ufromfp       -               -               -               -               -
ufromfpl      -               -               -               -               -
ufromfpxf     -               -               -               -               -
ufromfpx      -               -               -               -               -
ufromfpxl     -               -               -               -               -
y0f           1               1               1               1               1
y0            2               2               1               2               2
y0l           2               1               1               -               3
y1f           2               2               3               2               2
y1            3               3               1               3               3
y1l           3               2               2               -               2
ynf           2               3               3               2               2
yn            3               3               2               3               3
ynl           3               2               4               -               5
Function      MicroBlaze      Nios II         PowerPC         PowerPC         S/390
                                                              soft-float
acosf         -               1               1               1               1
acos          -               -               -               -               -
acosl         -               -               1               1               1
acoshf        -               2               2               2               2
acosh         1               2               2               2               2
acoshl        -               -               2               1               2
asinf         -               1               1               1               1
asin          -               -               -               -               -
asinl         -               -               2               2               1
asinhf        1               1               1               1               1
asinh         1               1               1               1               1
asinhl        -               -               2               2               3
atanf         -               1               1               1               1
atan          -               -               1               -               -
atanl         -               -               1               1               1
atanhf        1               2               2               2               2
atanh         -               2               2               2               2
atanhl        -               -               2               2               3
atan2f        1               1               1               1               1
atan2         -               -               -               -               -
atan2l        -               -               2               2               1
cabsf         -               -               -               -               -
cabs          -               1               1               1               1
cabsl         -               -               1               1               1
cacosf        2 + i 2         2 + i 2         2 + i 2         2 + i 2         2 + i 2
cacos         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
cacosl        -               -               1 + i 2         2 + i 1         2 + i 2
cacoshf       2 + i 2         2 + i 2         2 + i 2         2 + i 2         2 + i 2
cacosh        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
cacoshl       -               -               2 + i 1         1 + i 2         2 + i 2
cargf         -               1               1               1               1
carg          -               -               1               -               -
cargl         -               -               2               2               2
casinf        1 + i 2         1 + i 2         1 + i 2         1 + i 2         1 + i 2
casin         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
casinl        -               -               1 + i 2         2 + i 1         2 + i 2
casinhf       2 + i 1         2 + i 1         2 + i 1         2 + i 1         2 + i 1
casinh        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
casinhl       -               -               2 + i 1         1 + i 2         2 + i 2
catanf        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
catan         0 + i 1         0 + i 1         0 + i 1         0 + i 1         0 + i 1
catanl        -               -               1 + i 1         1 + i 1         1 + i 1
catanhf       1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
catanh        1 + i 0         1 + i 0         1 + i 0         1 + i 0         1 + i 0
catanhl       -               -               1 + i 1         1 + i 1         1 + i 1
cbrtf         1               1               1               1               1
cbrt          1               3               3               3               3
cbrtl         -               -               1               1               1
ccosf         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ccos          1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ccosl         -               -               1 + i 2         1 + i 2         1 + i 1
ccoshf        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ccosh         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ccoshl        -               -               1 + i 2         1 + i 2         1 + i 1
ceilf         -               -               -               -               -
ceil          -               -               -               -               -
ceill         -               -               -               -               -
cexpf         1 + i 2         1 + i 2         1 + i 2         1 + i 2         1 + i 2
cexp          2 + i 1         2 + i 1         2 + i 1         2 + i 1         2 + i 1
cexpl         -               -               2 + i 2         1 + i 1         1 + i 1
cimagf        -               -               -               -               -
cimag         -               -               -               -               -
cimagl        -               -               -               -               -
clogf         1 + i 1         3 + i 1         3 + i 1         3 + i 1         3 + i 1
clog          1 + i 0         3 + i 0         3 + i 1         3 + i 0         3 + i 0
clogl         -               -               5 + i 2         2 + i 2         2 + i 1
clog10f       2 + i 1         4 + i 2         4 + i 2         4 + i 2         4 + i 2
clog10        2 + i 1         3 + i 2         3 + i 2         3 + i 2         3 + i 2
clog10l       -               -               3 + i 2         3 + i 2         2 + i 2
conjf         -               -               -               -               -
conj          -               -               -               -               -
conjl         -               -               -               -               -
copysignf     -               -               -               -               -
copysign      -               -               -               -               -
copysignl     -               -               -               -               -
cosf          1               1               1               1               1
cos           -               -               -               -               -
cosl          -               -               4               4               1
coshf         1               1               1               1               1
cosh          1               1               1               1               1
coshl         -               -               3               3               1
cpowf         4 + i 2         4 + i 2         5 + i 2         4 + i 2         5 + i 2
cpow          2 + i 0         2 + i 0         2 + i 0         2 + i 0         2 + i 0
cpowl         -               -               4 + i 2         4 + i 1         4 + i 1
cprojf        -               -               -               -               -
cproj         -               -               -               -               -
cprojl        -               -               -               -               -
crealf        -               -               -               -               -
creal         -               -               -               -               -
creall        -               -               -               -               -
csinf         1 + i 0         1 + i 0         1 + i 0         1 + i 0         1 + i 0
csin          1 + i 0         1 + i 0         1 + i 0         1 + i 0         1 + i 0
csinl         -               -               2 + i 1         2 + i 1         1 + i 1
csinhf        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
csinh         0 + i 1         0 + i 1         0 + i 1         0 + i 1         0 + i 1
csinhl        -               -               1 + i 2         1 + i 2         1 + i 1
csqrtf        1 + i 1         2 + i 2         2 + i 2         2 + i 2         2 + i 2
csqrt         1 + i 1         2 + i 2         2 + i 2         2 + i 2         2 + i 2
csqrtl        -               -               1 + i 1         1 + i 1         2 + i 2
ctanf         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ctan          1 + i 2         1 + i 2         1 + i 2         1 + i 2         1 + i 2
ctanl         -               -               3 + i 2         3 + i 2         3 + i 3
ctanhf        1 + i 2         1 + i 2         2 + i 1         1 + i 2         2 + i 1
ctanh         2 + i 2         2 + i 2         2 + i 2         2 + i 2         2 + i 2
ctanhl        -               -               3 + i 3         2 + i 3         3 + i 3
erff          -               1               1               1               1
erf           1               1               1               1               1
erfl          -               -               1               1               1
erfcf         1               2               2               2               2
erfc          1               3               2               3               2
erfcl         -               -               3               3               2
expf          -               1               1               1               1
exp           -               -               1               -               -
expl          -               -               1               1               1
exp10f        -               -               -               -               -
exp10         1               2               2               2               2
exp10l        -               -               1               1               2
exp2f         -               1               1               1               1
exp2          -               1               1               1               1
exp2l         -               -               2               1               1
expm1f        1               1               1               1               1
expm1         1               1               1               1               1
expm1l        -               -               1               1               1
fabsf         -               -               -               -               -
fabs          -               -               -               -               -
fabsl         -               -               -               -               -
fdimf         -               -               -               -               -
fdim          -               -               -               -               -
fdiml         -               -               -               -               -
floorf        -               -               -               -               -
floor         -               -               -               -               -
floorl        -               -               -               -               -
fmaf          -               -               -               -               -
fma           -               -               -               -               -
fmal          -               -               1               1               -
fmaxf         -               -               -               -               -
fmax          -               -               -               -               -
fmaxl         -               -               -               -               -
fmaxmagf      -               -               -               -               -
fmaxmag       -               -               -               -               -
fmaxmagl      -               -               -               -               -
fminf         -               -               -               -               -
fmin          -               -               -               -               -
fminl         -               -               -               -               -
fminmagf      -               -               -               -               -
fminmag       -               -               -               -               -
fminmagl      -               -               -               -               -
fmodf         -               -               -               -               -
fmod          -               -               -               -               -
fmodl         -               -               1               1               -
frexpf        -               -               -               -               -
frexp         -               -               -               -               -
frexpl        -               -               -               -               -
fromfpf       -               -               -               -               -
fromfp        -               -               -               -               -
fromfpl       -               -               -               -               -
fromfpxf      -               -               -               -               -
fromfpx       -               -               -               -               -
fromfpxl      -               -               -               -               -
gammaf        1               4               4               4               4
gamma         1               4               3               4               3
gammal        -               -               3               3               5
hypotf        -               -               -               -               -
hypot         1               1               1               1               1
hypotl        -               -               1               1               1
ilogbf        -               -               -               -               -
ilogb         -               -               -               -               -
ilogbl        -               -               -               -               -
j0f           2               2               2               2               2
j0            2               2               2               2               2
j0l           -               -               2               2               2
j1f           2               2               2               2               2
j1            1               1               1               1               1
j1l           -               -               2               1               4
jnf           4               4               4               4               4
jn            4               4               4               4               4
jnl           -               -               4               4               7
lgammaf       1               4               4               4               4
lgamma        1               4               3               4               3
lgammal       -               -               3               3               5
llogbf        -               -               -               -               -
llogb         -               -               -               -               -
llogbl        -               -               -               -               -
lrintf        -               -               -               -               -
lrint         -               -               -               -               -
lrintl        -               -               -               -               -
llrintf       -               -               -               -               -
llrint        -               -               -               -               -
llrintl       -               -               -               -               -
logf          1               1               1               1               1
log           -               -               -               -               -
logl          -               -               1               1               1
log10f        2               2               2               2               2
log10         1               2               2               2               2
log10l        -               -               1               1               1
log1pf        1               1               1               1               1
log1p         -               1               1               1               1
log1pl        -               -               2               2               2
log2f         -               1               1               1               1
log2          -               2               1               2               1
log2l         -               -               1               1               2
logbf         -               -               -               -               -
logb          -               -               -               -               -
logbl         -               -               -               -               -
lroundf       -               -               -               -               -
lround        -               -               -               -               -
lroundl       -               -               -               -               -
llroundf      -               -               -               -               -
llround       -               -               -               -               -
llroundl      -               -               -               -               -
modff         -               -               -               -               -
modf          -               -               -               -               -
modfl         -               -               -               -               -
nearbyintf    -               -               -               -               -
nearbyint     -               -               -               -               -
nearbyintl    -               -               -               -               -
nextafterf    -               -               -               -               -
nextafter     -               -               -               -               -
nextafterl    -               -               -               -               -
nextdownf     -               -               -               -               -
nextdown      -               -               -               -               -
nextdownl     -               -               -               -               -
nexttowardf   -               -               -               -               -
nexttoward    -               -               -               -               -
nexttowardl   -               -               -               -               -
nextupf       -               -               -               -               -
nextup        -               -               -               -               -
nextupl       -               -               -               -               -
powf          1               3               1               1               1
pow           -               -               -               -               -
powl          -               -               1               1               2
remainderf    -               -               -               -               -
remainder     -               -               -               -               -
remainderl    -               -               -               -               -
remquof       -               -               -               -               -
remquo        -               -               -               -               -
remquol       -               -               -               -               -
rintf         -               -               -               -               -
rint          -               -               -               -               -
rintl         -               -               -               -               -
roundf        -               -               -               -               -
round         -               -               -               -               -
roundl        -               -               -               -               -
roundevenf    -               -               -               -               -
roundeven     -               -               -               -               -
roundevenl    -               -               -               -               -
scalbf        -               -               -               -               -
scalb         -               -               -               -               -
scalbl        -               -               -               -               -
scalbnf       -               -               -               -               -
scalbn        -               -               -               -               -
scalbnl       -               -               -               -               -
sinf          1               1               1               1               1
sin           -               -               -               -               -
sinl          -               -               1               1               1
sincosf       1               1               1               1               1
sincos        -               -               -               -               -
sincosl       -               -               1               1               1
sinhf         -               2               2               2               2
sinh          -               2               2               2               2
sinhl         -               -               3               3               2
sqrtf         -               -               -               -               -
sqrt          -               -               -               -               -
sqrtl         -               -               1               1               -
tanf          -               1               1               1               1
tan           -               -               -               -               -
tanl          -               -               2               2               1
tanhf         -               2               2               2               2
tanh          -               2               2               2               2
tanhl         -               -               1               1               2
tgammaf       3               5               4               4               4
tgamma        4               5               5               5               5
tgammal       -               -               5               3               4
truncf        -               -               -               -               -
trunc         -               -               -               -               -
truncl        -               -               -               -               -
ufromfpf      -               -               -               -               -
ufromfp       -               -               -               -               -
ufromfpl      -               -               -               -               -
ufromfpxf     -               -               -               -               -
ufromfpx      -               -               -               -               -
ufromfpxl     -               -               -               -               -
y0f           1               1               1               1               1
y0            2               2               2               2               2
y0l           -               -               1               1               3
y1f           2               2               2               2               2
y1            3               3               3               3               3
y1l           -               -               2               2               2
ynf           2               2               2               2               2
yn            3               3               3               3               3
ynl           -               -               2               2               5
Function      SH              Sparc           Tile            i686            ix86
acosf         -               1               1               -               -
acos          -               -               -               1               1
acosl         -               1               -               1               1
acoshf        -               2               2               -               -
acosh         1               2               2               1               1
acoshl        -               2               -               2               2
asinf         -               1               1               -               -
asin          -               -               -               1               1
asinl         -               1               -               1               1
asinhf        1               1               1               -               -
asinh         1               1               1               1               1
asinhl        -               3               -               3               3
atanf         -               1               1               -               -
atan          -               -               -               1               1
atanl         -               1               -               1               1
atanhf        1               2               2               -               -
atanh         -               2               2               1               1
atanhl        -               3               -               3               3
atan2f        1               1               1               -               -
atan2         -               -               -               1               1
atan2l        -               1               -               1               1
cabsf         -               -               -               -               -
cabs          -               1               1               1               1
cabsl         -               1               -               1               1
cacosf        2 + i 2         2 + i 2         2 + i 2         1 + i 1         1 + i 1
cacos         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
cacosl        -               2 + i 2         -               1 + i 2         1 + i 2
cacoshf       2 + i 2         2 + i 2         2 + i 2         1 + i 1         1 + i 1
cacosh        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
cacoshl       -               2 + i 2         -               2 + i 1         2 + i 1
cargf         -               1               1               -               -
carg          -               -               -               1               1
cargl         -               2               -               1               1
casinf        1 + i 2         1 + i 2         1 + i 2         1 + i 1         1 + i 1
casin         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
casinl        -               2 + i 2         -               1 + i 2         1 + i 2
casinhf       2 + i 1         2 + i 1         2 + i 1         1 + i 1         1 + i 1
casinh        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
casinhl       -               2 + i 2         -               2 + i 1         2 + i 1
catanf        1 + i 1         1 + i 1         1 + i 1         0 + i 1         0 + i 1
catan         0 + i 1         0 + i 1         0 + i 1         0 + i 1         0 + i 1
catanl        -               1 + i 1         -               0 + i 1         0 + i 1
catanhf       1 + i 1         1 + i 1         1 + i 1         1 + i 0         1 + i 0
catanh        1 + i 0         1 + i 0         1 + i 0         1 + i 0         1 + i 0
catanhl       -               1 + i 1         -               1 + i 0         1 + i 0
cbrtf         1               1               1               1               1
cbrt          1               3               3               1               1
cbrtl         -               1               -               3               3
ccosf         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ccos          1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ccosl         -               1 + i 1         -               1 + i 1         1 + i 1
ccoshf        1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ccosh         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ccoshl        -               1 + i 1         -               1 + i 1         1 + i 1
ceilf         -               -               -               -               -
ceil          -               -               -               -               -
ceill         -               -               -               -               -
cexpf         1 + i 2         1 + i 2         1 + i 2         1 + i 2         1 + i 2
cexp          2 + i 1         2 + i 1         2 + i 1         2 + i 1         2 + i 1
cexpl         -               1 + i 1         -               1 + i 1         1 + i 1
cimagf        -               -               -               -               -
cimag         -               -               -               -               -
cimagl        -               -               -               -               -
clogf         1 + i 1         3 + i 1         3 + i 1         1 + i 0         1 + i 0
clog          1 + i 0         3 + i 0         3 + i 0         2 + i 1         2 + i 1
clogl         -               4 + i 1         -               3 + i 1         3 + i 1
clog10f       2 + i 1         4 + i 2         4 + i 2         2 + i 0         2 + i 0
clog10        2 + i 1         3 + i 2         3 + i 2         2 + i 1         2 + i 1
clog10l       -               4 + i 2         -               4 + i 2         4 + i 2
conjf         -               -               -               -               -
conj          -               -               -               -               -
conjl         -               -               -               -               -
copysignf     -               -               -               -               -
copysign      -               -               -               -               -
copysignl     -               -               -               -               -
cosf          1               1               1               -               1
cos           -               -               -               -               -
cosl          -               1               -               1               1
coshf         1               1               1               1               1
cosh          1               1               1               1               1
coshl         -               1               -               2               2
cpowf         4 + i 2         4 + i 2         4 + i 2         5 + i 2         5 + i 2
cpow          2 + i 0         2 + i 0         2 + i 0         2 + i 1         2 + i 0
cpowl         -               4 + i 1         -               3 + i 4         3 + i 4
cprojf        -               -               -               -               -
cproj         -               -               -               -               -
cprojl        -               -               -               -               -
crealf        -               -               -               -               -
creal         -               -               -               -               -
creall        -               -               -               -               -
csinf         1 + i 0         1 + i 0         1 + i 0         1 + i 1         1 + i 1
csin          1 + i 0         1 + i 0         1 + i 0         1 + i 1         1 + i 0
csinl         -               1 + i 1         -               1 + i 0         1 + i 0
csinhf        1 + i 1         1 + i 1         1 + i 1         1 + i 1         0 + i 1
csinh         0 + i 1         0 + i 1         0 + i 1         1 + i 1         0 + i 1
csinhl        -               1 + i 1         -               1 + i 1         1 + i 1
csqrtf        1 + i 1         2 + i 2         2 + i 2         0 + i 1         0 + i 1
csqrt         1 + i 1         2 + i 2         2 + i 2         1 + i 1         1 + i 1
csqrtl        -               2 + i 2         -               2 + i 2         2 + i 2
ctanf         1 + i 1         1 + i 1         1 + i 1         1 + i 1         1 + i 1
ctan          1 + i 2         1 + i 2         1 + i 2         1 + i 1         1 + i 1
ctanl         -               3 + i 3         -               2 + i 1         2 + i 1
ctanhf        1 + i 2         1 + i 2         1 + i 2         1 + i 1         1 + i 1
ctanh         2 + i 2         2 + i 2         2 + i 2         1 + i 1         1 + i 1
ctanhl        -               3 + i 3         -               1 + i 2         1 + i 2
erff          -               1               1               1               1
erf           1               1               1               1               1
erfl          -               1               -               1               1
erfcf         1               2               2               1               1
erfc          1               3               3               1               1
erfcl         -               2               -               3               3
expf          -               1               1               -               -
exp           -               -               -               1               1
expl          -               1               -               1               1
exp10f        -               -               -               -               -
exp10         1               2               2               1               1
exp10l        -               2               -               1               1
exp2f         -               1               1               -               -
exp2          -               1               1               1               1
exp2l         -               1               -               1               1
expm1f        1               1               1               -               -
expm1         1               1               1               1               1
expm1l        -               1               -               2               2
fabsf         -               -               -               -               -
fabs          -               -               -               -               -
fabsl         -               -               -               -               -
fdimf         -               -               -               -               -
fdim          -               -               -               -               -
fdiml         -               -               -               -               -
floorf        -               -               -               -               -
floor         -               -               -               -               -
floorl        -               -               -               -               -
fmaf          -               -               -               -               -
fma           -               -               -               -               -
fmal          -               -               -               -               -
fmaxf         -               -               -               -               -
fmax          -               -               -               -               -
fmaxl         -               -               -               -               -
fmaxmagf      -               -               -               -               -
fmaxmag       -               -               -               -               -
fmaxmagl      -               -               -               -               -
fminf         -               -               -               -               -
fmin          -               -               -               -               -
fminl         -               -               -               -               -
fminmagf      -               -               -               -               -
fminmag       -               -               -               -               -
fminmagl      -               -               -               -               -
fmodf         -               -               -               -               -
fmod          -               -               -               -               -
fmodl         -               -               -               -               -
frexpf        -               -               -               -               -
frexp         -               -               -               -               -
frexpl        -               -               -               -               -
fromfpf       -               -               -               -               -
fromfp        -               -               -               -               -
fromfpl       -               -               -               -               -
fromfpxf      -               -               -               -               -
fromfpx       -               -               -               -               -
fromfpxl      -               -               -               -               -
gammaf        1               4               4               3               2
gamma         1               4               4               3               3
gammal        -               5               -               4               4
hypotf        -               -               -               -               -
hypot         1               1               1               1               1
hypotl        -               1               -               1               1
ilogbf        -               -               -               -               -
ilogb         -               -               -               -               -
ilogbl        -               -               -               -               -
j0f           2               2               2               1               1
j0            2               2               2               1               1
j0l           -               2               -               2               2
j1f           2               2               2               1               1
j1            1               1               1               2               2
j1l           -               4               -               1               1
jnf           4               4               4               3               3
jn            4               4               4               2               2
jnl           -               7               -               4               4
lgammaf       1               4               4               3               2
lgamma        1               4               4               3               3
lgammal       -               5               -               4               4
llogbf        -               -               -               -               -
llogb         -               -               -               -               -
llogbl        -               -               -               -               -
lrintf        -               -               -               -               -
lrint         -               -               -               -               -
lrintl        -               -               -               -               -
llrintf       -               -               -               -               -
llrint        -               -               -               -               -
llrintl       -               -               -               -               -
logf          1               1               1               -               -
log           -               -               -               1               1
logl          -               1               -               1               1
log10f        2               2               2               -               -
log10         1               2               2               1               1
log10l        -               1               -               1               1
log1pf        1               1               1               -               -
log1p         -               1               1               1               1
log1pl        -               2               -               2               2
log2f         -               1               1               -               -
log2          -               2               2               1               1
log2l         -               2               -               1               1
logbf         -               -               -               -               -
logb          -               -               -               -               -
logbl         -               -               -               -               -
lroundf       -               -               -               -               -
lround        -               -               -               -               -
lroundl       -               -               -               -               -
llroundf      -               -               -               -               -
llround       -               -               -               -               -
llroundl      -               -               -               -               -
modff         -               -               -               -               -
modf          -               -               -               -               -
modfl         -               -               -               -               -
nearbyintf    -               -               -               -               -
nearbyint     -               -               -               -               -
nearbyintl    -               -               -               -               -
nextafterf    -               -               -               -               -
nextafter     -               -               -               -               -
nextafterl    -               -               -               -               -
nextdownf     -               -               -               -               -
nextdown      -               -               -               -               -
nextdownl     -               -               -               -               -
nexttowardf   -               -               -               -               -
nexttoward    -               -               -               -               -
nexttowardl   -               -               -               -               -
nextupf       -               -               -               -               -
nextup        -               -               -               -               -
nextupl       -               -               -               -               -
powf          1               3               3               -               -
pow           -               -               -               1               1
powl          -               2               -               1               1
remainderf    -               -               -               -               -
remainder     -               -               -               -               -
remainderl    -               -               -               -               -
remquof       -               -               -               -               -
remquo        -               -               -               -               -
remquol       -               -               -               -               -
rintf         -               -               -               -               -
rint          -               -               -               -               -
rintl         -               -               -               -               -
roundf        -               -               -               -               -
round         -               -               -               -               -
roundl        -               -               -               -               -
roundevenf    -               -               -               -               -
roundeven     -               -               -               -               -
roundevenl    -               -               -               -               -
scalbf        -               -               -               -               -
scalb         -               -               -               -               -
scalbl        -               -               -               -               -
scalbnf       -               -               -               -               -
scalbn        -               -               -               -               -
scalbnl       -               -               -               -               -
sinf          1               1               1               -               1
sin           -               -               -               -               -
sinl          -               1               -               1               1
sincosf       1               1               1               -               1
sincos        -               -               -               -               -
sincosl       -               1               -               1               1
sinhf         -               2               2               -               -
sinh          -               2               2               1               1
sinhl         -               2               -               2               2
sqrtf         -               -               -               -               -
sqrt          -               -               -               -               -
sqrtl         -               -               -               -               -
tanf          -               1               1               1               1
tan           -               -               -               -               -
tanl          -               1               -               2               2
tanhf         -               2               2               -               -
tanh          -               2               2               1               1
tanhl         -               2               -               3               3
tgammaf       3               5               5               3               3
tgamma        4               5               5               3               3
tgammal       -               4               -               5               5
truncf        -               -               -               -               -
trunc         -               -               -               -               -
truncl        -               -               -               -               -
ufromfpf      -               -               -               -               -
ufromfp       -               -               -               -               -
ufromfpl      -               -               -               -               -
ufromfpxf     -               -               -               -               -
ufromfpx      -               -               -               -               -
ufromfpxl     -               -               -               -               -
y0f           1               1               1               1               1
y0            2               2               2               1               1
y0l           -               3               -               1               1
y1f           2               2               2               2               2
y1            3               3               3               2               2
y1l           -               2               -               2               2
ynf           2               2               2               3               3
yn            3               3               3               2               2
ynl           -               5               -               4               4

==============================================================================
File: libc.info,  Node: |Pseudo_Random_Numbers|,  Next: |FP_Function_Optimizations|,  Prev: |Errors_in_Math_Functions|,  Up: |Mathematics|
==============================================================================

                                                         *Pseudo_Random_Numbers*

19.8 Pseudo-Random Numbers
--------------------------

This section describes the GNU facilities for generating a series of
pseudo-random numbers.  The numbers generated are not truly random;
typically, they form a sequence that repeats periodically, with a period
so large that you can ignore it for ordinary purposes.  The random
number generator works by remembering a 'seed' value which it uses to
compute the next random number and also to compute a new seed.

   Although the generated numbers look unpredictable within one run of a
program, the sequence of numbers is _exactly the same_ from one run to
the next.  This is because the initial seed is always the same.  This is
convenient when you are debugging a program, but it is unhelpful if you
want the program to behave unpredictably.  If you want a different
pseudo-random series each time your program runs, you must specify a
different seed each time.  For ordinary purposes, basing the seed on the
current time works well.  For random numbers in cryptography, *note
Unpredictable Bytes::.

   You can obtain repeatable sequences of numbers on a particular
machine type by specifying the same initial seed value for the random
number generator.  There is no standard meaning for a particular seed
value; the same seed, used in different C libraries or on different CPU
types, will give you different random numbers.

   The GNU C Library supports the standard ISO C random number functions
plus two other sets derived from BSD and SVID. The BSD and ISO C
functions provide identical, somewhat limited functionality.  If only a
small number of random bits are required, we recommend you use the ISO C
interface, 'rand' and  srand’.  The SVID functions provide a more
flexible interface, which allows better random number generator
algorithms, provides more random bits (up to 48) per call, and can
provide random floating-point numbers.  These functions are required by
the XPG standard and therefore will be present in all modern Unix
systems.

MENU

* |ISO_Random|::                  'rand' and friends.
* |BSD_Random|::                  'random' and friends.
* |SVID_Random|::                 'drand48' and friends.

==============================================================================
File: libc.info,  Node: |ISO_Random|,  Next: |BSD_Random|,  Up: |Pseudo_Random_Numbers|
==============================================================================

                                                                    *ISO_Random*

19.8.1 ISO C Random Number Functions
------------------------------------

This section describes the random number functions that are part of the
ISO C standard.

   To use these facilities, you should include the header file
'stdlib.h' in your program.

 -- Macro: int RAND_MAX
     The value of this macro is an integer constant representing the
     largest value the 'rand' function can return.  In the GNU C
     Library, it is '2147483647', which is the largest signed integer
     representable in 32 bits.  In other libraries, it may be as low as
     '32767'.

 -- Function: int rand (void)
     Preliminary: | MT-Safe | AS-Unsafe lock | AC-Unsafe lock | *Note
     POSIX Safety Concepts::.

     The 'rand' function returns the next pseudo-random number in the
     series.  The value ranges from '0' to  RAND_MAX’.

 -- Function: void srand (unsigned int SEED)
     Preliminary: | MT-Safe | AS-Unsafe lock | AC-Unsafe lock | *Note
     POSIX Safety Concepts::.

     This function establishes SEED as the seed for a new series of
     pseudo-random numbers.  If you call 'rand' before a seed has been
     established with 'srand', it uses the value  1’ as a default seed.

     To produce a different pseudo-random series each time your program
     is run, do 'srand (time (0))'.

   POSIX.1 extended the C standard functions to support reproducible
random numbers in multi-threaded programs.  However, the extension is
badly designed and unsuitable for serious work.

 -- Function: int rand_r (unsigned int *SEED)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns a random number in the range 0 to 'RAND_MAX'
     just as 'rand' does.  However, all its state is stored in the SEED
     argument.  This means the RNG's state can only have as many bits as
     the type 'unsigned int' has.  This is far too few to provide a good
     RNG.

     If your program requires a reentrant RNG, we recommend you use the
     reentrant GNU extensions to the SVID random number generator.  The
     POSIX.1 interface should only be used when the GNU extensions are
     not available.

==============================================================================
File: libc.info,  Node: |BSD_Random|,  Next: |SVID_Random|,  Prev: |ISO_Random|,  Up: |Pseudo_Random_Numbers|
==============================================================================

                                                                    *BSD_Random*

19.8.2 BSD Random Number Functions
----------------------------------

This section describes a set of random number generation functions that
are derived from BSD. There is no advantage to using these functions
with the GNU C Library; we support them for BSD compatibility only.

   The prototypes for these functions are in 'stdlib.h'.

 -- Function: long int random (void)
     Preliminary: | MT-Safe | AS-Unsafe lock | AC-Unsafe lock | *Note
     POSIX Safety Concepts::.

     This function returns the next pseudo-random number in the
     sequence.  The value returned ranges from '0' to  2147483647’.

     NB: Temporarily this function was defined to return a 'int32_t'
     value to indicate that the return value always contains 32 bits
     even if 'long int' is wider.  The standard demands it differently.
     Users must always be aware of the 32-bit limitation, though.

 -- Function: void srandom (unsigned int SEED)
     Preliminary: | MT-Safe | AS-Unsafe lock | AC-Unsafe lock | *Note
     POSIX Safety Concepts::.

     The 'srandom' function sets the state of the random number
     generator based on the integer SEED.  If you supply a SEED value of
     '1', this will cause  random’ to reproduce the default set of
     random numbers.

     To produce a different set of pseudo-random numbers each time your
     program runs, do 'srandom (time (0))'.

 -- Function: char * initstate (unsigned int SEED, char *STATE, size_t
          SIZE)
     Preliminary: | MT-Safe | AS-Unsafe lock | AC-Unsafe lock | *Note
     POSIX Safety Concepts::.

     The 'initstate' function is used to initialize the random number
     generator state.  The argument STATE is an array of SIZE bytes,
     used to hold the state information.  It is initialized based on
     SEED.  The size must be between 8 and 256 bytes, and should be a
     power of two.  The bigger the STATE array, the better.

     The return value is the previous value of the state information
     array.  You can use this value later as an argument to 'setstate'
     to restore that state.

 -- Function: char * setstate (char *STATE)
     Preliminary: | MT-Safe | AS-Unsafe lock | AC-Unsafe lock | *Note
     POSIX Safety Concepts::.

     The 'setstate' function restores the random number state
     information STATE.  The argument must have been the result of a
     previous call to INITSTATE or SETSTATE.

     The return value is the previous value of the state information
     array.  You can use this value later as an argument to 'setstate'
     to restore that state.

     If the function fails the return value is 'NULL'.

   The four functions described so far in this section all work on a
state which is shared by all threads.  The state is not directly
accessible to the user and can only be modified by these functions.
This makes it hard to deal with situations where each thread should have
its own pseudo-random number generator.

   The GNU C Library contains four additional functions which contain
the state as an explicit parameter and therefore make it possible to
handle thread-local PRNGs.  Besides this there is no difference.  In
fact, the four functions already discussed are implemented internally
using the following interfaces.

   The 'stdlib.h' header contains a definition of the following type:

 -- Data Type: struct random_data

     Objects of type 'struct random_data' contain the information
     necessary to represent the state of the PRNG. Although a complete
     definition of the type is present the type should be treated as
     opaque.

   The functions modifying the state follow exactly the already
described functions.

 -- Function: int random_r (struct random_data *restrict BUF, int32_t
          *restrict RESULT)
     Preliminary: | MT-Safe race:buf | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     The 'random_r' function behaves exactly like the  random’ function
     except that it uses and modifies the state in the object pointed to
     by the first parameter instead of the global state.

 -- Function: int srandom_r (unsigned int SEED, struct random_data *BUF)
     Preliminary: | MT-Safe race:buf | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     The 'srandom_r' function behaves exactly like the  srandom’
     function except that it uses and modifies the state in the object
     pointed to by the second parameter instead of the global state.

 -- Function: int initstate_r (unsigned int SEED, char *restrict
          STATEBUF, size_t STATELEN, struct random_data *restrict BUF)
     Preliminary: | MT-Safe race:buf | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     The 'initstate_r' function behaves exactly like the  initstate’
     function except that it uses and modifies the state in the object
     pointed to by the fourth parameter instead of the global state.

 -- Function: int setstate_r (char *restrict STATEBUF, struct
          random_data *restrict BUF)
     Preliminary: | MT-Safe race:buf | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     The 'setstate_r' function behaves exactly like the  setstate’
     function except that it uses and modifies the state in the object
     pointed to by the first parameter instead of the global state.

==============================================================================
File: libc.info,  Node: |SVID_Random|,  Prev: |BSD_Random|,  Up: |Pseudo_Random_Numbers|
==============================================================================

                                                                   *SVID_Random*

19.8.3 SVID Random Number Function
----------------------------------

The C library on SVID systems contains yet another kind of random number
generator functions.  They use a state of 48 bits of data.  The user can
choose among a collection of functions which return the random bits in
different forms.

   Generally there are two kinds of function.  The first uses a state of
the random number generator which is shared among several functions and
by all threads of the process.  The second requires the user to handle
the state.

   All functions have in common that they use the same congruential
formula with the same constants.  The formula is

     Y = (a * X + c) mod m

where X is the state of the generator at the beginning and Y the state
at the end.  'a' and  c’ are constants determining the way the generator
works.  By default they are

     a = 0x5DEECE66D = 25214903917
     c = 0xb = 11

but they can also be changed by the user.  'm' is of course 2^48 since
the state consists of a 48-bit array.

   The prototypes for these functions are in 'stdlib.h'.

 -- Function: double drand48 (void)
     Preliminary: | MT-Unsafe race:drand48 | AS-Unsafe | AC-Unsafe
     corrupt | *Note POSIX Safety Concepts::.

     This function returns a 'double' value in the range of  0.0’ to
     '1.0' (exclusive).  The random bits are determined by the global
     state of the random number generator in the C library.

     Since the 'double' type according to IEEE 754 has a 52-bit mantissa
     this means 4 bits are not initialized by the random number
     generator.  These are (of course) chosen to be the least
     significant bits and they are initialized to '0'.

 -- Function: double erand48 (unsigned short int XSUBI[3])
     Preliminary: | MT-Unsafe race:drand48 | AS-Unsafe | AC-Unsafe
     corrupt | *Note POSIX Safety Concepts::.

     This function returns a 'double' value in the range of  0.0’ to
     '1.0' (exclusive), similarly to  drand48’.  The argument is an
     array describing the state of the random number generator.

     This function can be called subsequently since it updates the array
     to guarantee random numbers.  The array should have been
     initialized before initial use to obtain reproducible results.

 -- Function: long int lrand48 (void)
     Preliminary: | MT-Unsafe race:drand48 | AS-Unsafe | AC-Unsafe
     corrupt | *Note POSIX Safety Concepts::.

     The 'lrand48' function returns an integer value in the range of  0’
     to '2^31' (exclusive).  Even if the size of the  long int’ type can
     take more than 32 bits, no higher numbers are returned.  The random
     bits are determined by the global state of the random number
     generator in the C library.

 -- Function: long int nrand48 (unsigned short int XSUBI[3])
     Preliminary: | MT-Unsafe race:drand48 | AS-Unsafe | AC-Unsafe
     corrupt | *Note POSIX Safety Concepts::.

     This function is similar to the 'lrand48' function in that it
     returns a number in the range of '0' to  2^31’ (exclusive) but the
     state of the random number generator used to produce the random
     bits is determined by the array provided as the parameter to the
     function.

     The numbers in the array are updated afterwards so that subsequent
     calls to this function yield different results (as is expected of a
     random number generator).  The array should have been initialized
     before the first call to obtain reproducible results.

 -- Function: long int mrand48 (void)
     Preliminary: | MT-Unsafe race:drand48 | AS-Unsafe | AC-Unsafe
     corrupt | *Note POSIX Safety Concepts::.

     The 'mrand48' function is similar to  lrand48’.  The only
     difference is that the numbers returned are in the range '-2^31' to
     '2^31' (exclusive).

 -- Function: long int jrand48 (unsigned short int XSUBI[3])
     Preliminary: | MT-Unsafe race:drand48 | AS-Unsafe | AC-Unsafe
     corrupt | *Note POSIX Safety Concepts::.

     The 'jrand48' function is similar to  nrand48’.  The only
     difference is that the numbers returned are in the range '-2^31' to
     '2^31' (exclusive).  For the  xsubi’ parameter the same
     requirements are necessary.

   The internal state of the random number generator can be initialized
in several ways.  The methods differ in the completeness of the
information provided.

 -- Function: void srand48 (long int SEEDVAL)
     Preliminary: | MT-Unsafe race:drand48 | AS-Unsafe | AC-Unsafe
     corrupt | *Note POSIX Safety Concepts::.

     The 'srand48' function sets the most significant 32 bits of the
     internal state of the random number generator to the least
     significant 32 bits of the SEEDVAL parameter.  The lower 16 bits
     are initialized to the value '0x330E'.  Even if the  long int’ type
     contains more than 32 bits only the lower 32 bits are used.

     Owing to this limitation, initialization of the state of this
     function is not very useful.  But it makes it easy to use a
     construct like 'srand48 (time (0))'.

     A side-effect of this function is that the values 'a' and  c’ from
     the internal state, which are used in the congruential formula, are
     reset to the default values given above.  This is of importance
     once the user has called the 'lcong48' function (see below).

 -- Function: unsigned short int * seed48 (unsigned short int
          SEED16V[3])
     Preliminary: | MT-Unsafe race:drand48 | AS-Unsafe | AC-Unsafe
     corrupt | *Note POSIX Safety Concepts::.

     The 'seed48' function initializes all 48 bits of the state of the
     internal random number generator from the contents of the parameter
     SEED16V.  Here the lower 16 bits of the first element of SEED16V
     initialize the least significant 16 bits of the internal state, the
     lower 16 bits of 'SEED16V[1]' initialize the mid-order 16 bits of
     the state and the 16 lower bits of 'SEED16V[2]' initialize the most
     significant 16 bits of the state.

     Unlike 'srand48' this function lets the user initialize all 48 bits
     of the state.

     The value returned by 'seed48' is a pointer to an array containing
     the values of the internal state before the change.  This might be
     useful to restart the random number generator at a certain state.
     Otherwise the value can simply be ignored.

     As for 'srand48', the values  a’ and ‘c’ from the congruential
     formula are reset to the default values.

   There is one more function to initialize the random number generator
which enables you to specify even more information by allowing you to
change the parameters in the congruential formula.

 -- Function: void lcong48 (unsigned short int PARAM[7])
     Preliminary: | MT-Unsafe race:drand48 | AS-Unsafe | AC-Unsafe
     corrupt | *Note POSIX Safety Concepts::.

     The 'lcong48' function allows the user to change the complete state
     of the random number generator.  Unlike 'srand48' and  seed48’,
     this function also changes the constants in the congruential
     formula.

     From the seven elements in the array PARAM the least significant 16
     bits of the entries 'PARAM[0]' to  PARAM[2]’ determine the initial
     state, the least significant 16 bits of 'PARAM[3]' to  PARAM[5]’
     determine the 48 bit constant 'a' and  PARAM[6]’ determines the
     16-bit value 'c'.

   All the above functions have in common that they use the global
parameters for the congruential formula.  In multi-threaded programs it
might sometimes be useful to have different parameters in different
threads.  For this reason all the above functions have a counterpart
which works on a description of the random number generator in the
user-supplied buffer instead of the global state.

   Please note that it is no problem if several threads use the global
state if all threads use the functions which take a pointer to an array
containing the state.  The random numbers are computed following the
same loop but if the state in the array is different all threads will
obtain an individual random number generator.

   The user-supplied buffer must be of type 'struct drand48_data'.  This
type should be regarded as opaque and not manipulated directly.

 -- Function: int drand48_r (struct drand48_data *BUFFER, double
          *RESULT)
     Preliminary: | MT-Safe race:buffer | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     This function is equivalent to the 'drand48' function with the
     difference that it does not modify the global random number
     generator parameters but instead the parameters in the buffer
     supplied through the pointer BUFFER.  The random number is returned
     in the variable pointed to by RESULT.

     The return value of the function indicates whether the call
     succeeded.  If the value is less than '0' an error occurred and
     ERRNO is set to indicate the problem.

     This function is a GNU extension and should not be used in portable
     programs.

 -- Function: int erand48_r (unsigned short int XSUBI[3], struct
          drand48_data *BUFFER, double *RESULT)
     Preliminary: | MT-Safe race:buffer | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     The 'erand48_r' function works like  erand48’, but in addition it
     takes an argument BUFFER which describes the random number
     generator.  The state of the random number generator is taken from
     the 'xsubi' array, the parameters for the congruential formula from
     the global random number generator data.  The random number is
     returned in the variable pointed to by RESULT.

     The return value is non-negative if the call succeeded.

     This function is a GNU extension and should not be used in portable
     programs.

 -- Function: int lrand48_r (struct drand48_data *BUFFER, long int
          *RESULT)
     Preliminary: | MT-Safe race:buffer | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     This function is similar to 'lrand48', but in addition it takes a
     pointer to a buffer describing the state of the random number
     generator just like 'drand48'.

     If the return value of the function is non-negative the variable
     pointed to by RESULT contains the result.  Otherwise an error
     occurred.

     This function is a GNU extension and should not be used in portable
     programs.

 -- Function: int nrand48_r (unsigned short int XSUBI[3], struct
          drand48_data *BUFFER, long int *RESULT)
     Preliminary: | MT-Safe race:buffer | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     The 'nrand48_r' function works like  nrand48’ in that it produces a
     random number in the range '0' to  2^31’.  But instead of using the
     global parameters for the congruential formula it uses the
     information from the buffer pointed to by BUFFER.  The state is
     described by the values in XSUBI.

     If the return value is non-negative the variable pointed to by
     RESULT contains the result.

     This function is a GNU extension and should not be used in portable
     programs.

 -- Function: int mrand48_r (struct drand48_data *BUFFER, long int
          *RESULT)
     Preliminary: | MT-Safe race:buffer | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     This function is similar to 'mrand48' but like the other reentrant
     functions it uses the random number generator described by the
     value in the buffer pointed to by BUFFER.

     If the return value is non-negative the variable pointed to by
     RESULT contains the result.

     This function is a GNU extension and should not be used in portable
     programs.

 -- Function: int jrand48_r (unsigned short int XSUBI[3], struct
          drand48_data *BUFFER, long int *RESULT)
     Preliminary: | MT-Safe race:buffer | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     The 'jrand48_r' function is similar to  jrand48’.  Like the other
     reentrant functions of this function family it uses the
     congruential formula parameters from the buffer pointed to by
     BUFFER.

     If the return value is non-negative the variable pointed to by
     RESULT contains the result.

     This function is a GNU extension and should not be used in portable
     programs.

   Before any of the above functions are used the buffer of type 'struct
drand48_data' should be initialized.  The easiest way to do this is to
fill the whole buffer with null bytes, e.g.  by

     memset (buffer, '\0', sizeof (struct drand48_data));

Using any of the reentrant functions of this family now will
automatically initialize the random number generator to the default
values for the state and the parameters of the congruential formula.

   The other possibility is to use any of the functions which explicitly
initialize the buffer.  Though it might be obvious how to initialize the
buffer from looking at the parameter to the function, it is highly
recommended to use these functions since the result might not always be
what you expect.

 -- Function: int srand48_r (long int SEEDVAL, struct drand48_data
          *BUFFER)
     Preliminary: | MT-Safe race:buffer | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     The description of the random number generator represented by the
     information in BUFFER is initialized similarly to what the function
     'srand48' does.  The state is initialized from the parameter
     SEEDVAL and the parameters for the congruential formula are
     initialized to their default values.

     If the return value is non-negative the function call succeeded.

     This function is a GNU extension and should not be used in portable
     programs.

 -- Function: int seed48_r (unsigned short int SEED16V[3], struct
          drand48_data *BUFFER)
     Preliminary: | MT-Safe race:buffer | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     This function is similar to 'srand48_r' but like  seed48’ it
     initializes all 48 bits of the state from the parameter SEED16V.

     If the return value is non-negative the function call succeeded.
     It does not return a pointer to the previous state of the random
     number generator like the 'seed48' function does.  If the user
     wants to preserve the state for a later re-run s/he can copy the
     whole buffer pointed to by BUFFER.

     This function is a GNU extension and should not be used in portable
     programs.

 -- Function: int lcong48_r (unsigned short int PARAM[7], struct
          drand48_data *BUFFER)
     Preliminary: | MT-Safe race:buffer | AS-Safe | AC-Unsafe corrupt |
     *Note POSIX Safety Concepts::.

     This function initializes all aspects of the random number
     generator described in BUFFER with the data in PARAM.  Here it is
     especially true that the function does more than just copying the
     contents of PARAM and BUFFER.  More work is required and therefore
     it is important to use this function rather than initializing the
     random number generator directly.

     If the return value is non-negative the function call succeeded.

     This function is a GNU extension and should not be used in portable
     programs.

==============================================================================
File: libc.info,  Node: |FP_Function_Optimizations|,  Prev: Pseudo-Random Numbers,  Up: |Mathematics|
==============================================================================

                                                     *FP_Function_Optimizations*

19.9 Is Fast Code or Small Code preferred?
------------------------------------------

If an application uses many floating point functions it is often the
case that the cost of the function calls themselves is not negligible.
Modern processors can often execute the operations themselves very fast,
but the function call disrupts the instruction pipeline.

   For this reason the GNU C Library provides optimizations for many of
the frequently-used math functions.  When GNU CC is used and the user
activates the optimizer, several new inline functions and macros are
defined.  These new functions and macros have the same names as the
library functions and so are used instead of the latter.  In the case of
inline functions the compiler will decide whether it is reasonable to
use them, and this decision is usually correct.

   This means that no calls to the library functions may be necessary,
and can increase the speed of generated code significantly.  The
drawback is that code size will increase, and the increase is not always
negligible.

   There are two kinds of inline functions: those that give the same
result as the library functions and others that might not set 'errno'
and might have a reduced precision and/or argument range in comparison
with the library functions.  The latter inline functions are only
available if the flag '-ffast-math' is given to GNU CC.

   In cases where the inline functions and macros are not wanted the
symbol '__NO_MATH_INLINES' should be defined before any system header is
included.  This will ensure that only library functions are used.  Of
course, it can be determined for each file in the project whether giving
this option is preferable or not.

   Not all hardware implements the entire IEEE 754 standard, and even if
it does there may be a substantial performance penalty for using some of
its features.  For example, enabling traps on some processors forces the
FPU to run un-pipelined, which can more than double calculation time.

==============================================================================
File: libc.info,  Node: |Arithmetic|,  Next: |Date_and_Time|,  Prev: |Mathematics|,  Up: |Top|
==============================================================================

                                                                    *Arithmetic*

20 Arithmetic Functions
=======================

This chapter contains information about functions for doing basic
arithmetic operations, such as splitting a float into its integer and
fractional parts or retrieving the imaginary part of a complex value.
These functions are declared in the header files 'math.h' and
'complex.h'.

MENU

* |Integers|::                    Basic integer types and concepts
* |Integer_Division|::            Integer division with guaranteed rounding.
* |Floating_Point_Numbers|::      Basic concepts.  IEEE 754.
* |Floating_Point_Classes|::      The five kinds of floating-point number.
* |Floating_Point_Errors|::       When something goes wrong in a calculation.
* |Rounding|::                    Controlling how results are rounded.
* |Control_Functions|::           Saving and restoring the FPU's state.
* |Arithmetic_Functions|::        Fundamental operations provided by the library.
* |Complex_Numbers|::             The types.  Writing complex constants.
* |Operations_on_Complex|::       Projection, conjugation, decomposition.
* |Parsing_of_Numbers|::          Converting strings to numbers.
* |Printing_of_Floats|::          Converting floating-point numbers to strings.
* |System_V_Number_Conversion|::  An archaic way to convert numbers to strings.

==============================================================================
File: libc.info,  Node: |Integers|,  Next: |Integer_Division|,  Up: |Arithmetic|
==============================================================================

                                                                      *Integers*

20.1 Integers
-------------

The C language defines several integer data types: integer, short
integer, long integer, and character, all in both signed and unsigned
varieties.  The GNU C compiler extends the language to contain long long
integers as well.

   The C integer types were intended to allow code to be portable among
machines with different inherent data sizes (word sizes), so each type
may have different ranges on different machines.  The problem with this
is that a program often needs to be written for a particular range of
integers, and sometimes must be written for a particular size of
storage, regardless of what machine the program runs on.

   To address this problem, the GNU C Library contains C type
definitions you can use to declare integers that meet your exact needs.
Because the GNU C Library header files are customized to a specific
machine, your program source code doesn't have to be.

   These 'typedef's are in  stdint.h’.

   If you require that an integer be represented in exactly N bits, use
one of the following types, with the obvious mapping to bit size and
signedness:

   - int8_t
   - int16_t
   - int32_t
   - int64_t
   - uint8_t
   - uint16_t
   - uint32_t
   - uint64_t

   If your C compiler and target machine do not allow integers of a
certain size, the corresponding above type does not exist.

   If you don't need a specific storage size, but want the smallest data
structure with _at least_ N bits, use one of these:

   - int_least8_t
   - int_least16_t
   - int_least32_t
   - int_least64_t
   - uint_least8_t
   - uint_least16_t
   - uint_least32_t
   - uint_least64_t

   If you don't need a specific storage size, but want the data
structure that allows the fastest access while having at least N bits
(and among data structures with the same access speed, the smallest
one), use one of these:

   - int_fast8_t
   - int_fast16_t
   - int_fast32_t
   - int_fast64_t
   - uint_fast8_t
   - uint_fast16_t
   - uint_fast32_t
   - uint_fast64_t

   If you want an integer with the widest range possible on the platform
on which it is being used, use one of the following.  If you use these,
you should write code that takes into account the variable size and
range of the integer.

   - intmax_t
   - uintmax_t

   The GNU C Library also provides macros that tell you the maximum and
minimum possible values for each integer data type.  The macro names
follow these examples: 'INT32_MAX',  UINT8_MAX’, ‘INT_FAST32_MIN’,
'INT_LEAST64_MIN',  UINTMAX_MAX’, ‘INTMAX_MAX’, ‘INTMAX_MIN’.  Note that
there are no macros for unsigned integer minima.  These are always zero.
Similiarly, there are macros such as 'INTMAX_WIDTH' for the width of
these types.  Those macros for integer type widths come from TS
18661-1:2014.

   There are similar macros for use with C's built in integer types
which should come with your C compiler.  These are described in *note
Data Type Measurements::.

   Don't forget you can use the C 'sizeof  function with any of these
data types to get the number of bytes of storage each uses.

==============================================================================
File: libc.info,  Node: |Integer_Division|,  Next: |Floating_Point_Numbers|,  Prev: |Integers|,  Up: |Arithmetic|
==============================================================================

                                                              *Integer_Division*

20.2 Integer Division
---------------------

This section describes functions for performing integer division.  These
functions are redundant when GNU CC is used, because in GNU C the '/'
operator always rounds towards zero.  But in other C implementations,
'/' may round differently with negative arguments.   div’ and ‘ldiv’ are
useful because they specify how to round the quotient: towards zero.
The remainder has the same sign as the numerator.

   These functions are specified to return a result R such that the
value 'R.quot*DENOMINATOR + R.rem' equals NUMERATOR.

   To use these facilities, you should include the header file
'stdlib.h' in your program.

 -- Data Type: div_t
     This is a structure type used to hold the result returned by the
     'div' function.  It has the following members:

     'int quot'
          The quotient from the division.

     'int rem'
          The remainder from the division.

 -- Function: div_t div (int NUMERATOR, int DENOMINATOR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The function 'div' computes the quotient and remainder from the
     division of NUMERATOR by DENOMINATOR, returning the result in a
     structure of type 'div_t'.

     If the result cannot be represented (as in a division by zero), the
     behavior is undefined.

     Here is an example, albeit not a very useful one.

          div_t result;
          result = div (20, -6);

     Now 'result.quot' is  -3’ and ‘result.rem’ is ‘2’.

 -- Data Type: ldiv_t
     This is a structure type used to hold the result returned by the
     'ldiv' function.  It has the following members:

     'long int quot'
          The quotient from the division.

     'long int rem'
          The remainder from the division.

     (This is identical to 'div_t' except that the components are of
     type 'long int' rather than  int’.)

 -- Function: ldiv_t ldiv (long int NUMERATOR, long int DENOMINATOR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'ldiv' function is similar to  div’, except that the arguments
     are of type 'long int' and the result is returned as a structure of
     type 'ldiv_t'.

 -- Data Type: lldiv_t
     This is a structure type used to hold the result returned by the
     'lldiv' function.  It has the following members:

     'long long int quot'
          The quotient from the division.

     'long long int rem'
          The remainder from the division.

     (This is identical to 'div_t' except that the components are of
     type 'long long int' rather than  int’.)

 -- Function: lldiv_t lldiv (long long int NUMERATOR, long long int
          DENOMINATOR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'lldiv' function is like the  div’ function, but the arguments
     are of type 'long long int' and the result is returned as a
     structure of type 'lldiv_t'.

     The 'lldiv' function was added in ISO C99.

 -- Data Type: imaxdiv_t
     This is a structure type used to hold the result returned by the
     'imaxdiv' function.  It has the following members:

     'intmax_t quot'
          The quotient from the division.

     'intmax_t rem'
          The remainder from the division.

     (This is identical to 'div_t' except that the components are of
     type 'intmax_t' rather than  int’.)

     See *note Integers:: for a description of the 'intmax_t' type.

 -- Function: imaxdiv_t imaxdiv (intmax_t NUMERATOR, intmax_t
          DENOMINATOR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'imaxdiv' function is like the  div’ function, but the
     arguments are of type 'intmax_t' and the result is returned as a
     structure of type 'imaxdiv_t'.

     See *note Integers:: for a description of the 'intmax_t' type.

     The 'imaxdiv' function was added in ISO C99.

==============================================================================
File: libc.info,  Node: |Floating_Point_Numbers|,  Next: |Floating_Point_Classes|,  Prev: |Integer_Division|,  Up: |Arithmetic|
==============================================================================

                                                        *Floating_Point_Numbers*

20.3 Floating Point Numbers
---------------------------

Most computer hardware has support for two different kinds of numbers:
integers (...-3, -2, -1, 0, 1, 2, 3...) and floating-point numbers.
Floating-point numbers have three parts: the 'mantissa', the  exponent”,
and the 'sign bit'.  The real number represented by a floating-point
value is given by (s ? -1 : 1) * 2^e * M where s is the sign bit, e the
exponent, and M the mantissa.  *Note Floating Point Concepts::, for
details.  (It is possible to have a different 'base' for the exponent,
but all modern hardware uses 2.)

   Floating-point numbers can represent a finite subset of the real
numbers.  While this subset is large enough for most purposes, it is
important to remember that the only reals that can be represented
exactly are rational numbers that have a terminating binary expansion
shorter than the width of the mantissa.  Even simple fractions such as
1/5 can only be approximated by floating point.

   Mathematical operations and functions frequently need to produce
values that are not representable.  Often these values can be
approximated closely enough for practical purposes, but sometimes they
can't.  Historically there was no way to tell when the results of a
calculation were inaccurate.  Modern computers implement the IEEE 754
standard for numerical computations, which defines a framework for
indicating to the program when the results of calculation are not
trustworthy.  This framework consists of a set of 'exceptions' that
indicate why a result could not be represented, and the special values
'infinity' and  not a number” (NaN).

==============================================================================
File: libc.info,  Node: |Floating_Point_Classes|,  Next: |Floating_Point_Errors|,  Prev: |Floating_Point_Numbers|,  Up: |Arithmetic|
==============================================================================

                                                        *Floating_Point_Classes*

20.4 Floating-Point Number Classification Functions
---------------------------------------------------

ISO C99 defines macros that let you determine what sort of
floating-point number a variable holds.

 -- Macro: int fpclassify (_float-type_ X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This is a generic macro which works on all floating-point types and
     which returns a value of type 'int'.  The possible values are:

     'FP_NAN'
          The floating-point number X is 'Not a Number' (*note Infinity
          and NaN::)
     'FP_INFINITE'
          The value of X is either plus or minus infinity (*note
          Infinity and NaN::)
     'FP_ZERO'
          The value of X is zero.  In floating-point formats like
          IEEE 754, where zero can be signed, this value is also
          returned if X is negative zero.
     'FP_SUBNORMAL'
          Numbers whose absolute value is too small to be represented in
          the normal format are represented in an alternate,
          'denormalized' format (*note Floating Point Concepts::).  This
          format is less precise but can represent values closer to
          zero.  'fpclassify' returns this value for values of X in this
          alternate format.
     'FP_NORMAL'
          This value is returned for all other values of X.  It
          indicates that there is nothing special about the number.

   'fpclassify' is most useful if more than one property of a number
must be tested.  There are more specific macros which only test one
property at a time.  Generally these macros execute faster than
'fpclassify', since there is special hardware support for them.  You
should therefore use the specific macros whenever possible.

 -- Macro: int iscanonical (_float-type_ X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     In some floating-point formats, some values have canonical
     (preferred) and noncanonical encodings (for IEEE interchange binary
     formats, all encodings are canonical).  This macro returns a
     nonzero value if X has a canonical encoding.  It is from TS
     18661-1:2014.

     Note that some formats have multiple encodings of a value which are
     all equally canonical; 'iscanonical' returns a nonzero value for
     all such encodings.  Also, formats may have encodings that do not
     correspond to any valid value of the type.  In ISO C terms these
     are 'trap representations'; in the GNU C Library, 'iscanonical'
     returns zero for such encodings.

 -- Macro: int isfinite (_float-type_ X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro returns a nonzero value if X is finite: not plus or
     minus infinity, and not NaN. It is equivalent to

          (fpclassify (x) != FP_NAN && fpclassify (x) != FP_INFINITE)

     'isfinite' is implemented as a macro which accepts any
     floating-point type.

 -- Macro: int isnormal (_float-type_ X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro returns a nonzero value if X is finite and normalized.
     It is equivalent to

          (fpclassify (x) == FP_NORMAL)

 -- Macro: int isnan (_float-type_ X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro returns a nonzero value if X is NaN. It is equivalent to

          (fpclassify (x) == FP_NAN)

 -- Macro: int issignaling (_float-type_ X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro returns a nonzero value if X is a signaling NaN (sNaN).
     It is from TS 18661-1:2014.

 -- Macro: int issubnormal (_float-type_ X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro returns a nonzero value if X is subnormal.  It is from
     TS 18661-1:2014.

 -- Macro: int iszero (_float-type_ X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro returns a nonzero value if X is zero.  It is from TS
     18661-1:2014.

   Another set of floating-point classification functions was provided
by BSD. The GNU C Library also supports these functions; however, we
recommend that you use the ISO C99 macros in new code.  Those are
standard and will be available more widely.  Also, since they are
macros, you do not have to worry about the type of their argument.

 -- Function: int isinf (double X)
 -- Function: int isinff (float X)
 -- Function: int isinfl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns '-1' if X represents negative infinity,  1’
     if X represents positive infinity, and '0' otherwise.

 -- Function: int isnan (double X)
 -- Function: int isnanf (float X)
 -- Function: int isnanl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns a nonzero value if X is a 'not a number'
     value, and zero otherwise.

     NB: The 'isnan' macro defined by ISO C99 overrides the BSD
     function.  This is normally not a problem, because the two routines
     behave identically.  However, if you really need to get the BSD
     function for some reason, you can write

          (isnan) (x)

 -- Function: int finite (double X)
 -- Function: int finitef (float X)
 -- Function: int finitel (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns a nonzero value if X is finite or a 'not a
     number' value, and zero otherwise.

   *Portability Note:* The functions listed in this section are BSD
extensions.

==============================================================================
File: libc.info,  Node: |Floating_Point_Errors|,  Next: |Rounding|,  Prev: |Floating_Point_Classes|,  Up: |Arithmetic|
==============================================================================

                                                         *Floating_Point_Errors*

20.5 Errors in Floating-Point Calculations
------------------------------------------

MENU

* |FP_Exceptions|::               IEEE 754 math exceptions and how to detect them.
* |Infinity_and_NaN|::            Special values returned by calculations.
* |Status_bit_operations|::       Checking for exceptions after the fact.
* |Math_Error_Reporting|::        How the math functions report errors.

==============================================================================
File: libc.info,  Node: |FP_Exceptions|,  Next: |Infinity_and_NaN|,  Up: |Floating_Point_Errors|
==============================================================================

                                                                 *FP_Exceptions*

20.5.1 FP Exceptions
--------------------

The IEEE 754 standard defines five 'exceptions' that can occur during a
calculation.  Each corresponds to a particular sort of error, such as
overflow.

   When exceptions occur (when exceptions are 'raised', in the language
of the standard), one of two things can happen.  By default the
exception is simply noted in the floating-point 'status word', and the
program continues as if nothing had happened.  The operation produces a
default value, which depends on the exception (see the table below).
Your program can check the status word to find out which exceptions
happened.

   Alternatively, you can enable 'traps' for exceptions.  In that case,
when an exception is raised, your program will receive the 'SIGFPE'
signal.  The default action for this signal is to terminate the program.
*Note Signal Handling::, for how you can change the effect of the
signal.

   In the System V math library, the user-defined function 'matherr' is
called when certain exceptions occur inside math library functions.
However, the Unix98 standard deprecates this interface.  We support it
for historical compatibility, but recommend that you do not use it in
new programs.  When this interface is used, exceptions may not be
raised.

The exceptions defined in IEEE 754 are:

'Invalid Operation'
     This exception is raised if the given operands are invalid for the
     operation to be performed.  Examples are (see IEEE 754, section 7):
       1. Addition or subtraction: oo - oo.  (But oo + oo = oo).
       2. Multiplication: 0 * oo.
       3. Division: 0/0 or oo/oo.
       4. Remainder: x REM y, where y is zero or x is infinite.
       5. Square root if the operand is less than zero.  More generally,
          any mathematical function evaluated outside its domain
          produces this exception.
       6. Conversion of a floating-point number to an integer or decimal
          string, when the number cannot be represented in the target
          format (due to overflow, infinity, or NaN).
       7. Conversion of an unrecognizable input string.
       8. Comparison via predicates involving < or >, when one or other
          of the operands is NaN. You can prevent this exception by
          using the unordered comparison functions instead; see *note FP
          Comparison Functions::.

     If the exception does not trap, the result of the operation is NaN.

'Division by Zero'
     This exception is raised when a finite nonzero number is divided by
     zero.  If no trap occurs the result is either +oo or -oo, depending
     on the signs of the operands.

'Overflow'
     This exception is raised whenever the result cannot be represented
     as a finite value in the precision format of the destination.  If
     no trap occurs the result depends on the sign of the intermediate
     result and the current rounding mode (IEEE 754, section 7.3):
       1. Round to nearest carries all overflows to oo with the sign of
          the intermediate result.
       2. Round toward 0 carries all overflows to the largest
          representable finite number with the sign of the intermediate
          result.
       3. Round toward -oo carries positive overflows to the largest
          representable finite number and negative overflows to -oo.

       4. Round toward oo carries negative overflows to the most
          negative representable finite number and positive overflows to
          oo.

     Whenever the overflow exception is raised, the inexact exception is
     also raised.

'Underflow'
     The underflow exception is raised when an intermediate result is
     too small to be calculated accurately, or if the operation's result
     rounded to the destination precision is too small to be normalized.

     When no trap is installed for the underflow exception, underflow is
     signaled (via the underflow flag) only when both tininess and loss
     of accuracy have been detected.  If no trap handler is installed
     the operation continues with an imprecise small value, or zero if
     the destination precision cannot hold the small exact result.

'Inexact'
     This exception is signalled if a rounded result is not exact (such
     as when calculating the square root of two) or a result overflows
     without an overflow trap.

==============================================================================
File: libc.info,  Node: |Infinity_and_NaN|,  Next: |Status_bit_operations|,  Prev: |FP_Exceptions|,  Up: |Floating_Point_Errors|
==============================================================================

                                                              *Infinity_and_NaN*

20.5.2 Infinity and NaN
-----------------------

IEEE 754 floating point numbers can represent positive or negative
infinity, and 'NaN' (not a number).  These three values arise from
calculations whose result is undefined or cannot be represented
accurately.  You can also deliberately set a floating-point variable to
any of them, which is sometimes useful.  Some examples of calculations
that produce infinity or NaN:

     1/0 = oo
     log (0) = -oo
     sqrt (-1) = NaN

   When a calculation produces any of these values, an exception also
occurs; see *note FP Exceptions::.

   The basic operations and math functions all accept infinity and NaN
and produce sensible output.  Infinities propagate through calculations
as one would expect: for example, 2 + oo = oo, 4/oo = 0, atan (oo) =
pi/2.  NaN, on the other hand, infects any calculation that involves it.
Unless the calculation would produce the same result no matter what real
value replaced NaN, the result is NaN.

   In comparison operations, positive infinity is larger than all values
except itself and NaN, and negative infinity is smaller than all values
except itself and NaN. NaN is 'unordered': it is not equal to, greater
than, or less than anything, _including itself_.  'x == x' is false if
the value of 'x' is NaN. You can use this to test whether a value is NaN
or not, but the recommended way to test for NaN is with the 'isnan'
function (*note Floating Point Classes::).  In addition, '<',  >’, ‘<=’,
and '>=' will raise an exception when applied to NaNs.

   'math.h' defines macros that allow you to explicitly set a variable
to infinity or NaN.

 -- Macro: float INFINITY
     An expression representing positive infinity.  It is equal to the
     value produced by mathematical operations like '1.0 / 0.0'.
     '-INFINITY' represents negative infinity.

     You can test whether a floating-point value is infinite by
     comparing it to this macro.  However, this is not recommended; you
     should use the 'isfinite' macro instead.  *Note Floating Point
     Classes::.

     This macro was introduced in the ISO C99 standard.

 -- Macro: float NAN
     An expression representing a value which is 'not a number'.  This
     macro is a GNU extension, available only on machines that support
     the 'not a number' value that is to say, on all machines that
     support IEEE floating point.

     You can use '#ifdef NAN' to test whether the machine supports NaN.
     (Of course, you must arrange for GNU extensions to be visible, such
     as by defining '_GNU_SOURCE', and then you must include  math.h’.)

 -- Macro: float SNANF
 -- Macro: double SNAN
 -- Macro: long double SNANL
     These macros, defined by TS 18661-1:2014, are constant expressions
     for signaling NaNs.

 -- Macro: int FE_SNANS_ALWAYS_SIGNAL
     This macro, defined by TS 18661-1:2014, is defined to '1' in
     'fenv.h' to indicate that functions and operations with signaling
     NaN inputs and floating-point results always raise the invalid
     exception and return a quiet NaN, even in cases (such as 'fmax',
     'hypot' and  pow’) where a quiet NaN input can produce a non-NaN
     result.  Because some compiler optimizations may not handle
     signaling NaNs correctly, this macro is only defined if compiler
     support for signaling NaNs is enabled.  That support can be enabled
     with the GCC option '-fsignaling-nans'.

   IEEE 754 also allows for another unusual value: negative zero.  This
value is produced when you divide a positive number by negative
infinity, or when a negative result is smaller than the limits of
representation.

==============================================================================
File: libc.info,  Node: |Status_bit_operations|,  Next: |Math_Error_Reporting|,  Prev: |Infinity_and_NaN|,  Up: |Floating_Point_Errors|
==============================================================================

                                                         *Status_bit_operations*

20.5.3 Examining the FPU status word
------------------------------------

ISO C99 defines functions to query and manipulate the floating-point
status word.  You can use these functions to check for untrapped
exceptions when it's convenient, rather than worrying about them in the
middle of a calculation.

   These constants represent the various IEEE 754 exceptions.  Not all
FPUs report all the different exceptions.  Each constant is defined if
and only if the FPU you are compiling for supports that exception, so
you can test for FPU support with '#ifdef'.  They are defined in
'fenv.h'.

'FE_INEXACT'
     The inexact exception.
'FE_DIVBYZERO'
     The divide by zero exception.
'FE_UNDERFLOW'
     The underflow exception.
'FE_OVERFLOW'
     The overflow exception.
'FE_INVALID'
     The invalid exception.

   The macro 'FE_ALL_EXCEPT' is the bitwise OR of all exception macros
which are supported by the FP implementation.

   These functions allow you to clear exception flags, test for
exceptions, and save and restore the set of exceptions flagged.

 -- Function: int feclearexcept (int EXCEPTS)
     Preliminary: | MT-Safe | AS-Safe !posix | AC-Safe !posix | *Note
     POSIX Safety Concepts::.

     This function clears all of the supported exception flags indicated
     by EXCEPTS.

     The function returns zero in case the operation was successful, a
     non-zero value otherwise.

 -- Function: int feraiseexcept (int EXCEPTS)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function raises the supported exceptions indicated by EXCEPTS.
     If more than one exception bit in EXCEPTS is set the order in which
     the exceptions are raised is undefined except that overflow
     ('FE_OVERFLOW') or underflow ( FE_UNDERFLOW’) are raised before
     inexact ('FE_INEXACT').  Whether for overflow or underflow the
     inexact exception is also raised is also implementation dependent.

     The function returns zero in case the operation was successful, a
     non-zero value otherwise.

 -- Function: int fesetexcept (int EXCEPTS)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function sets the supported exception flags indicated by
     EXCEPTS, like 'feraiseexcept', but without causing enabled traps to
     be taken.  'fesetexcept' is from TS 18661-1:2014.

     The function returns zero in case the operation was successful, a
     non-zero value otherwise.

 -- Function: int fetestexcept (int EXCEPTS)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Test whether the exception flags indicated by the parameter EXCEPT
     are currently set.  If any of them are, a nonzero value is returned
     which specifies which exceptions are set.  Otherwise the result is
     zero.

   To understand these functions, imagine that the status word is an
integer variable named STATUS.  'feclearexcept' is then equivalent to
'status &= ~excepts' and  fetestexcept’ is equivalent to ‘(status &
excepts)'.  The actual implementation may be very different, of course.

   Exception flags are only cleared when the program explicitly requests
it, by calling 'feclearexcept'.  If you want to check for exceptions
from a set of calculations, you should clear all the flags first.  Here
is a simple example of the way to use 'fetestexcept':

     {
       double f;
       int raised;
       feclearexcept (FE_ALL_EXCEPT);
       f = compute ();
       raised = fetestexcept (FE_OVERFLOW | FE_INVALID);
       if (raised & FE_OVERFLOW) { /* ... */ }
       if (raised & FE_INVALID) { /* ... */ }
       /* ... */
     }

   You cannot explicitly set bits in the status word.  You can, however,
save the entire status word and restore it later.  This is done with the
following functions:

 -- Function: int fegetexceptflag (fexcept_t *FLAGP, int EXCEPTS)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function stores in the variable pointed to by FLAGP an
     implementation-defined value representing the current setting of
     the exception flags indicated by EXCEPTS.

     The function returns zero in case the operation was successful, a
     non-zero value otherwise.

 -- Function: int fesetexceptflag (const fexcept_t *FLAGP, int EXCEPTS)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function restores the flags for the exceptions indicated by
     EXCEPTS to the values stored in the variable pointed to by FLAGP.

     The function returns zero in case the operation was successful, a
     non-zero value otherwise.

   Note that the value stored in 'fexcept_t' bears no resemblance to the
bit mask returned by 'fetestexcept'.  The type may not even be an
integer.  Do not attempt to modify an 'fexcept_t' variable.

 -- Function: int fetestexceptflag (const fexcept_t *FLAGP, int EXCEPTS)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Test whether the exception flags indicated by the parameter EXCEPTS
     are set in the variable pointed to by FLAGP.  If any of them are, a
     nonzero value is returned which specifies which exceptions are set.
     Otherwise the result is zero.  'fetestexceptflag' is from TS
     18661-1:2014.

==============================================================================
File: libc.info,  Node: |Math_Error_Reporting|,  Prev: |Status_bit_operations|,  Up: |Floating_Point_Errors|
==============================================================================

                                                          *Math_Error_Reporting*

20.5.4 Error Reporting by Mathematical Functions
------------------------------------------------

Many of the math functions are defined only over a subset of the real or
complex numbers.  Even if they are mathematically defined, their result
may be larger or smaller than the range representable by their return
type without loss of accuracy.  These are known as 'domain errors',
'overflows', and  underflows”, respectively.  Math functions do several
things when one of these errors occurs.  In this manual we will refer to
the complete response as 'signalling' a domain error, overflow, or
underflow.

   When a math function suffers a domain error, it raises the invalid
exception and returns NaN. It also sets ERRNO to 'EDOM'; this is for
compatibility with old systems that do not support IEEE 754 exception
handling.  Likewise, when overflow occurs, math functions raise the
overflow exception and, in the default rounding mode, return oo or -oo
as appropriate (in other rounding modes, the largest finite value of the
appropriate sign is returned when appropriate for that rounding mode).
They also set ERRNO to 'ERANGE' if returning oo or -oo; ERRNO may or may
not be set to 'ERANGE' when a finite value is returned on overflow.
When underflow occurs, the underflow exception is raised, and zero
(appropriately signed) or a subnormal value, as appropriate for the
mathematical result of the function and the rounding mode, is returned.
ERRNO may be set to 'ERANGE', but this is not guaranteed; it is intended
that the GNU C Library should set it when the underflow is to an
appropriately signed zero, but not necessarily for other underflows.

   When a math function has an argument that is a signaling NaN, the GNU
C Library does not consider this a domain error, so 'errno' is
unchanged, but the invalid exception is still raised (except for a few
functions that are specified to handle signaling NaNs differently).

   Some of the math functions are defined mathematically to result in a
complex value over parts of their domains.  The most familiar example of
this is taking the square root of a negative number.  The complex math
functions, such as 'csqrt', will return the appropriate complex value in
this case.  The real-valued functions, such as 'sqrt', will signal a
domain error.

   Some older hardware does not support infinities.  On that hardware,
overflows instead return a particular very large number (usually the
largest representable number).  'math.h' defines macros you can use to
test for overflow on both old and new hardware.

 -- Macro: double HUGE_VAL
 -- Macro: float HUGE_VALF
 -- Macro: long double HUGE_VALL
     An expression representing a particular very large number.  On
     machines that use IEEE 754 floating point format, 'HUGE_VAL' is
     infinity.  On other machines, it's typically the largest positive
     number that can be represented.

     Mathematical functions return the appropriately typed version of
     'HUGE_VAL' or  −HUGE_VAL’ when the result is too large to be
     represented.

==============================================================================
File: libc.info,  Node: |Rounding|,  Next: |Control_Functions|,  Prev: |Floating_Point_Errors|,  Up: |Arithmetic|
==============================================================================

                                                                      *Rounding*

20.6 Rounding Modes
-------------------

Floating-point calculations are carried out internally with extra
precision, and then rounded to fit into the destination type.  This
ensures that results are as precise as the input data.  IEEE 754 defines
four possible rounding modes:

Round to nearest.
     This is the default mode.  It should be used unless there is a
     specific need for one of the others.  In this mode results are
     rounded to the nearest representable value.  If the result is
     midway between two representable values, the even representable is
     chosen.  'Even' here means the lowest-order bit is zero.  This
     rounding mode prevents statistical bias and guarantees numeric
     stability: round-off errors in a lengthy calculation will remain
     smaller than half of 'FLT_EPSILON'.

Round toward plus Infinity.
     All results are rounded to the smallest representable value which
     is greater than the result.

Round toward minus Infinity.
     All results are rounded to the largest representable value which is
     less than the result.

Round toward zero.
     All results are rounded to the largest representable value whose
     magnitude is less than that of the result.  In other words, if the
     result is negative it is rounded up; if it is positive, it is
     rounded down.

'fenv.h' defines constants which you can use to refer to the various
rounding modes.  Each one will be defined if and only if the FPU
supports the corresponding rounding mode.

'FE_TONEAREST'
     Round to nearest.

'FE_UPWARD'
     Round toward +oo.

'FE_DOWNWARD'
     Round toward -oo.

'FE_TOWARDZERO'
     Round toward zero.

   Underflow is an unusual case.  Normally, IEEE 754 floating point
numbers are always normalized (*note Floating Point Concepts::).
Numbers smaller than 2^r (where r is the minimum exponent,
'FLT_MIN_RADIX-1' for FLOAT) cannot be represented as normalized
numbers.  Rounding all such numbers to zero or 2^r would cause some
algorithms to fail at 0.  Therefore, they are left in denormalized form.
That produces loss of precision, since some bits of the mantissa are
stolen to indicate the decimal point.

   If a result is too small to be represented as a denormalized number,
it is rounded to zero.  However, the sign of the result is preserved; if
the calculation was negative, the result is 'negative zero'.  Negative
zero can also result from some operations on infinity, such as 4/-oo.

   At any time, one of the above four rounding modes is selected.  You
can find out which one with this function:

 -- Function: int fegetround (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Returns the currently selected rounding mode, represented by one of
     the values of the defined rounding mode macros.

To change the rounding mode, use this function:

 -- Function: int fesetround (int ROUND)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Changes the currently selected rounding mode to ROUND.  If ROUND
     does not correspond to one of the supported rounding modes nothing
     is changed.  'fesetround' returns zero if it changed the rounding
     mode, or a nonzero value if the mode is not supported.

   You should avoid changing the rounding mode if possible.  It can be
an expensive operation; also, some hardware requires you to compile your
program differently for it to work.  The resulting code may run slower.
See your compiler documentation for details.

==============================================================================
File: libc.info,  Node: |Control_Functions|,  Next: |Arithmetic_Functions|,  Prev: |Rounding|,  Up: |Arithmetic|
==============================================================================

                                                             *Control_Functions*

20.7 Floating-Point Control Functions
-------------------------------------

IEEE 754 floating-point implementations allow the programmer to decide
whether traps will occur for each of the exceptions, by setting bits in
the 'control word'.  In C, traps result in the program receiving the
'SIGFPE' signal; see *note Signal Handling::.

   NB: IEEE 754 says that trap handlers are given details of the
exceptional situation, and can set the result value.  C signals do not
provide any mechanism to pass this information back and forth.  Trapping
exceptions in C is therefore not very useful.

   It is sometimes necessary to save the state of the floating-point
unit while you perform some calculation.  The library provides functions
which save and restore the exception flags, the set of exceptions that
generate traps, and the rounding mode.  This information is known as the
'floating-point environment'.

   The functions to save and restore the floating-point environment all
use a variable of type 'fenv_t' to store information.  This type is
defined in 'fenv.h'.  Its size and contents are implementation-defined.
You should not attempt to manipulate a variable of this type directly.

   To save the state of the FPU, use one of these functions:

 -- Function: int fegetenv (fenv_t *ENVP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Store the floating-point environment in the variable pointed to by
     ENVP.

     The function returns zero in case the operation was successful, a
     non-zero value otherwise.

 -- Function: int feholdexcept (fenv_t *ENVP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Store the current floating-point environment in the object pointed
     to by ENVP.  Then clear all exception flags, and set the FPU to
     trap no exceptions.  Not all FPUs support trapping no exceptions;
     if 'feholdexcept' cannot set this mode, it returns nonzero value.
     If it succeeds, it returns zero.

   The functions which restore the floating-point environment can take
these kinds of arguments:

   - Pointers to 'fenv_t' objects, which were initialized previously by
     a call to 'fegetenv' or  feholdexcept’.
   - The special macro 'FE_DFL_ENV' which represents the floating-point
     environment as it was available at program start.
   - Implementation defined macros with names starting with 'FE_' and
     having type 'fenv_t *'.

     If possible, the GNU C Library defines a macro 'FE_NOMASK_ENV'
     which represents an environment where every exception raised causes
     a trap to occur.  You can test for this macro using '#ifdef'.  It
     is only defined if '_GNU_SOURCE' is defined.

     Some platforms might define other predefined environments.

To set the floating-point environment, you can use either of these
functions:

 -- Function: int fesetenv (const fenv_t *ENVP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Set the floating-point environment to that described by ENVP.

     The function returns zero in case the operation was successful, a
     non-zero value otherwise.

 -- Function: int feupdateenv (const fenv_t *ENVP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Like 'fesetenv', this function sets the floating-point environment
     to that described by ENVP.  However, if any exceptions were flagged
     in the status word before 'feupdateenv' was called, they remain
     flagged after the call.  In other words, after 'feupdateenv' is
     called, the status word is the bitwise OR of the previous status
     word and the one saved in ENVP.

     The function returns zero in case the operation was successful, a
     non-zero value otherwise.

TS 18661-1:2014 defines additional functions to save and restore
floating-point control modes (such as the rounding mode and whether
traps are enabled) while leaving other status (such as raised flags)
unchanged.

   The special macro 'FE_DFL_MODE' may be passed to  fesetmode’.  It
represents the floating-point control modes at program start.

 -- Function: int fegetmode (femode_t *MODEP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Store the floating-point control modes in the variable pointed to
     by MODEP.

     The function returns zero in case the operation was successful, a
     non-zero value otherwise.

 -- Function: int fesetmode (const femode_t *MODEP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Set the floating-point control modes to those described by MODEP.

     The function returns zero in case the operation was successful, a
     non-zero value otherwise.

To control for individual exceptions if raising them causes a trap to
occur, you can use the following two functions.

   *Portability Note:* These functions are all GNU extensions.

 -- Function: int feenableexcept (int EXCEPTS)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function enables traps for each of the exceptions as indicated
     by the parameter EXCEPTS.  The individual exceptions are described
     in *note Status bit operations::.  Only the specified exceptions
     are enabled, the status of the other exceptions is not changed.

     The function returns the previous enabled exceptions in case the
     operation was successful, '-1' otherwise.

 -- Function: int fedisableexcept (int EXCEPTS)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function disables traps for each of the exceptions as
     indicated by the parameter EXCEPTS.  The individual exceptions are
     described in *note Status bit operations::.  Only the specified
     exceptions are disabled, the status of the other exceptions is not
     changed.

     The function returns the previous enabled exceptions in case the
     operation was successful, '-1' otherwise.

 -- Function: int fegetexcept (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The function returns a bitmask of all currently enabled exceptions.
     It returns '-1' in case of failure.

==============================================================================
File: libc.info,  Node: |Arithmetic_Functions|,  Next: |Complex_Numbers|,  Prev: |Control_Functions|,  Up: |Arithmetic|
==============================================================================

                                                          *Arithmetic_Functions*

20.8 Arithmetic Functions
-------------------------

The C library provides functions to do basic operations on
floating-point numbers.  These include absolute value, maximum and
minimum, normalization, bit twiddling, rounding, and a few others.

MENU

* |Absolute_Value|::              Absolute values of integers and floats.
* |Normalization_Functions|::     Extracting exponents and putting them back.
* |Rounding_Functions|::          Rounding floats to integers.
* |Remainder_Functions|::         Remainders on division, precisely defined.
* |FP_Bit_Twiddling|::            Sign bit adjustment.  Adding epsilon.
* |FP_Comparison_Functions|::     Comparisons without risk of exceptions.
* |Misc_FP_Arithmetic|::          Max, min, positive difference, multiply-add.

==============================================================================
File: libc.info,  Node: |Absolute_Value|,  Next: |Normalization_Functions|,  Up: |Arithmetic_Functions|
==============================================================================

                                                                *Absolute_Value*

20.8.1 Absolute Value
---------------------

These functions are provided for obtaining the 'absolute value' (or
'magnitude') of a number.  The absolute value of a real number X is X if
X is positive,  X if X is negative.  For a complex number Z, whose real
part is X and whose imaginary part is Y, the absolute value is
'sqrt (X*X + Y*Y)'.

   Prototypes for 'abs',  labs’ and ‘llabs’ are in ‘stdlib.h’; ‘imaxabs’
is declared in 'inttypes.h';  fabs’, ‘fabsf’ and ‘fabsl’ are declared in
'math.h'.   cabs’, ‘cabsf’ and ‘cabsl’ are declared in ‘complex.h’.

 -- Function: int abs (int NUMBER)
 -- Function: long int labs (long int NUMBER)
 -- Function: long long int llabs (long long int NUMBER)
 -- Function: intmax_t imaxabs (intmax_t NUMBER)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the absolute value of NUMBER.

     Most computers use a two's complement integer representation, in
     which the absolute value of 'INT_MIN' (the smallest possible  int’)
     cannot be represented; thus, 'abs (INT_MIN)' is not defined.

     'llabs' and  imaxdiv’ are new to ISO C99.

     See *note Integers:: for a description of the 'intmax_t' type.

 -- Function: double fabs (double NUMBER)
 -- Function: float fabsf (float NUMBER)
 -- Function: long double fabsl (long double NUMBER)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns the absolute value of the floating-point
     number NUMBER.

 -- Function: double cabs (complex double Z)
 -- Function: float cabsf (complex float Z)
 -- Function: long double cabsl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the absolute value of the complex number Z
     (*note Complex Numbers::).  The absolute value of a complex number
     is:

          sqrt (creal (Z) * creal (Z) + cimag (Z) * cimag (Z))

     This function should always be used instead of the direct formula
     because it takes special care to avoid losing precision.  It may
     also take advantage of hardware support for this operation.  See
     'hypot' in *note Exponents and Logarithms::.

==============================================================================
File: libc.info,  Node: |Normalization_Functions|,  Next: |Rounding_Functions|,  Prev: |Absolute_Value|,  Up: |Arithmetic_Functions|
==============================================================================

                                                       *Normalization_Functions*

20.8.2 Normalization Functions
------------------------------

The functions described in this section are primarily provided as a way
to efficiently perform certain low-level manipulations on floating point
numbers that are represented internally using a binary radix; see *note
Floating Point Concepts::.  These functions are required to have
equivalent behavior even if the representation does not use a radix of
2, but of course they are unlikely to be particularly efficient in those
cases.

   All these functions are declared in 'math.h'.

 -- Function: double frexp (double VALUE, int *EXPONENT)
 -- Function: float frexpf (float VALUE, int *EXPONENT)
 -- Function: long double frexpl (long double VALUE, int *EXPONENT)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions are used to split the number VALUE into a
     normalized fraction and an exponent.

     If the argument VALUE is not zero, the return value is VALUE times
     a power of two, and its magnitude is always in the range 1/2
     (inclusive) to 1 (exclusive).  The corresponding exponent is stored
     in '*EXPONENT'; the return value multiplied by 2 raised to this
     exponent equals the original number VALUE.

     For example, 'frexp (12.8, &exponent)' returns  0.8’ and stores ‘4’
     in 'exponent'.

     If VALUE is zero, then the return value is zero and zero is stored
     in '*EXPONENT'.

 -- Function: double ldexp (double VALUE, int EXPONENT)
 -- Function: float ldexpf (float VALUE, int EXPONENT)
 -- Function: long double ldexpl (long double VALUE, int EXPONENT)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the result of multiplying the floating-point
     number VALUE by 2 raised to the power EXPONENT.  (It can be used to
     reassemble floating-point numbers that were taken apart by
     'frexp'.)

     For example, 'ldexp (0.8, 4)' returns  12.8’.

   The following functions, which come from BSD, provide facilities
equivalent to those of 'ldexp' and  frexp’.  See also the ISO C function
'logb' which originally also appeared in BSD.

 -- Function: double scalb (double VALUE, double EXPONENT)
 -- Function: float scalbf (float VALUE, float EXPONENT)
 -- Function: long double scalbl (long double VALUE, long double
          EXPONENT)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'scalb' function is the BSD name for  ldexp’.

 -- Function: double scalbn (double X, int N)
 -- Function: float scalbnf (float X, int N)
 -- Function: long double scalbnl (long double X, int N)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'scalbn' is identical to  scalb’, except that the exponent N is an
     'int' instead of a floating-point number.

 -- Function: double scalbln (double X, long int N)
 -- Function: float scalblnf (float X, long int N)
 -- Function: long double scalblnl (long double X, long int N)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'scalbln' is identical to  scalb’, except that the exponent N is a
     'long int' instead of a floating-point number.

 -- Function: double significand (double X)
 -- Function: float significandf (float X)
 -- Function: long double significandl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'significand' returns the mantissa of X scaled to the range [1, 2).
     It is equivalent to 'scalb (X, (double) -ilogb (X))'.

     This function exists mainly for use in certain standardized tests
     of IEEE 754 conformance.

==============================================================================
File: libc.info,  Node: |Rounding_Functions|,  Next: |Remainder_Functions|,  Prev: |Normalization_Functions|,  Up: |Arithmetic_Functions|
==============================================================================

                                                            *Rounding_Functions*

20.8.3 Rounding Functions
-------------------------

The functions listed here perform operations such as rounding and
truncation of floating-point values.  Some of these functions convert
floating point numbers to integer values.  They are all declared in
'math.h'.

   You can also convert floating-point numbers to integers simply by
casting them to 'int'.  This discards the fractional part, effectively
rounding towards zero.  However, this only works if the result can
actually be represented as an 'int' for very large numbers, this is
impossible.  The functions listed here return the result as a 'double'
instead to get around this problem.

   The 'fromfp' functions use the following macros, from TS
18661-1:2014, to specify the direction of rounding.  These correspond to
the rounding directions defined in IEEE 754-2008.

'FP_INT_UPWARD'
     Round toward +oo.

'FP_INT_DOWNWARD'
     Round toward -oo.

'FP_INT_TOWARDZERO'
     Round toward zero.

'FP_INT_TONEARESTFROMZERO'
     Round to nearest, ties round away from zero.

'FP_INT_TONEAREST'
     Round to nearest, ties round to even.

 -- Function: double ceil (double X)
 -- Function: float ceilf (float X)
 -- Function: long double ceill (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions round X upwards to the nearest integer, returning
     that value as a 'double'.  Thus,  ceil (1.5)’ is ‘2.0’.

 -- Function: double floor (double X)
 -- Function: float floorf (float X)
 -- Function: long double floorl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions round X downwards to the nearest integer, returning
     that value as a 'double'.  Thus,  floor (1.5)’ is ‘1.0’ and ‘floor
     (-1.5)' is '-2.0 .

 -- Function: double trunc (double X)
 -- Function: float truncf (float X)
 -- Function: long double truncl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'trunc' functions round X towards zero to the nearest integer
     (returned in floating-point format).  Thus, 'trunc (1.5)' is  1.0’
     and 'trunc (-1.5)' is  -1.0’.

 -- Function: double rint (double X)
 -- Function: float rintf (float X)
 -- Function: long double rintl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions round X to an integer value according to the
     current rounding mode.  *Note Floating Point Parameters::, for
     information about the various rounding modes.  The default rounding
     mode is to round to the nearest integer; some machines support
     other modes, but round-to-nearest is always used unless you
     explicitly select another.

     If X was not initially an integer, these functions raise the
     inexact exception.

 -- Function: double nearbyint (double X)
 -- Function: float nearbyintf (float X)
 -- Function: long double nearbyintl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the same value as the 'rint' functions, but
     do not raise the inexact exception if X is not an integer.

 -- Function: double round (double X)
 -- Function: float roundf (float X)
 -- Function: long double roundl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions are similar to 'rint', but they round halfway cases
     away from zero instead of to the nearest integer (or other current
     rounding mode).

 -- Function: double roundeven (double X)
 -- Function: float roundevenf (float X)
 -- Function: long double roundevenl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions, from TS 18661-1:2014, are similar to 'round', but
     they round halfway cases to even instead of away from zero.

 -- Function: long int lrint (double X)
 -- Function: long int lrintf (float X)
 -- Function: long int lrintl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions are just like 'rint', but they return a  long int’
     instead of a floating-point number.

 -- Function: long long int llrint (double X)
 -- Function: long long int llrintf (float X)
 -- Function: long long int llrintl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions are just like 'rint', but they return a  long long
     int' instead of a floating-point number.

 -- Function: long int lround (double X)
 -- Function: long int lroundf (float X)
 -- Function: long int lroundl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions are just like 'round', but they return a  long int’
     instead of a floating-point number.

 -- Function: long long int llround (double X)
 -- Function: long long int llroundf (float X)
 -- Function: long long int llroundl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions are just like 'round', but they return a  long long
     int' instead of a floating-point number.

 -- Function: intmax_t fromfp (double X, int ROUND, unsigned int WIDTH)
 -- Function: intmax_t fromfpf (float X, int ROUND, unsigned int WIDTH)
 -- Function: intmax_t fromfpl (long double X, int ROUND, unsigned int
          WIDTH)
 -- Function: uintmax_t ufromfp (double X, int ROUND, unsigned int
          WIDTH)
 -- Function: uintmax_t ufromfpf (float X, int ROUND, unsigned int
          WIDTH)
 -- Function: uintmax_t ufromfpl (long double X, int ROUND, unsigned int
          WIDTH)
 -- Function: intmax_t fromfpx (double X, int ROUND, unsigned int WIDTH)
 -- Function: intmax_t fromfpxf (float X, int ROUND, unsigned int WIDTH)
 -- Function: intmax_t fromfpxl (long double X, int ROUND, unsigned int
          WIDTH)
 -- Function: uintmax_t ufromfpx (double X, int ROUND, unsigned int
          WIDTH)
 -- Function: uintmax_t ufromfpxf (float X, int ROUND, unsigned int
          WIDTH)
 -- Function: uintmax_t ufromfpxl (long double X, int ROUND, unsigned
          int WIDTH)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions, from TS 18661-1:2014, convert a floating-point
     number to an integer according to the rounding direction ROUND (one
     of the 'FP_INT_*' macros).  If the integer is outside the range of
     a signed or unsigned (depending on the return type of the function)
     type of width WIDTH bits (or outside the range of the return type,
     if WIDTH is larger), or if X is infinite or NaN, or if WIDTH is
     zero, a domain error occurs and an unspecified value is returned.
     The functions with an 'x' in their names raise the inexact
     exception when a domain error does not occur and the argument is
     not an integer; the other functions do not raise the inexact
     exception.

 -- Function: double modf (double VALUE, double *INTEGER-PART)
 -- Function: float modff (float VALUE, float *INTEGER-PART)
 -- Function: long double modfl (long double VALUE, long double
          *INTEGER-PART)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions break the argument VALUE into an integer part and a
     fractional part (between '-1' and  1’, exclusive).  Their sum
     equals VALUE.  Each of the parts has the same sign as VALUE, and
     the integer part is always rounded toward zero.

     'modf' stores the integer part in  *INTEGER-PART’, and returns the
     fractional part.  For example, 'modf (2.5, &intpart)' returns  0.5’
     and stores '2.0' into  intpart’.

==============================================================================
File: libc.info,  Node: |Remainder_Functions|,  Next: |FP_Bit_Twiddling|,  Prev: |Rounding_Functions|,  Up: |Arithmetic_Functions|
==============================================================================

                                                           *Remainder_Functions*

20.8.4 Remainder Functions
--------------------------

The functions in this section compute the remainder on division of two
floating-point numbers.  Each is a little different; pick the one that
suits your problem.

 -- Function: double fmod (double NUMERATOR, double DENOMINATOR)
 -- Function: float fmodf (float NUMERATOR, float DENOMINATOR)
 -- Function: long double fmodl (long double NUMERATOR, long double
          DENOMINATOR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions compute the remainder from the division of
     NUMERATOR by DENOMINATOR.  Specifically, the return value is
     'NUMERATOR - N * DENOMINATOR', where N is the quotient of NUMERATOR
     divided by DENOMINATOR, rounded towards zero to an integer.  Thus,
     'fmod (6.5, 2.3)' returns  1.9’, which is ‘6.5’ minus ‘4.6’.

     The result has the same sign as the NUMERATOR and has magnitude
     less than the magnitude of the DENOMINATOR.

     If DENOMINATOR is zero, 'fmod' signals a domain error.

 -- Function: double drem (double NUMERATOR, double DENOMINATOR)
 -- Function: float dremf (float NUMERATOR, float DENOMINATOR)
 -- Function: long double dreml (long double NUMERATOR, long double
          DENOMINATOR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions are like 'fmod' except that they round the internal
     quotient N to the nearest integer instead of towards zero to an
     integer.  For example, 'drem (6.5, 2.3)' returns  -0.4’, which is
     '6.5' minus  6.9’.

     The absolute value of the result is less than or equal to half the
     absolute value of the DENOMINATOR.  The difference between 'fmod
     (NUMERATOR, DENOMINATOR)' and 'drem (NUMERATOR, DENOMINATOR)  is
     always either DENOMINATOR, minus DENOMINATOR, or zero.

     If DENOMINATOR is zero, 'drem' signals a domain error.

 -- Function: double remainder (double NUMERATOR, double DENOMINATOR)
 -- Function: float remainderf (float NUMERATOR, float DENOMINATOR)
 -- Function: long double remainderl (long double NUMERATOR, long double
          DENOMINATOR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function is another name for 'drem'.

==============================================================================
File: libc.info,  Node: |FP_Bit_Twiddling|,  Next: |FP_Comparison_Functions|,  Prev: |Remainder_Functions|,  Up: |Arithmetic_Functions|
==============================================================================

                                                              *FP_Bit_Twiddling*

20.8.5 Setting and modifying single bits of FP values
-----------------------------------------------------

There are some operations that are too complicated or expensive to
perform by hand on floating-point numbers.  ISO C99 defines functions to
do these operations, which mostly involve changing single bits.

 -- Function: double copysign (double X, double Y)
 -- Function: float copysignf (float X, float Y)
 -- Function: long double copysignl (long double X, long double Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return X but with the sign of Y.  They work even if
     X or Y are NaN or zero.  Both of these can carry a sign (although
     not all implementations support it) and this is one of the few
     operations that can tell the difference.

     'copysign' never raises an exception.

     This function is defined in IEC 559 (and the appendix with
     recommended functions in IEEE 754/IEEE 854).

 -- Function: int signbit (_float-type_ X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'signbit' is a generic macro which can work on all floating-point
     types.  It returns a nonzero value if the value of X has its sign
     bit set.

     This is not the same as 'x < 0.0', because IEEE 754 floating point
     allows zero to be signed.  The comparison '-0.0 < 0.0' is false,
     but 'signbit (-0.0)' will return a nonzero value.

 -- Function: double nextafter (double X, double Y)
 -- Function: float nextafterf (float X, float Y)
 -- Function: long double nextafterl (long double X, long double Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'nextafter' function returns the next representable neighbor of
     X in the direction towards Y.  The size of the step between X and
     the result depends on the type of the result.  If X = Y the
     function simply returns Y.  If either value is 'NaN',  NaN’ is
     returned.  Otherwise a value corresponding to the value of the
     least significant bit in the mantissa is added or subtracted,
     depending on the direction.  'nextafter' will signal overflow or
     underflow if the result goes outside of the range of normalized
     numbers.

     This function is defined in IEC 559 (and the appendix with
     recommended functions in IEEE 754/IEEE 854).
      vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
