     void
     read_from_pipe (int file)
     {
       FILE *stream;
       int c;
       stream = fdopen (file, "r");
       while ((c = fgetc (stream)) != EOF)
         putchar (c);
       fclose (stream);
     }

     /* Write some random text to the pipe. */

     void
     write_to_pipe (int file)
     {
       FILE *stream;
       stream = fdopen (file, "w");
       fprintf (stream, "hello, world!\n");
       fprintf (stream, "goodbye, world!\n");
       fclose (stream);
     }

     int
     main (void)
     {
       pid_t pid;
       int mypipe[2];

       /* Create the pipe. */
       if (pipe (mypipe))
         {
           fprintf (stderr, "Pipe failed.\n");
           return EXIT_FAILURE;
         }

       /* Create the child process. */
       pid = fork ();
       if (pid == (pid_t) 0)
         {
           /* This is the child process.
              Close other end first. */
           close (mypipe[1]);
           read_from_pipe (mypipe[0]);
           return EXIT_SUCCESS;
         }
       else if (pid < (pid_t) 0)
         {
           /* The fork failed. */
           fprintf (stderr, "Fork failed.\n");
           return EXIT_FAILURE;
         }
       else
         {
           /* This is the parent process.
              Close other end first. */
           close (mypipe[0]);
           write_to_pipe (mypipe[1]);
           return EXIT_SUCCESS;
         }
     }

==============================================================================
File: libc.info,  Node: |Pipe_to_a_Subprocess|,  Next: |FIFO_Special_Files|,  Prev: |Creating_a_Pipe|,  Up: |Pipes_and_FIFOs|
==============================================================================

                                                          *Pipe_to_a_Subprocess*

15.2 Pipe to a Subprocess
-------------------------

A common use of pipes is to send data to or receive data from a program
being run as a subprocess.  One way of doing this is by using a
combination of 'pipe' (to create the pipe),  fork’ (to create the
subprocess), 'dup2' (to force the subprocess to use the pipe as its
standard input or output channel), and 'exec' (to execute the new
program).  Or, you can use 'popen' and  pclose’.

   The advantage of using 'popen' and  pclose’ is that the interface is
much simpler and easier to use.  But it doesn't offer as much
flexibility as using the low-level functions directly.

 -- Function: FILE * popen (const char *COMMAND, const char *MODE)
     Preliminary: | MT-Safe | AS-Unsafe heap corrupt | AC-Unsafe corrupt
     lock fd mem | *Note POSIX Safety Concepts::.

     The 'popen' function is closely related to the  system’ function;
     see *note Running a Command::.  It executes the shell command
     COMMAND as a subprocess.  However, instead of waiting for the
     command to complete, it creates a pipe to the subprocess and
     returns a stream that corresponds to that pipe.

     If you specify a MODE argument of '"r"', you can read from the
     stream to retrieve data from the standard output channel of the
     subprocess.  The subprocess inherits its standard input channel
     from the parent process.

     Similarly, if you specify a MODE argument of '"w"', you can write
     to the stream to send data to the standard input channel of the
     subprocess.  The subprocess inherits its standard output channel
     from the parent process.

     In the event of an error 'popen' returns a null pointer.  This
     might happen if the pipe or stream cannot be created, if the
     subprocess cannot be forked, or if the program cannot be executed.

 -- Function: int pclose (FILE *STREAM)
     Preliminary: | MT-Safe | AS-Unsafe heap plugin corrupt lock |
     AC-Unsafe corrupt lock fd mem | *Note POSIX Safety Concepts::.

     The 'pclose' function is used to close a stream created by  popen’.
     It waits for the child process to terminate and returns its status
     value, as for the 'system' function.

   Here is an example showing how to use 'popen' and  pclose’ to filter
output through another program, in this case the paging program 'more'.


     #include <stdio.h>
     #include <stdlib.h>

     void
     write_data (FILE * stream)
     {
       int i;
       for (i = 0; i < 100; i++)
         fprintf (stream, "%d\n", i);
       if (ferror (stream))
         {
           fprintf (stderr, "Output to stream failed.\n");
           exit (EXIT_FAILURE);
         }
     }

     int
     main (void)
     {
       FILE *output;

       output = popen ("more", "w");
       if (!output)
         {
           fprintf (stderr,
                    "incorrect parameters or too many files.\n");
           return EXIT_FAILURE;
         }
       write_data (output);
       if (pclose (output) != 0)
         {
           fprintf (stderr,
                    "Could not run more or other error.\n");
         }
       return EXIT_SUCCESS;
     }

==============================================================================
File: libc.info,  Node: |FIFO_Special_Files|,  Next: |Pipe_Atomicity|,  Prev: |Pipe_to_a_Subprocess|,  Up: |Pipes_and_FIFOs|
==============================================================================

                                                            *FIFO_Special_Files*

15.3 FIFO Special Files
-----------------------

A FIFO special file is similar to a pipe, except that it is created in a
different way.  Instead of being an anonymous communications channel, a
FIFO special file is entered into the file system by calling 'mkfifo'.

   Once you have created a FIFO special file in this way, any process
can open it for reading or writing, in the same way as an ordinary file.
However, it has to be open at both ends simultaneously before you can
proceed to do any input or output operations on it.  Opening a FIFO for
reading normally blocks until some other process opens the same FIFO for
writing, and vice versa.

   The 'mkfifo' function is declared in the header file  sys/stat.h’.

 -- Function: int mkfifo (const char *FILENAME, mode_t MODE)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'mkfifo' function makes a FIFO special file with name FILENAME.
     The MODE argument is used to set the file's permissions; see *note
     Setting Permissions::.

     The normal, successful return value from 'mkfifo' is  0’.  In the
     case of an error, '-1' is returned.  In addition to the usual file
     name errors (*note File Name Errors::), the following 'errno' error
     conditions are defined for this function:

     'EEXIST'
          The named file already exists.

     'ENOSPC'
          The directory or file system cannot be extended.

     'EROFS'
          The directory that would contain the file resides on a
          read-only file system.

==============================================================================
File: libc.info,  Node: |Pipe_Atomicity|,  Prev: |FIFO_Special_Files|,  Up: |Pipes_and_FIFOs|
==============================================================================

                                                                *Pipe_Atomicity*

15.4 Atomicity of Pipe I/O
--------------------------

Reading or writing pipe data is 'atomic' if the size of data written is
not greater than 'PIPE_BUF'.  This means that the data transfer seems to
be an instantaneous unit, in that nothing else in the system can observe
a state in which it is partially complete.  Atomic I/O may not begin
right away (it may need to wait for buffer space or for data), but once
it does begin it finishes immediately.

   Reading or writing a larger amount of data may not be atomic; for
example, output data from other processes sharing the descriptor may be
interspersed.  Also, once 'PIPE_BUF' characters have been written,
further writes will block until some characters are read.

   *Note Limits for Files::, for information about the 'PIPE_BUF'
parameter.

==============================================================================
File: libc.info,  Node: |Sockets|,  Next: |Low_Level_Terminal_Interface|,  Prev: |Pipes_and_FIFOs|,  Up: |Top|
==============================================================================

                                                                       *Sockets*

16 Sockets
==========

This chapter describes the GNU facilities for interprocess communication
using sockets.

   A 'socket' is a generalized interprocess communication channel.  Like
a pipe, a socket is represented as a file descriptor.  Unlike pipes
sockets support communication between unrelated processes, and even
between processes running on different machines that communicate over a
network.  Sockets are the primary means of communicating with other
machines; 'telnet',  rlogin’, ‘ftp’, ‘talk’ and the other familiar
network programs use sockets.

   Not all operating systems support sockets.  In the GNU C Library, the
header file 'sys/socket.h' exists regardless of the operating system,
and the socket functions always exist, but if the system does not really
support sockets these functions always fail.

   Incomplete: We do not currently document the facilities for
broadcast messages or for configuring Internet interfaces.  The
reentrant functions and some newer functions that are related to IPv6
aren't documented either so far.

MENU

* |Socket_Concepts|::	Basic concepts you need to know about.
* |Communication_Styles|::Stream communication, datagrams and other styles.
* |Socket_Addresses|::	How socket names ('addresses') work.
* |Interface_Naming|::	Identifying specific network interfaces.
* |Local_Namespace|::	Details about the local namespace.
* |Internet_Namespace|::	Details about the Internet namespace.
* |Misc_Namespaces|::	Other namespaces not documented fully here.
* |Open/Close_Sockets|::  Creating sockets and destroying them.
* |Connections|::		Operations on sockets with connection state.
* |Datagrams|::		Operations on datagram sockets.
* |Inetd|::		Inetd is a daemon that starts servers on request.
			   The most convenient way to write a server
			   is to make it work with Inetd.
* |Socket_Options|::	Miscellaneous low-level socket options.
* |Networks_Database|::   Accessing the database of network names.

==============================================================================
File: libc.info,  Node: |Socket_Concepts|,  Next: |Communication_Styles|,  Up: |Sockets|
==============================================================================

                                                               *Socket_Concepts*

16.1 Socket Concepts
--------------------

When you create a socket, you must specify the style of communication
you want to use and the type of protocol that should implement it.  The
'communication style' of a socket defines the user-level semantics of
sending and receiving data on the socket.  Choosing a communication
style specifies the answers to questions such as these:

   - *What are the units of data transmission?*  Some communication
     styles regard the data as a sequence of bytes with no larger
     structure; others group the bytes into records (which are known in
     this context as 'packets').

   - *Can data be lost during normal operation?*  Some communication
     styles guarantee that all the data sent arrives in the order it was
     sent (barring system or network crashes); other styles occasionally
     lose data as a normal part of operation, and may sometimes deliver
     packets more than once or in the wrong order.

     Designing a program to use unreliable communication styles usually
     involves taking precautions to detect lost or misordered packets
     and to retransmit data as needed.

   - *Is communication entirely with one partner?*  Some communication
     styles are like a telephone call you make a 'connection' with one
     remote socket and then exchange data freely.  Other styles are like
     mailing letters you specify a destination address for each message
     you send.

   You must also choose a 'namespace' for naming the socket.  A socket
name ('address') is meaningful only in the context of a particular
namespace.  In fact, even the data type to use for a socket name may
depend on the namespace.  Namespaces are also called 'domains', but we
avoid that word as it can be confused with other usage of the same term.
Each namespace has a symbolic name that starts with 'PF_'.  A
corresponding symbolic name starting with 'AF_' designates the address
format for that namespace.

   Finally you must choose the 'protocol' to carry out the
communication.  The protocol determines what low-level mechanism is used
to transmit and receive data.  Each protocol is valid for a particular
namespace and communication style; a namespace is sometimes called a
'protocol family' because of this, which is why the namespace names
start with 'PF_'.

   The rules of a protocol apply to the data passing between two
programs, perhaps on different computers; most of these rules are
handled by the operating system and you need not know about them.  What
you do need to know about protocols is this:

   - In order to have communication between two sockets, they must
     specify the _same_ protocol.

   - Each protocol is meaningful with particular style/namespace
     combinations and cannot be used with inappropriate combinations.
     For example, the TCP protocol fits only the byte stream style of
     communication and the Internet namespace.

   - For each combination of style and namespace there is a 'default
     protocol', which you can request by specifying 0 as the protocol
     number.  And that's what you should normally do use the default.

   Throughout the following description at various places
variables/parameters to denote sizes are required.  And here the trouble
starts.  In the first implementations the type of these variables was
simply 'int'.  On most machines at that time an  int’ was 32 bits wide,
which created a _de facto_ standard requiring 32-bit variables.  This is
important since references to variables of this type are passed to the
kernel.

   Then the POSIX people came and unified the interface with the words
"all size values are of type 'size_t'".  On 64-bit machines  size_t’ is
64 bits wide, so pointers to variables were no longer possible.

   The Unix98 specification provides a solution by introducing a type
'socklen_t'.  This type is used in all of the cases that POSIX changed
to use 'size_t'.  The only requirement of this type is that it be an
unsigned type of at least 32 bits.  Therefore, implementations which
require that references to 32-bit variables be passed can be as happy as
implementations which use 64-bit values.

==============================================================================
File: libc.info,  Node: |Communication_Styles|,  Next: |Socket_Addresses|,  Prev: |Socket_Concepts|,  Up: |Sockets|
==============================================================================

                                                          *Communication_Styles*

16.2 Communication Styles
-------------------------

The GNU C Library includes support for several different kinds of
sockets, each with different characteristics.  This section describes
the supported socket types.  The symbolic constants listed here are
defined in 'sys/socket.h'.

 -- Macro: int SOCK_STREAM
     The 'SOCK_STREAM' style is like a pipe (*note Pipes and FIFOs::).
     It operates over a connection with a particular remote socket and
     transmits data reliably as a stream of bytes.

     Use of this style is covered in detail in *note Connections::.

 -- Macro: int SOCK_DGRAM
     The 'SOCK_DGRAM' style is used for sending individually-addressed
     packets unreliably.  It is the diametrical opposite of
     'SOCK_STREAM'.

     Each time you write data to a socket of this kind, that data
     becomes one packet.  Since 'SOCK_DGRAM' sockets do not have
     connections, you must specify the recipient address with each
     packet.

     The only guarantee that the system makes about your requests to
     transmit data is that it will try its best to deliver each packet
     you send.  It may succeed with the sixth packet after failing with
     the fourth and fifth packets; the seventh packet may arrive before
     the sixth, and may arrive a second time after the sixth.

     The typical use for 'SOCK_DGRAM' is in situations where it is
     acceptable to simply re-send a packet if no response is seen in a
     reasonable amount of time.

     *Note Datagrams::, for detailed information about how to use
     datagram sockets.

 -- Macro: int SOCK_RAW
     This style provides access to low-level network protocols and
     interfaces.  Ordinary user programs usually have no need to use
     this style.

==============================================================================
File: libc.info,  Node: |Socket_Addresses|,  Next: |Interface_Naming|,  Prev: |Communication_Styles|,  Up: |Sockets|
==============================================================================

                                                              *Socket_Addresses*

16.3 Socket Addresses
---------------------

The name of a socket is normally called an 'address'.  The functions and
symbols for dealing with socket addresses were named inconsistently,
sometimes using the term 'name' and sometimes using  address”.  You can
regard these terms as synonymous where sockets are concerned.

   A socket newly created with the 'socket' function has no address.
Other processes can find it for communication only if you give it an
address.  We call this 'binding' the address to the socket, and the way
to do it is with the 'bind' function.

   You need only be concerned with the address of a socket if other
processes are to find it and start communicating with it.  You can
specify an address for other sockets, but this is usually pointless; the
first time you send data from a socket, or use it to initiate a
connection, the system assigns an address automatically if you have not
specified one.

   Occasionally a client needs to specify an address because the server
discriminates based on address; for example, the rsh and rlogin
protocols look at the client's socket address and only bypass password
checking if it is less than 'IPPORT_RESERVED' (*note Ports::).

   The details of socket addresses vary depending on what namespace you
are using.  *Note Local Namespace::, or *note Internet Namespace::, for
specific information.

   Regardless of the namespace, you use the same functions 'bind' and
'getsockname' to set and examine a socket s address.  These functions
use a phony data type, 'struct sockaddr *', to accept the address.  In
practice, the address lives in a structure of some other data type
appropriate to the address format you are using, but you cast its
address to 'struct sockaddr *' when you pass it to  bind’.

MENU

* |Address_Formats|::		About 'struct sockaddr'.
* |Setting_Address|::		Binding an address to a socket.
* |Reading_Address|::		Reading the address of a socket.

==============================================================================
File: libc.info,  Node: |Address_Formats|,  Next: |Setting_Address|,  Up: |Socket_Addresses|
==============================================================================

                                                               *Address_Formats*

16.3.1 Address Formats
----------------------

The functions 'bind' and  getsockname’ use the generic data type ‘struct
sockaddr *' to represent a pointer to a socket address.  You can t use
this data type effectively to interpret an address or construct one; for
that, you must use the proper data type for the socket's namespace.

   Thus, the usual practice is to construct an address of the proper
namespace-specific type, then cast a pointer to 'struct sockaddr *' when
you call 'bind' or  getsockname’.

   The one piece of information that you can get from the 'struct
sockaddr' data type is the 'address format designator'.  This tells you
which data type to use to understand the address fully.

   The symbols in this section are defined in the header file
'sys/socket.h'.

 -- Data Type: struct sockaddr
     The 'struct sockaddr' type itself has the following members:

     'short int sa_family'
          This is the code for the address format of this address.  It
          identifies the format of the data which follows.

     'char sa_data[14]'
          This is the actual socket address data, which is
          format-dependent.  Its length also depends on the format, and
          may well be more than 14.  The length 14 of 'sa_data' is
          essentially arbitrary.

   Each address format has a symbolic name which starts with 'AF_'.
Each of them corresponds to a 'PF_' symbol which designates the
corresponding namespace.  Here is a list of address format names:

'AF_LOCAL'
     This designates the address format that goes with the local
     namespace.  ('PF_LOCAL' is the name of that namespace.)  *Note
     Local Namespace Details::, for information about this address
     format.

'AF_UNIX'
     This is a synonym for 'AF_LOCAL'.  Although  AF_LOCAL’ is mandated
     by POSIX.1g, 'AF_UNIX' is portable to more systems.   AF_UNIX’ was
     the traditional name stemming from BSD, so even most POSIX systems
     support it.  It is also the name of choice in the Unix98
     specification.  (The same is true for 'PF_UNIX' vs.   PF_LOCAL’).

'AF_FILE'
     This is another synonym for 'AF_LOCAL', for compatibility.
     ('PF_FILE' is likewise a synonym for  PF_LOCAL’.)

'AF_INET'
     This designates the address format that goes with the Internet
     namespace.  ('PF_INET' is the name of that namespace.)  *Note
     Internet Address Formats::.

'AF_INET6'
     This is similar to 'AF_INET', but refers to the IPv6 protocol.
     ('PF_INET6' is the name of the corresponding namespace.)

'AF_UNSPEC'
     This designates no particular address format.  It is used only in
     rare cases, such as to clear out the default destination address of
     a 'connected' datagram socket.  *Note Sending Datagrams::.

     The corresponding namespace designator symbol 'PF_UNSPEC' exists
     for completeness, but there is no reason to use it in a program.

   'sys/socket.h' defines symbols starting with  AF_’ for many different
kinds of networks, most or all of which are not actually implemented.
We will document those that really work as we receive information about
how to use them.

==============================================================================
File: libc.info,  Node: |Setting_Address|,  Next: |Reading_Address|,  Prev: |Address_Formats|,  Up: |Socket_Addresses|
==============================================================================

                                                               *Setting_Address*

16.3.2 Setting the Address of a Socket
--------------------------------------

Use the 'bind' function to assign an address to a socket.  The prototype
for 'bind' is in the header file  sys/socket.h’.  For examples of use,
see *note Local Socket Example::, or see *note Inet Example::.

 -- Function: int bind (int SOCKET, struct sockaddr *ADDR, socklen_t
          LENGTH)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'bind' function assigns an address to the socket SOCKET.  The
     ADDR and LENGTH arguments specify the address; the detailed format
     of the address depends on the namespace.  The first part of the
     address is always the format designator, which specifies a
     namespace, and says that the address is in the format of that
     namespace.

     The return value is '0' on success and  -1’ on failure.  The
     following 'errno' error conditions are defined for this function:

     'EBADF'
          The SOCKET argument is not a valid file descriptor.

     'ENOTSOCK'
          The descriptor SOCKET is not a socket.

     'EADDRNOTAVAIL'
          The specified address is not available on this machine.

     'EADDRINUSE'
          Some other socket is already using the specified address.

     'EINVAL'
          The socket SOCKET already has an address.

     'EACCES'
          You do not have permission to access the requested address.
          (In the Internet domain, only the super-user is allowed to
          specify a port number in the range 0 through 'IPPORT_RESERVED'
          minus one; see *note Ports::.)

     Additional conditions may be possible depending on the particular
     namespace of the socket.

==============================================================================
File: libc.info,  Node: |Reading_Address|,  Prev: |Setting_Address|,  Up: |Socket_Addresses|
==============================================================================

                                                               *Reading_Address*

16.3.3 Reading the Address of a Socket
--------------------------------------

Use the function 'getsockname' to examine the address of an Internet
socket.  The prototype for this function is in the header file
'sys/socket.h'.

 -- Function: int getsockname (int SOCKET, struct sockaddr *ADDR,
          socklen_t *LENGTH-PTR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe mem/hurd | *Note POSIX
     Safety Concepts::.

     The 'getsockname' function returns information about the address of
     the socket SOCKET in the locations specified by the ADDR and
     LENGTH-PTR arguments.  Note that the LENGTH-PTR is a pointer; you
     should initialize it to be the allocation size of ADDR, and on
     return it contains the actual size of the address data.

     The format of the address data depends on the socket namespace.
     The length of the information is usually fixed for a given
     namespace, so normally you can know exactly how much space is
     needed and can provide that much.  The usual practice is to
     allocate a place for the value using the proper data type for the
     socket's namespace, then cast its address to 'struct sockaddr *  to
     pass it to 'getsockname'.

     The return value is '0' on success and  -1’ on error.  The
     following 'errno' error conditions are defined for this function:

     'EBADF'
          The SOCKET argument is not a valid file descriptor.

     'ENOTSOCK'
          The descriptor SOCKET is not a socket.

     'ENOBUFS'
          There are not enough internal buffers available for the
          operation.

   You can't read the address of a socket in the file namespace.  This
is consistent with the rest of the system; in general, there's no way to
find a file's name from a descriptor for that file.

==============================================================================
File: libc.info,  Node: |Interface_Naming|,  Next: |Local_Namespace|,  Prev: |Socket_Addresses|,  Up: |Sockets|
==============================================================================

                                                              *Interface_Naming*

16.4 Interface Naming
---------------------

Each network interface has a name.  This usually consists of a few
letters that relate to the type of interface, which may be followed by a
number if there is more than one interface of that type.  Examples might
be 'lo' (the loopback interface) and  eth0’ (the first Ethernet
interface).

   Although such names are convenient for humans, it would be clumsy to
have to use them whenever a program needs to refer to an interface.  In
such situations an interface is referred to by its 'index', which is an
arbitrarily-assigned small positive integer.

   The following functions, constants and data types are declared in the
header file 'net/if.h'.

 -- Constant: size_t IFNAMSIZ
     This constant defines the maximum buffer size needed to hold an
     interface name, including its terminating zero byte.

 -- Function: unsigned int if_nametoindex (const char *IFNAME)
     Preliminary: | MT-Safe | AS-Unsafe lock | AC-Unsafe lock fd | *Note
     POSIX Safety Concepts::.

     This function yields the interface index corresponding to a
     particular name.  If no interface exists with the name given, it
     returns 0.

 -- Function: char * if_indextoname (unsigned int IFINDEX, char *IFNAME)
     Preliminary: | MT-Safe | AS-Unsafe lock | AC-Unsafe lock fd | *Note
     POSIX Safety Concepts::.

     This function maps an interface index to its corresponding name.
     The returned name is placed in the buffer pointed to by 'ifname',
     which must be at least 'IFNAMSIZ' bytes in length.  If the index
     was invalid, the function's return value is a null pointer,
     otherwise it is 'ifname'.

 -- Data Type: struct if_nameindex
     This data type is used to hold the information about a single
     interface.  It has the following members:

     'unsigned int if_index;'
          This is the interface index.

     'char *if_name'
          This is the null-terminated index name.

 -- Function: struct if_nameindex * if_nameindex (void)
     Preliminary: | MT-Safe | AS-Unsafe heap lock/hurd | AC-Unsafe
     lock/hurd fd mem | *Note POSIX Safety Concepts::.

     This function returns an array of 'if_nameindex' structures, one
     for every interface that is present.  The end of the list is
     indicated by a structure with an interface of 0 and a null name
     pointer.  If an error occurs, this function returns a null pointer.

     The returned structure must be freed with 'if_freenameindex' after
     use.

 -- Function: void if_freenameindex (struct if_nameindex *PTR)
     Preliminary: | MT-Safe | AS-Unsafe heap | AC-Unsafe mem | *Note
     POSIX Safety Concepts::.

     This function frees the structure returned by an earlier call to
     'if_nameindex'.

==============================================================================
File: libc.info,  Node: |Local_Namespace|,  Next: |Internet_Namespace|,  Prev: |Interface_Naming|,  Up: |Sockets|
==============================================================================

                                                               *Local_Namespace*

16.5 The Local Namespace
------------------------

This section describes the details of the local namespace, whose
symbolic name (required when you create a socket) is 'PF_LOCAL'.  The
local namespace is also known as 'Unix domain sockets'.  Another name is
file namespace since socket addresses are normally implemented as file
names.

MENU

* Concepts: Local Namespace Concepts. What you need to understand.
* Details: Local Namespace Details.   Address format, symbolic names, etc.
* Example: Local Socket Example.      Example of creating a socket.

==============================================================================
File: libc.info,  Node: |Local_Namespace_Concepts|,  Next: |Local_Namespace_Details|,  Up: |Local_Namespace|
==============================================================================

                                                      *Local_Namespace_Concepts*

16.5.1 Local Namespace Concepts
-------------------------------

In the local namespace socket addresses are file names.  You can specify
any file name you want as the address of the socket, but you must have
write permission on the directory containing it.  It's common to put
these files in the '/tmp' directory.

   One peculiarity of the local namespace is that the name is only used
when opening the connection; once open the address is not meaningful and
may not exist.

   Another peculiarity is that you cannot connect to such a socket from
another machine not even if the other machine shares the file system
which contains the name of the socket.  You can see the socket in a
directory listing, but connecting to it never succeeds.  Some programs
take advantage of this, such as by asking the client to send its own
process ID, and using the process IDs to distinguish between clients.
However, we recommend you not use this method in protocols you design,
as we might someday permit connections from other machines that mount
the same file systems.  Instead, send each new client an identifying
number if you want it to have one.

   After you close a socket in the local namespace, you should delete
the file name from the file system.  Use 'unlink' or  remove’ to do
this; see *note Deleting Files::.

   The local namespace supports just one protocol for any communication
style; it is protocol number '0'.

==============================================================================
File: libc.info,  Node: |Local_Namespace_Details|,  Next: |Local_Socket_Example|,  Prev: |Local_Namespace_Concepts|,  Up: |Local_Namespace|
==============================================================================

                                                       *Local_Namespace_Details*

16.5.2 Details of Local Namespace
---------------------------------

To create a socket in the local namespace, use the constant 'PF_LOCAL'
as the NAMESPACE argument to 'socket' or  socketpair’.  This constant is
defined in 'sys/socket.h'.

 -- Macro: int PF_LOCAL
     This designates the local namespace, in which socket addresses are
     local names, and its associated family of protocols.  'PF_LOCAL' is
     the macro used by POSIX.1g.

 -- Macro: int PF_UNIX
     This is a synonym for 'PF_LOCAL', for compatibility s sake.

 -- Macro: int PF_FILE
     This is a synonym for 'PF_LOCAL', for compatibility s sake.

   The structure for specifying socket names in the local namespace is
defined in the header file 'sys/un.h':

 -- Data Type: struct sockaddr_un
     This structure is used to specify local namespace socket addresses.
     It has the following members:

     'short int sun_family'
          This identifies the address family or format of the socket
          address.  You should store the value 'AF_LOCAL' to designate
          the local namespace.  *Note Socket Addresses::.

     'char sun_path[108]'
          This is the file name to use.

          Incomplete: Why is 108 a magic number?  RMS suggests making
          this a zero-length array and tweaking the following example to
          use 'alloca' to allocate an appropriate amount of storage
          based on the length of the filename.

   You should compute the LENGTH parameter for a socket address in the
local namespace as the sum of the size of the 'sun_family' component and
the string length (_not_ the allocation size!)  of the file name string.
This can be done using the macro 'SUN_LEN':

 -- Macro: int SUN_LEN (_struct sockaddr_un *_ PTR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro computes the length of the socket address in the local
     namespace.

==============================================================================
File: libc.info,  Node: |Local_Socket_Example|,  Prev: |Local_Namespace_Details|,  Up: |Local_Namespace|
==============================================================================

                                                          *Local_Socket_Example*

16.5.3 Example of Local-Namespace Sockets
-----------------------------------------

Here is an example showing how to create and name a socket in the local
namespace.


     #include <stddef.h>
     #include <stdio.h>
     #include <errno.h>
     #include <stdlib.h>
     #include <string.h>
     #include <sys/socket.h>
     #include <sys/un.h>

     int
     make_named_socket (const char *filename)
     {
       struct sockaddr_un name;
       int sock;
       size_t size;

       /* Create the socket. */
       sock = socket (PF_LOCAL, SOCK_DGRAM, 0);
       if (sock < 0)
         {
           perror ("socket");
           exit (EXIT_FAILURE);
         }

       /* Bind a name to the socket. */
       name.sun_family = AF_LOCAL;
       strncpy (name.sun_path, filename, sizeof (name.sun_path));
       name.sun_path[sizeof (name.sun_path) - 1] = '\0';

       /* The size of the address is
          the offset of the start of the filename,
          plus its length (not including the terminating null byte).
          Alternatively you can just do:
          size = SUN_LEN (&name);
      */
       size = (offsetof (struct sockaddr_un, sun_path)
               + strlen (name.sun_path));

       if (bind (sock, (struct sockaddr *) &name, size) < 0)
         {
           perror ("bind");
           exit (EXIT_FAILURE);
         }

       return sock;
     }

==============================================================================
File: libc.info,  Node: |Internet_Namespace|,  Next: |Misc_Namespaces|,  Prev: |Local_Namespace|,  Up: |Sockets|
==============================================================================

                                                            *Internet_Namespace*

16.6 The Internet Namespace
---------------------------

This section describes the details of the protocols and socket naming
conventions used in the Internet namespace.

   Originally the Internet namespace used only IP version 4 (IPv4).
With the growing number of hosts on the Internet, a new protocol with a
larger address space was necessary: IP version 6 (IPv6).  IPv6
introduces 128-bit addresses (IPv4 has 32-bit addresses) and other
features, and will eventually replace IPv4.

   To create a socket in the IPv4 Internet namespace, use the symbolic
name 'PF_INET' of this namespace as the NAMESPACE argument to  socket’
or 'socketpair'.  For IPv6 addresses you need the macro  PF_INET6’.
These macros are defined in 'sys/socket.h'.

 -- Macro: int PF_INET
     This designates the IPv4 Internet namespace and associated family
     of protocols.

 -- Macro: int PF_INET6
     This designates the IPv6 Internet namespace and associated family
     of protocols.

   A socket address for the Internet namespace includes the following
components:

   - The address of the machine you want to connect to.  Internet
     addresses can be specified in several ways; these are discussed in
     *note Internet Address Formats::, *note Host Addresses:: and *note
     Host Names::.

   - A port number for that machine.  *Note Ports::.

   You must ensure that the address and port number are represented in a
canonical format called 'network byte order'.  *Note Byte Order::, for
information about this.

MENU

* |Internet_Address_Formats|::    How socket addresses are specified in the
                                 Internet namespace.
* |Host_Addresses|::	        All about host addresses of Internet host.
* |Ports|::			Internet port numbers.
* |Services_Database|::           Ports may have symbolic names.
* |Byte_Order|::		        Different hosts may use different byte
                                 ordering conventions; you need to
                                 canonicalize host address and port number.
* |Protocols_Database|::		Referring to protocols by name.
* |Inet_Example|::	        Putting it all together.

==============================================================================
File: libc.info,  Node: |Internet_Address_Formats|,  Next: |Host_Addresses|,  Up: |Internet_Namespace|
==============================================================================

                                                      *Internet_Address_Formats*

16.6.1 Internet Socket Address Formats
--------------------------------------

In the Internet namespace, for both IPv4 ('AF_INET') and IPv6
('AF_INET6'), a socket address consists of a host address and a port on
that host.  In addition, the protocol you choose serves effectively as a
part of the address because local port numbers are meaningful only
within a particular protocol.

   The data types for representing socket addresses in the Internet
namespace are defined in the header file 'netinet/in.h'.

 -- Data Type: struct sockaddr_in
     This is the data type used to represent socket addresses in the
     Internet namespace.  It has the following members:

     'sa_family_t sin_family'
          This identifies the address family or format of the socket
          address.  You should store the value 'AF_INET' in this member.
          *Note Socket Addresses::.

     'struct in_addr sin_addr'
          This is the Internet address of the host machine.  *Note Host
          Addresses::, and *note Host Names::, for how to get a value to
          store here.

     'unsigned short int sin_port'
          This is the port number.  *Note Ports::.

   When you call 'bind' or  getsockname’, you should specify ‘sizeof
(struct sockaddr_in)' as the LENGTH parameter if you are using an IPv4
Internet namespace socket address.

 -- Data Type: struct sockaddr_in6
     This is the data type used to represent socket addresses in the
     IPv6 namespace.  It has the following members:

     'sa_family_t sin6_family'
          This identifies the address family or format of the socket
          address.  You should store the value of 'AF_INET6' in this
          member.  *Note Socket Addresses::.

     'struct in6_addr sin6_addr'
          This is the IPv6 address of the host machine.  *Note Host
          Addresses::, and *note Host Names::, for how to get a value to
          store here.

     'uint32_t sin6_flowinfo'
          This is a currently unimplemented field.

     'uint16_t sin6_port'
          This is the port number.  *Note Ports::.

==============================================================================
File: libc.info,  Node: |Host_Addresses|,  Next: |Ports|,  Prev: |Internet_Address_Formats|,  Up: |Internet_Namespace|
==============================================================================

                                                                *Host_Addresses*

16.6.2 Host Addresses
---------------------

Each computer on the Internet has one or more 'Internet addresses',
numbers which identify that computer among all those on the Internet.
Users typically write IPv4 numeric host addresses as sequences of four
numbers, separated by periods, as in '128.52.46.32', and IPv6 numeric
host addresses as sequences of up to eight numbers separated by colons,
as in '5f03:1200:836f:c100::1'.

   Each computer also has one or more 'host names', which are strings of
words separated by periods, as in 'www.gnu.org'.

   Programs that let the user specify a host typically accept both
numeric addresses and host names.  To open a connection a program needs
a numeric address, and so must convert a host name to the numeric
address it stands for.

MENU

* |Abstract_Host_Addresses|::	What a host number consists of.
* Data type: Host Address Data Type.	Data type for a host number.
* Functions: Host Address Functions.	Functions to operate on them.
* Names: Host Names.		Translating host names to host numbers.

==============================================================================
File: libc.info,  Node: |Abstract_Host_Addresses|,  Next: |Host_Address_Data_Type|,  Up: |Host_Addresses|
==============================================================================

                                                       *Abstract_Host_Addresses*

16.6.2.1 Internet Host Addresses
--------------------------------

Each computer on the Internet has one or more Internet addresses,
numbers which identify that computer among all those on the Internet.

   An IPv4 Internet host address is a number containing four bytes of
data.  Historically these are divided into two parts, a 'network number'
and a 'local network address number' within that network.  In the
mid-1990s classless addresses were introduced which changed this
behavior.  Since some functions implicitly expect the old definitions,
we first describe the class-based network and will then describe
classless addresses.  IPv6 uses only classless addresses and therefore
the following paragraphs don't apply.

   The class-based IPv4 network number consists of the first one, two or
three bytes; the rest of the bytes are the local address.

   IPv4 network numbers are registered with the Network Information
Center (NIC), and are divided into three classes A, B and C. The local
network address numbers of individual machines are registered with the
administrator of the particular network.

   Class A networks have single-byte numbers in the range 0 to 127.
There are only a small number of Class A networks, but they can each
support a very large number of hosts.  Medium-sized Class B networks
have two-byte network numbers, with the first byte in the range 128 to
191.  Class C networks are the smallest; they have three-byte network
numbers, with the first byte in the range 192-255.  Thus, the first 1,
2, or 3 bytes of an Internet address specify a network.  The remaining
bytes of the Internet address specify the address within that network.

   The Class A network 0 is reserved for broadcast to all networks.  In
addition, the host number 0 within each network is reserved for
broadcast to all hosts in that network.  These uses are obsolete now but
for compatibility reasons you shouldn't use network 0 and host number 0.

   The Class A network 127 is reserved for loopback; you can always use
the Internet address '127.0.0.1' to refer to the host machine.

   Since a single machine can be a member of multiple networks, it can
have multiple Internet host addresses.  However, there is never supposed
to be more than one machine with the same host address.

   There are four forms of the 'standard numbers-and-dots notation' for
Internet addresses:

'A.B.C.D'
     This specifies all four bytes of the address individually and is
     the commonly used representation.

'A.B.C'
     The last part of the address, C, is interpreted as a 2-byte
     quantity.  This is useful for specifying host addresses in a Class
     B network with network address number 'A.B'.

'A.B'
     The last part of the address, B, is interpreted as a 3-byte
     quantity.  This is useful for specifying host addresses in a Class
     A network with network address number A.

'A'
     If only one part is given, this corresponds directly to the host
     address number.

   Within each part of the address, the usual C conventions for
specifying the radix apply.  In other words, a leading '0x' or  0X’
implies hexadecimal radix; a leading '0' implies octal; and otherwise
decimal radix is assumed.

Classless Addresses
-------------------

IPv4 addresses (and IPv6 addresses also) are now considered classless;
the distinction between classes A, B and C can be ignored.  Instead an
IPv4 host address consists of a 32-bit address and a 32-bit mask.  The
mask contains set bits for the network part and cleared bits for the
host part.  The network part is contiguous from the left, with the
remaining bits representing the host.  As a consequence, the netmask can
simply be specified as the number of set bits.  Classes A, B and C are
just special cases of this general rule.  For example, class A addresses
have a netmask of '255.0.0.0' or a prefix length of 8.

   Classless IPv4 network addresses are written in numbers-and-dots
notation with the prefix length appended and a slash as separator.  For
example the class A network 10 is written as '10.0.0.0/8'.

IPv6 Addresses
--------------

IPv6 addresses contain 128 bits (IPv4 has 32 bits) of data.  A host
address is usually written as eight 16-bit hexadecimal numbers that are
separated by colons.  Two colons are used to abbreviate strings of
consecutive zeros.  For example, the IPv6 loopback address
'0:0:0:0:0:0:0:1' can just be written as  ::1’.

==============================================================================
File: libc.info,  Node: |Host_Address_Data_Type|,  Next: |Host_Address_Functions|,  Prev: |Abstract_Host_Addresses|,  Up: |Host_Addresses|
==============================================================================

                                                        *Host_Address_Data_Type*

16.6.2.2 Host Address Data Type
-------------------------------

IPv4 Internet host addresses are represented in some contexts as
integers (type 'uint32_t').  In other contexts, the integer is packaged
inside a structure of type 'struct in_addr'.  It would be better if the
usage were made consistent, but it is not hard to extract the integer
from the structure or put the integer into a structure.

   You will find older code that uses 'unsigned long int' for IPv4
Internet host addresses instead of 'uint32_t' or  struct in_addr’.
Historically 'unsigned long int' was a 32-bit number but with 64-bit
machines this has changed.  Using 'unsigned long int' might break the
code if it is used on machines where this type doesn't have 32 bits.
'uint32_t' is specified by Unix98 and guaranteed to have 32 bits.

   IPv6 Internet host addresses have 128 bits and are packaged inside a
structure of type 'struct in6_addr'.

   The following basic definitions for Internet addresses are declared
in the header file 'netinet/in.h':

 -- Data Type: struct in_addr
     This data type is used in certain contexts to contain an IPv4
     Internet host address.  It has just one field, named 's_addr',
     which records the host address number as an 'uint32_t'.

 -- Macro: uint32_t INADDR_LOOPBACK
     You can use this constant to stand for 'the address of this
     machine,' instead of finding its actual address.  It is the IPv4
     Internet address '127.0.0.1', which is usually called  localhost’.
     This special constant saves you the trouble of looking up the
     address of your own machine.  Also, the system usually implements
     'INADDR_LOOPBACK' specially, avoiding any network traffic for the
     case of one machine talking to itself.

 -- Macro: uint32_t INADDR_ANY
     You can use this constant to stand for 'any incoming address' when
     binding to an address.  *Note Setting Address::.  This is the usual
     address to give in the 'sin_addr' member of  struct sockaddr_in’
     when you want to accept Internet connections.

 -- Macro: uint32_t INADDR_BROADCAST
     This constant is the address you use to send a broadcast message.

 -- Macro: uint32_t INADDR_NONE
     This constant is returned by some functions to indicate an error.

 -- Data Type: struct in6_addr
     This data type is used to store an IPv6 address.  It stores 128
     bits of data, which can be accessed (via a union) in a variety of
     ways.

 -- Constant: struct in6_addr in6addr_loopback
     This constant is the IPv6 address '::1', the loopback address.  See
     above for a description of what this means.  The macro
     'IN6ADDR_LOOPBACK_INIT' is provided to allow you to initialize your
     own variables to this value.

 -- Constant: struct in6_addr in6addr_any
     This constant is the IPv6 address '::', the unspecified address.
     See above for a description of what this means.  The macro
     'IN6ADDR_ANY_INIT' is provided to allow you to initialize your own
     variables to this value.

==============================================================================
File: libc.info,  Node: |Host_Address_Functions|,  Next: |Host_Names|,  Prev: |Host_Address_Data_Type|,  Up: |Host_Addresses|
==============================================================================

                                                        *Host_Address_Functions*

16.6.2.3 Host Address Functions
-------------------------------

These additional functions for manipulating Internet addresses are
declared in the header file 'arpa/inet.h'.  They represent Internet
addresses in network byte order, and network numbers and
local-address-within-network numbers in host byte order.  *Note Byte
Order::, for an explanation of network and host byte order.

 -- Function: int inet_aton (const char *NAME, struct in_addr *ADDR)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     This function converts the IPv4 Internet host address NAME from the
     standard numbers-and-dots notation into binary data and stores it
     in the 'struct in_addr' that ADDR points to.   inet_aton’ returns
     nonzero if the address is valid, zero if not.

 -- Function: uint32_t inet_addr (const char *NAME)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     This function converts the IPv4 Internet host address NAME from the
     standard numbers-and-dots notation into binary data.  If the input
     is not valid, 'inet_addr' returns  INADDR_NONE’.  This is an
     obsolete interface to 'inet_aton', described immediately above.  It
     is obsolete because 'INADDR_NONE' is a valid address
     (255.255.255.255), and 'inet_aton' provides a cleaner way to
     indicate error return.

 -- Function: uint32_t inet_network (const char *NAME)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     This function extracts the network number from the address NAME,
     given in the standard numbers-and-dots notation.  The returned
     address is in host order.  If the input is not valid,
     'inet_network' returns  -1’.

     The function works only with traditional IPv4 class A, B and C
     network types.  It doesn't work with classless addresses and
     shouldn't be used anymore.

 -- Function: char * inet_ntoa (struct in_addr ADDR)
     Preliminary: | MT-Safe locale | AS-Unsafe race | AC-Safe | *Note
     POSIX Safety Concepts::.

     This function converts the IPv4 Internet host address ADDR to a
     string in the standard numbers-and-dots notation.  The return value
     is a pointer into a statically-allocated buffer.  Subsequent calls
     will overwrite the same buffer, so you should copy the string if
     you need to save it.

     In multi-threaded programs each thread has its own
     statically-allocated buffer.  But still subsequent calls of
     'inet_ntoa' in the same thread will overwrite the result of the
     last call.

     Instead of 'inet_ntoa' the newer function  inet_ntop’ which is
     described below should be used since it handles both IPv4 and IPv6
     addresses.

 -- Function: struct in_addr inet_makeaddr (uint32_t NET, uint32_t
          LOCAL)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function makes an IPv4 Internet host address by combining the
     network number NET with the local-address-within-network number
     LOCAL.

 -- Function: uint32_t inet_lnaof (struct in_addr ADDR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns the local-address-within-network part of the
     Internet host address ADDR.

     The function works only with traditional IPv4 class A, B and C
     network types.  It doesn't work with classless addresses and
     shouldn't be used anymore.

 -- Function: uint32_t inet_netof (struct in_addr ADDR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns the network number part of the Internet host
     address ADDR.

     The function works only with traditional IPv4 class A, B and C
     network types.  It doesn't work with classless addresses and
     shouldn't be used anymore.

 -- Function: int inet_pton (int AF, const char *CP, void *BUF)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     This function converts an Internet address (either IPv4 or IPv6)
     from presentation (textual) to network (binary) format.  AF should
     be either 'AF_INET' or  AF_INET6’, as appropriate for the type of
     address being converted.  CP is a pointer to the input string, and
     BUF is a pointer to a buffer for the result.  It is the caller's
     responsibility to make sure the buffer is large enough.

 -- Function: const char * inet_ntop (int AF, const void *CP, char *BUF,
          socklen_t LEN)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     This function converts an Internet address (either IPv4 or IPv6)
     from network (binary) to presentation (textual) form.  AF should be
     either 'AF_INET' or  AF_INET6’, as appropriate.  CP is a pointer to
     the address to be converted.  BUF should be a pointer to a buffer
     to hold the result, and LEN is the length of this buffer.  The
     return value from the function will be this buffer address.

==============================================================================
File: libc.info,  Node: |Host_Names|,  Prev: |Host_Address_Functions|,  Up: |Host_Addresses|
==============================================================================

                                                                    *Host_Names*

16.6.2.4 Host Names
-------------------

Besides the standard numbers-and-dots notation for Internet addresses,
you can also refer to a host by a symbolic name.  The advantage of a
symbolic name is that it is usually easier to remember.  For example,
the machine with Internet address '158.121.106.19' is also known as
'alpha.gnu.org'; and other machines in the  gnu.org’ domain can refer to
it simply as 'alpha'.

   Internally, the system uses a database to keep track of the mapping
between host names and host numbers.  This database is usually either
the file '/etc/hosts' or an equivalent provided by a name server.  The
functions and other symbols for accessing this database are declared in
'netdb.h'.  They are BSD features, defined unconditionally if you
include 'netdb.h'.

 -- Data Type: struct hostent
     This data type is used to represent an entry in the hosts database.
     It has the following members:

     'char *h_name'
          This is the 'official' name of the host.

     'char **h_aliases'
          These are alternative names for the host, represented as a
          null-terminated vector of strings.

     'int h_addrtype'
          This is the host address type; in practice, its value is
          always either 'AF_INET' or  AF_INET6’, with the latter being
          used for IPv6 hosts.  In principle other kinds of addresses
          could be represented in the database as well as Internet
          addresses; if this were done, you might find a value in this
          field other than 'AF_INET' or  AF_INET6’.  *Note Socket
          Addresses::.

     'int h_length'
          This is the length, in bytes, of each address.

     'char **h_addr_list'
          This is the vector of addresses for the host.  (Recall that
          the host might be connected to multiple networks and have
          different addresses on each one.)  The vector is terminated by
          a null pointer.

     'char *h_addr'
          This is a synonym for 'h_addr_list[0]'; in other words, it is
          the first host address.

   As far as the host database is concerned, each address is just a
block of memory 'h_length' bytes long.  But in other contexts there is
an implicit assumption that you can convert IPv4 addresses to a 'struct
in_addr' or an 'uint32_t .  Host addresses in a ‘struct hostent’
structure are always given in network byte order; see *note Byte
Order::.

   You can use 'gethostbyname',  gethostbyname2’ or ‘gethostbyaddr’ to
search the hosts database for information about a particular host.  The
information is returned in a statically-allocated structure; you must
copy the information if you need to save it across calls.  You can also
use 'getaddrinfo' and  getnameinfo’ to obtain this information.

 -- Function: struct hostent * gethostbyname (const char *NAME)
     Preliminary: | MT-Unsafe race:hostbyname env locale | AS-Unsafe
     dlopen plugin corrupt heap lock | AC-Unsafe lock corrupt mem fd |
     *Note POSIX Safety Concepts::.

     The 'gethostbyname' function returns information about the host
     named NAME.  If the lookup fails, it returns a null pointer.

 -- Function: struct hostent * gethostbyname2 (const char *NAME, int AF)
     Preliminary: | MT-Unsafe race:hostbyname2 env locale | AS-Unsafe
     dlopen plugin corrupt heap lock | AC-Unsafe lock corrupt mem fd |
     *Note POSIX Safety Concepts::.

     The 'gethostbyname2' function is like  gethostbyname’, but allows
     the caller to specify the desired address family (e.g. 'AF_INET' or
     'AF_INET6') of the result.

 -- Function: struct hostent * gethostbyaddr (const void *ADDR,
          socklen_t LENGTH, int FORMAT)
     Preliminary: | MT-Unsafe race:hostbyaddr env locale | AS-Unsafe
     dlopen plugin corrupt heap lock | AC-Unsafe lock corrupt mem fd |
     *Note POSIX Safety Concepts::.

     The 'gethostbyaddr' function returns information about the host
     with Internet address ADDR.  The parameter ADDR is not really a
     pointer to char - it can be a pointer to an IPv4 or an IPv6
     address.  The LENGTH argument is the size (in bytes) of the address
     at ADDR.  FORMAT specifies the address format; for an IPv4 Internet
     address, specify a value of 'AF_INET'; for an IPv6 Internet
     address, use 'AF_INET6'.

     If the lookup fails, 'gethostbyaddr' returns a null pointer.

   If the name lookup by 'gethostbyname' or  gethostbyaddr’ fails, you
can find out the reason by looking at the value of the variable
'h_errno'.  (It would be cleaner design for these functions to set
'errno', but use of  h_errno’ is compatible with other systems.)

   Here are the error codes that you may find in 'h_errno':

'HOST_NOT_FOUND'
     No such host is known in the database.

'TRY_AGAIN'
     This condition happens when the name server could not be contacted.
     If you try again later, you may succeed then.

'NO_RECOVERY'
     A non-recoverable error occurred.

'NO_ADDRESS'
     The host database contains an entry for the name, but it doesn't
     have an associated Internet address.

   The lookup functions above all have one thing in common: they are not
reentrant and therefore unusable in multi-threaded applications.
Therefore provides the GNU C Library a new set of functions which can be
used in this context.

 -- Function: int gethostbyname_r (const char *restrict NAME, struct
          hostent *restrict RESULT_BUF, char *restrict BUF, size_t
          BUFLEN, struct hostent **restrict RESULT, int *restrict
          H_ERRNOP)
     Preliminary: | MT-Safe env locale | AS-Unsafe dlopen plugin corrupt
     heap lock | AC-Unsafe lock corrupt mem fd | *Note POSIX Safety
     Concepts::.

     The 'gethostbyname_r' function returns information about the host
     named NAME.  The caller must pass a pointer to an object of type
     'struct hostent' in the RESULT_BUF parameter.  In addition the
     function may need extra buffer space and the caller must pass a
     pointer and the size of the buffer in the BUF and BUFLEN
     parameters.

     A pointer to the buffer, in which the result is stored, is
     available in '*RESULT' after the function call successfully
     returned.  The buffer passed as the BUF parameter can be freed only
     once the caller has finished with the result hostent struct, or has
     copied it including all the other memory that it points to.  If an
     error occurs or if no entry is found, the pointer '*RESULT' is a
     null pointer.  Success is signalled by a zero return value.  If the
     function failed the return value is an error number.  In addition
     to the errors defined for 'gethostbyname' it can also be  ERANGE’.
     In this case the call should be repeated with a larger buffer.
     Additional error information is not stored in the global variable
     'h_errno' but instead in the object pointed to by H_ERRNOP.

     Here's a small example:
          struct hostent *
          gethostname (char *host)
          {
            struct hostent *hostbuf, *hp;
            size_t hstbuflen;
            char *tmphstbuf;
            int res;
            int herr;

            hostbuf = malloc (sizeof (struct hostent));
            hstbuflen = 1024;
            tmphstbuf = malloc (hstbuflen);

            while ((res = gethostbyname_r (host, hostbuf, tmphstbuf, hstbuflen,
                                           &hp, &herr)) == ERANGE)
              {
                /* Enlarge the buffer.  */
                hstbuflen *= 2;
                tmphstbuf = realloc (tmphstbuf, hstbuflen);
              }

            free (tmphstbuf);
            /*  Check for errors.  */
            if (res || hp == NULL)
              return NULL;
            return hp;
          }

 -- Function: int gethostbyname2_r (const char *NAME, int AF, struct
          hostent *restrict RESULT_BUF, char *restrict BUF, size_t
          BUFLEN, struct hostent **restrict RESULT, int *restrict
          H_ERRNOP)
     Preliminary: | MT-Safe env locale | AS-Unsafe dlopen plugin corrupt
     heap lock | AC-Unsafe lock corrupt mem fd | *Note POSIX Safety
     Concepts::.

     The 'gethostbyname2_r' function is like  gethostbyname_r’, but
     allows the caller to specify the desired address family (e.g.
     'AF_INET' or  AF_INET6’) for the result.

 -- Function: int gethostbyaddr_r (const void *ADDR, socklen_t LENGTH,
          int FORMAT, struct hostent *restrict RESULT_BUF, char
          *restrict BUF, size_t BUFLEN, struct hostent **restrict
          RESULT, int *restrict H_ERRNOP)
     Preliminary: | MT-Safe env locale | AS-Unsafe dlopen plugin corrupt
     heap lock | AC-Unsafe lock corrupt mem fd | *Note POSIX Safety
     Concepts::.

     The 'gethostbyaddr_r' function returns information about the host
     with Internet address ADDR.  The parameter ADDR is not really a
     pointer to char - it can be a pointer to an IPv4 or an IPv6
     address.  The LENGTH argument is the size (in bytes) of the address
     at ADDR.  FORMAT specifies the address format; for an IPv4 Internet
     address, specify a value of 'AF_INET'; for an IPv6 Internet
     address, use 'AF_INET6'.

     Similar to the 'gethostbyname_r' function, the caller must provide
     buffers for the result and memory used internally.  In case of
     success the function returns zero.  Otherwise the value is an error
     number where 'ERANGE' has the special meaning that the
     caller-provided buffer is too small.

   You can also scan the entire hosts database one entry at a time using
'sethostent',  gethostent’ and ‘endhostent’.  Be careful when using
these functions because they are not reentrant.

 -- Function: void sethostent (int STAYOPEN)
     Preliminary: | MT-Unsafe race:hostent env locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     This function opens the hosts database to begin scanning it.  You
     can then call 'gethostent' to read the entries.

     If the STAYOPEN argument is nonzero, this sets a flag so that
     subsequent calls to 'gethostbyname' or  gethostbyaddr’ will not
     close the database (as they usually would).  This makes for more
     efficiency if you call those functions several times, by avoiding
     reopening the database for each call.

 -- Function: struct hostent * gethostent (void)
     Preliminary: | MT-Unsafe race:hostent race:hostentbuf env locale |
     AS-Unsafe dlopen plugin heap lock | AC-Unsafe corrupt lock fd mem |
     *Note POSIX Safety Concepts::.

     This function returns the next entry in the hosts database.  It
     returns a null pointer if there are no more entries.

 -- Function: void endhostent (void)
     Preliminary: | MT-Unsafe race:hostent env locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     This function closes the hosts database.

==============================================================================
File: libc.info,  Node: |Ports|,  Next: |Services_Database|,  Prev: |Host_Addresses|,  Up: |Internet_Namespace|
==============================================================================

                                                                         *Ports*

16.6.3 Internet Ports
---------------------

A socket address in the Internet namespace consists of a machine's
Internet address plus a 'port number' which distinguishes the sockets on
a given machine (for a given protocol).  Port numbers range from 0 to
65,535.

   Port numbers less than 'IPPORT_RESERVED' are reserved for standard
servers, such as 'finger' and  telnet’.  There is a database that keeps
track of these, and you can use the 'getservbyname' function to map a
service name onto a port number; see *note Services Database::.

   If you write a server that is not one of the standard ones defined in
the database, you must choose a port number for it.  Use a number
greater than 'IPPORT_USERRESERVED'; such numbers are reserved for
servers and won't ever be generated automatically by the system.
Avoiding conflicts with servers being run by other users is up to you.

   When you use a socket without specifying its address, the system
generates a port number for it.  This number is between
'IPPORT_RESERVED' and  IPPORT_USERRESERVED’.

   On the Internet, it is actually legitimate to have two different
sockets with the same port number, as long as they never both try to
communicate with the same socket address (host address plus port
number).  You shouldn't duplicate a port number except in special
circumstances where a higher-level protocol requires it.  Normally, the
system won't let you do it; 'bind  normally insists on distinct port
numbers.  To reuse a port number, you must set the socket option
'SO_REUSEADDR'.  *Note Socket-Level Options::.

   These macros are defined in the header file 'netinet/in.h'.

 -- Macro: int IPPORT_RESERVED
     Port numbers less than 'IPPORT_RESERVED' are reserved for superuser
     use.

 -- Macro: int IPPORT_USERRESERVED
     Port numbers greater than or equal to 'IPPORT_USERRESERVED' are
     reserved for explicit use; they will never be allocated
     automatically.

==============================================================================
File: libc.info,  Node: |Services_Database|,  Next: |Byte_Order|,  Prev: |Ports|,  Up: |Internet_Namespace|
==============================================================================

                                                             *Services_Database*

16.6.4 The Services Database
----------------------------

The database that keeps track of 'well-known' services is usually either
the file '/etc/services' or an equivalent from a name server.  You can
use these utilities, declared in 'netdb.h', to access the services
database.

 -- Data Type: struct servent
     This data type holds information about entries from the services
     database.  It has the following members:

     'char *s_name'
          This is the 'official' name of the service.

     'char **s_aliases'
          These are alternate names for the service, represented as an
          array of strings.  A null pointer terminates the array.

     'int s_port'
          This is the port number for the service.  Port numbers are
          given in network byte order; see *note Byte Order::.

     'char *s_proto'
          This is the name of the protocol to use with this service.
          *Note Protocols Database::.

   To get information about a particular service, use the
'getservbyname' or  getservbyport’ functions.  The information is
returned in a statically-allocated structure; you must copy the
information if you need to save it across calls.

 -- Function: struct servent * getservbyname (const char *NAME, const
          char *PROTO)
     Preliminary: | MT-Unsafe race:servbyname locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     The 'getservbyname' function returns information about the service
     named NAME using protocol PROTO.  If it can't find such a service,
     it returns a null pointer.

     This function is useful for servers as well as for clients; servers
     use it to determine which port they should listen on (*note
     Listening::).

 -- Function: struct servent * getservbyport (int PORT, const char
          *PROTO)
     Preliminary: | MT-Unsafe race:servbyport locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     The 'getservbyport' function returns information about the service
     at port PORT using protocol PROTO.  If it can't find such a
     service, it returns a null pointer.

You can also scan the services database using 'setservent',  getservent’
and 'endservent'.  Be careful when using these functions because they
are not reentrant.

 -- Function: void setservent (int STAYOPEN)
     Preliminary: | MT-Unsafe race:servent locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     This function opens the services database to begin scanning it.

     If the STAYOPEN argument is nonzero, this sets a flag so that
     subsequent calls to 'getservbyname' or  getservbyport’ will not
     close the database (as they usually would).  This makes for more
     efficiency if you call those functions several times, by avoiding
     reopening the database for each call.

 -- Function: struct servent * getservent (void)
     Preliminary: | MT-Unsafe race:servent race:serventbuf locale |
     AS-Unsafe dlopen plugin heap lock | AC-Unsafe corrupt lock fd mem |
     *Note POSIX Safety Concepts::.

     This function returns the next entry in the services database.  If
     there are no more entries, it returns a null pointer.

 -- Function: void endservent (void)
     Preliminary: | MT-Unsafe race:servent locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     This function closes the services database.

==============================================================================
File: libc.info,  Node: |Byte_Order|,  Next: |Protocols_Database|,  Prev: |Services_Database|,  Up: |Internet_Namespace|
==============================================================================

                                                                    *Byte_Order*

16.6.5 Byte Order Conversion
----------------------------

Different kinds of computers use different conventions for the ordering
of bytes within a word.  Some computers put the most significant byte
within a word first (this is called 'big-endian' order), and others put
it last ('little-endian' order).

   So that machines with different byte order conventions can
communicate, the Internet protocols specify a canonical byte order
convention for data transmitted over the network.  This is known as
'network byte order'.

   When establishing an Internet socket connection, you must make sure
that the data in the 'sin_port' and  sin_addr’ members of the
'sockaddr_in' structure are represented in network byte order.  If you
are encoding integer data in the messages sent through the socket, you
should convert this to network byte order too.  If you don't do this,
your program may fail when running on or talking to other kinds of
machines.

   If you use 'getservbyname' and  gethostbyname’ or ‘inet_addr’ to get
the port number and host address, the values are already in network byte
order, and you can copy them directly into the 'sockaddr_in' structure.

   Otherwise, you have to convert the values explicitly.  Use 'htons'
and 'ntohs' to convert values for the  sin_port’ member.  Use ‘htonl’
and 'ntohl' to convert IPv4 addresses for the  sin_addr’ member.
(Remember, 'struct in_addr' is equivalent to  uint32_t’.)  These
functions are declared in 'netinet/in.h'.

 -- Function: uint16_t htons (uint16_t HOSTSHORT)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function converts the 'uint16_t' integer HOSTSHORT from host
     byte order to network byte order.

 -- Function: uint16_t ntohs (uint16_t NETSHORT)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function converts the 'uint16_t' integer NETSHORT from network
     byte order to host byte order.

 -- Function: uint32_t htonl (uint32_t HOSTLONG)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function converts the 'uint32_t' integer HOSTLONG from host
     byte order to network byte order.

     This is used for IPv4 Internet addresses.

 -- Function: uint32_t ntohl (uint32_t NETLONG)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function converts the 'uint32_t' integer NETLONG from network
     byte order to host byte order.

     This is used for IPv4 Internet addresses.

==============================================================================
File: libc.info,  Node: |Protocols_Database|,  Next: |Inet_Example|,  Prev: |Byte_Order|,  Up: |Internet_Namespace|
==============================================================================

                                                            *Protocols_Database*

16.6.6 Protocols Database
-------------------------

The communications protocol used with a socket controls low-level
details of how data are exchanged.  For example, the protocol implements
things like checksums to detect errors in transmissions, and routing
instructions for messages.  Normal user programs have little reason to
mess with these details directly.

   The default communications protocol for the Internet namespace
depends on the communication style.  For stream communication, the
default is TCP ('transmission control protocol').  For datagram
communication, the default is UDP ('user datagram protocol').  For
reliable datagram communication, the default is RDP ('reliable datagram
protocol').  You should nearly always use the default.

   Internet protocols are generally specified by a name instead of a
number.  The network protocols that a host knows about are stored in a
database.  This is usually either derived from the file
'/etc/protocols', or it may be an equivalent provided by a name server.
You look up the protocol number associated with a named protocol in the
database using the 'getprotobyname' function.

   Here are detailed descriptions of the utilities for accessing the
protocols database.  These are declared in 'netdb.h'.

 -- Data Type: struct protoent
     This data type is used to represent entries in the network
     protocols database.  It has the following members:

     'char *p_name'
          This is the official name of the protocol.

     'char **p_aliases'
          These are alternate names for the protocol, specified as an
          array of strings.  The last element of the array is a null
          pointer.

     'int p_proto'
          This is the protocol number (in host byte order); use this
          member as the PROTOCOL argument to 'socket'.

   You can use 'getprotobyname' and  getprotobynumber’ to search the
protocols database for a specific protocol.  The information is returned
in a statically-allocated structure; you must copy the information if
you need to save it across calls.

 -- Function: struct protoent * getprotobyname (const char *NAME)
     Preliminary: | MT-Unsafe race:protobyname locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     The 'getprotobyname' function returns information about the network
     protocol named NAME.  If there is no such protocol, it returns a
     null pointer.

 -- Function: struct protoent * getprotobynumber (int PROTOCOL)
     Preliminary: | MT-Unsafe race:protobynumber locale | AS-Unsafe
     dlopen plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note
     POSIX Safety Concepts::.

     The 'getprotobynumber' function returns information about the
     network protocol with number PROTOCOL.  If there is no such
     protocol, it returns a null pointer.

   You can also scan the whole protocols database one protocol at a time
by using 'setprotoent',  getprotoent’ and ‘endprotoent’.  Be careful
when using these functions because they are not reentrant.

 -- Function: void setprotoent (int STAYOPEN)
     Preliminary: | MT-Unsafe race:protoent locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     This function opens the protocols database to begin scanning it.

     If the STAYOPEN argument is nonzero, this sets a flag so that
     subsequent calls to 'getprotobyname' or  getprotobynumber’ will not
     close the database (as they usually would).  This makes for more
     efficiency if you call those functions several times, by avoiding
     reopening the database for each call.

 -- Function: struct protoent * getprotoent (void)
     Preliminary: | MT-Unsafe race:protoent race:protoentbuf locale |
     AS-Unsafe dlopen plugin heap lock | AC-Unsafe corrupt lock fd mem |
     *Note POSIX Safety Concepts::.

     This function returns the next entry in the protocols database.  It
     returns a null pointer if there are no more entries.

 -- Function: void endprotoent (void)
     Preliminary: | MT-Unsafe race:protoent locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     This function closes the protocols database.

==============================================================================
File: libc.info,  Node: |Inet_Example|,  Prev: |Protocols_Database|,  Up: |Internet_Namespace|
==============================================================================

                                                                  *Inet_Example*

16.6.7 Internet Socket Example
------------------------------

Here is an example showing how to create and name a socket in the
Internet namespace.  The newly created socket exists on the machine that
the program is running on.  Rather than finding and using the machine's
Internet address, this example specifies 'INADDR_ANY' as the host
address; the system replaces that with the machine's actual address.


     #include <stdio.h>
     #include <stdlib.h>
     #include <sys/socket.h>
     #include <netinet/in.h>

     int
     make_socket (uint16_t port)
     {
       int sock;
       struct sockaddr_in name;

       /* Create the socket. */
       sock = socket (PF_INET, SOCK_STREAM, 0);
       if (sock < 0)
         {
           perror ("socket");
           exit (EXIT_FAILURE);
         }

       /* Give the socket a name. */
       name.sin_family = AF_INET;
       name.sin_port = htons (port);
       name.sin_addr.s_addr = htonl (INADDR_ANY);
       if (bind (sock, (struct sockaddr *) &name, sizeof (name)) < 0)
         {
           perror ("bind");
           exit (EXIT_FAILURE);
         }

       return sock;
     }

   Here is another example, showing how you can fill in a 'sockaddr_in'
structure, given a host name string and a port number:


     #include <stdio.h>
     #include <stdlib.h>
     #include <sys/socket.h>
     #include <netinet/in.h>
     #include <netdb.h>

     void
     init_sockaddr (struct sockaddr_in *name,
                    const char *hostname,
                    uint16_t port)
     {
       struct hostent *hostinfo;

       name->sin_family = AF_INET;
       name->sin_port = htons (port);
       hostinfo = gethostbyname (hostname);
       if (hostinfo == NULL)
         {
           fprintf (stderr, "Unknown host %s.\n", hostname);
           exit (EXIT_FAILURE);
         }
       name->sin_addr = *(struct in_addr *) hostinfo->h_addr;
     }

==============================================================================
File: libc.info,  Node: |Misc_Namespaces|,  Next: |Open/Close_Sockets|,  Prev: |Internet_Namespace|,  Up: |Sockets|
==============================================================================

                                                               *Misc_Namespaces*

16.7 Other Namespaces
---------------------

Certain other namespaces and associated protocol families are supported
but not documented yet because they are not often used.  'PF_NS' refers
to the Xerox Network Software protocols.  'PF_ISO' stands for Open
Systems Interconnect.  'PF_CCITT' refers to protocols from CCITT.
'socket.h' defines these symbols and others naming protocols not
actually implemented.

   'PF_IMPLINK' is used for communicating between hosts and Internet
Message Processors.  For information on this and 'PF_ROUTE', an
occasionally-used local area routing protocol, see the GNU Hurd Manual
(to appear in the future).

==============================================================================
File: libc.info,  Node: |Open/Close_Sockets|,  Next: |Connections|,  Prev: |Misc_Namespaces|,  Up: |Sockets|
==============================================================================

                                                            *Open/Close_Sockets*

16.8 Opening and Closing Sockets
--------------------------------

This section describes the actual library functions for opening and
closing sockets.  The same functions work for all namespaces and
connection styles.

MENU

* |Creating_a_Socket|::           How to open a socket.
* |Closing_a_Socket|::            How to close a socket.
* |Socket_Pairs|::                These are created like pipes.

==============================================================================
File: libc.info,  Node: |Creating_a_Socket|,  Next: |Closing_a_Socket|,  Up: |Open/Close_Sockets|
==============================================================================

                                                             *Creating_a_Socket*

16.8.1 Creating a Socket
------------------------

The primitive for creating a socket is the 'socket' function, declared
in 'sys/socket.h'.

 -- Function: int socket (int NAMESPACE, int STYLE, int PROTOCOL)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe fd | *Note POSIX Safety
     Concepts::.

     This function creates a socket and specifies communication style
     STYLE, which should be one of the socket styles listed in *note
     Communication Styles::.  The NAMESPACE argument specifies the
     namespace; it must be 'PF_LOCAL' (*note Local Namespace::) or
     'PF_INET' (*note Internet Namespace::).  PROTOCOL designates the
     specific protocol (*note Socket Concepts::); zero is usually right
     for PROTOCOL.

     The return value from 'socket' is the file descriptor for the new
     socket, or '-1' in case of error.  The following  errno’ error
     conditions are defined for this function:

     'EPROTONOSUPPORT'
          The PROTOCOL or STYLE is not supported by the NAMESPACE
          specified.

     'EMFILE'
          The process already has too many file descriptors open.

     'ENFILE'
          The system already has too many file descriptors open.

     'EACCES'
          The process does not have the privilege to create a socket of
          the specified STYLE or PROTOCOL.

     'ENOBUFS'
          The system ran out of internal buffer space.

     The file descriptor returned by the 'socket' function supports both
     read and write operations.  However, like pipes, sockets do not
     support file positioning operations.

   For examples of how to call the 'socket' function, see *note Local
Socket Example::, or *note Inet Example::.

==============================================================================
File: libc.info,  Node: |Closing_a_Socket|,  Next: |Socket_Pairs|,  Prev: |Creating_a_Socket|,  Up: |Open/Close_Sockets|
==============================================================================

                                                              *Closing_a_Socket*

16.8.2 Closing a Socket
-----------------------

When you have finished using a socket, you can simply close its file
descriptor with 'close'; see *note Opening and Closing Files::.  If
there is still data waiting to be transmitted over the connection,
normally 'close' tries to complete this transmission.  You can control
this behavior using the 'SO_LINGER' socket option to specify a timeout
period; see *note Socket Options::.

   You can also shut down only reception or transmission on a connection
by calling 'shutdown', which is declared in  sys/socket.h’.

 -- Function: int shutdown (int SOCKET, int HOW)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'shutdown' function shuts down the connection of socket SOCKET.
     The argument HOW specifies what action to perform:

     '0'
          Stop receiving data for this socket.  If further data arrives,
          reject it.

     '1'
          Stop trying to transmit data from this socket.  Discard any
          data waiting to be sent.  Stop looking for acknowledgement of
          data already sent; don't retransmit it if it is lost.

     '2'
          Stop both reception and transmission.

     The return value is '0' on success and  -1’ on failure.  The
     following 'errno' error conditions are defined for this function:

     'EBADF'
          SOCKET is not a valid file descriptor.

     'ENOTSOCK'
          SOCKET is not a socket.

     'ENOTCONN'
          SOCKET is not connected.

==============================================================================
File: libc.info,  Node: |Socket_Pairs|,  Prev: |Closing_a_Socket|,  Up: |Open/Close_Sockets|
==============================================================================

                                                                  *Socket_Pairs*

16.8.3 Socket Pairs
-------------------

A 'socket pair' consists of a pair of connected (but unnamed) sockets.
It is very similar to a pipe and is used in much the same way.  Socket
pairs are created with the 'socketpair' function, declared in
'sys/socket.h'.  A socket pair is much like a pipe; the main difference
is that the socket pair is bidirectional, whereas the pipe has one
input-only end and one output-only end (*note Pipes and FIFOs::).

 -- Function: int socketpair (int NAMESPACE, int STYLE, int PROTOCOL,
          int FILEDES[2])
     Preliminary: | MT-Safe | AS-Safe | AC-Safe fd | *Note POSIX Safety
     Concepts::.

     This function creates a socket pair, returning the file descriptors
     in 'FILEDES[0]' and  FILEDES[1]’.  The socket pair is a full-duplex
     communications channel, so that both reading and writing may be
     performed at either end.

     The NAMESPACE, STYLE and PROTOCOL arguments are interpreted as for
     the 'socket' function.  STYLE should be one of the communication
     styles listed in *note Communication Styles::.  The NAMESPACE
     argument specifies the namespace, which must be 'AF_LOCAL' (*note
     Local Namespace::); PROTOCOL specifies the communications protocol,
     but zero is the only meaningful value.

     If STYLE specifies a connectionless communication style, then the
     two sockets you get are not _connected_, strictly speaking, but
     each of them knows the other as the default destination address, so
     they can send packets to each other.

     The 'socketpair' function returns  0’ on success and ‘-1’ on
     failure.  The following 'errno' error conditions are defined for
     this function:

     'EMFILE'
          The process has too many file descriptors open.

     'EAFNOSUPPORT'
          The specified namespace is not supported.

     'EPROTONOSUPPORT'
          The specified protocol is not supported.

     'EOPNOTSUPP'
          The specified protocol does not support the creation of socket
          pairs.

==============================================================================
File: libc.info,  Node: |Connections|,  Next: |Datagrams|,  Prev: |Open/Close_Sockets|,  Up: |Sockets|
==============================================================================

                                                                   *Connections*

16.9 Using Sockets with Connections
-----------------------------------

The most common communication styles involve making a connection to a
particular other socket, and then exchanging data with that socket over
and over.  Making a connection is asymmetric; one side (the 'client')
acts to request a connection, while the other side (the 'server') makes
a socket and waits for the connection request.

MENU

* |Connecting|::    	     What the client program must do.
* |Listening|::		     How a server program waits for requests.
* |Accepting_Connections|::    What the server does when it gets a request.
* |Who_is_Connected|::	     Getting the address of the
				other side of a connection.
* |Transferring_Data|::        How to send and receive data.
* |Byte_Stream_Example|::	     An example program: a client for communicating
			      over a byte stream socket in the Internet namespace.
* |Server_Example|::	     A corresponding server program.
* |Out_of_Band_Data|::         This is an advanced feature.

==============================================================================
File: libc.info,  Node: |Connecting|,  Next: |Listening|,  Up: |Connections|
==============================================================================

                                                                    *Connecting*

16.9.1 Making a Connection
--------------------------

In making a connection, the client makes a connection while the server
waits for and accepts the connection.  Here we discuss what the client
program must do with the 'connect' function, which is declared in
'sys/socket.h'.

 -- Function: int connect (int SOCKET, struct sockaddr *ADDR, socklen_t
          LENGTH)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'connect' function initiates a connection from the socket with
     file descriptor SOCKET to the socket whose address is specified by
     the ADDR and LENGTH arguments.  (This socket is typically on
     another machine, and it must be already set up as a server.)  *Note
     Socket Addresses::, for information about how these arguments are
     interpreted.

     Normally, 'connect' waits until the server responds to the request
     before it returns.  You can set nonblocking mode on the socket
     SOCKET to make 'connect' return immediately without waiting for the
     response.  *Note File Status Flags::, for information about
     nonblocking mode.

     The normal return value from 'connect' is  0’.  If an error occurs,
     'connect' returns  -1’.  The following ‘errno’ error conditions are
     defined for this function:

     'EBADF'
          The socket SOCKET is not a valid file descriptor.

     'ENOTSOCK'
          File descriptor SOCKET is not a socket.

     'EADDRNOTAVAIL'
          The specified address is not available on the remote machine.

     'EAFNOSUPPORT'
          The namespace of the ADDR is not supported by this socket.

     'EISCONN'
          The socket SOCKET is already connected.

     'ETIMEDOUT'
          The attempt to establish the connection timed out.

     'ECONNREFUSED'
          The server has actively refused to establish the connection.

     'ENETUNREACH'
          The network of the given ADDR isn't reachable from this host.

     'EADDRINUSE'
          The socket address of the given ADDR is already in use.

     'EINPROGRESS'
          The socket SOCKET is non-blocking and the connection could not
          be established immediately.  You can determine when the
          connection is completely established with 'select'; *note
          Waiting for I/O::.  Another 'connect' call on the same socket,
          before the connection is completely established, will fail
          with 'EALREADY'.

     'EALREADY'
          The socket SOCKET is non-blocking and already has a pending
          connection in progress (see 'EINPROGRESS' above).

     This function is defined as a cancellation point in multi-threaded
     programs, so one has to be prepared for this and make sure that
     allocated resources (like memory, file descriptors, semaphores or
     whatever) are freed even if the thread is canceled.

==============================================================================
File: libc.info,  Node: |Listening|,  Next: |Accepting_Connections|,  Prev: |Connecting|,  Up: |Connections|
==============================================================================

                                                                     *Listening*

16.9.2 Listening for Connections
--------------------------------

Now let us consider what the server process must do to accept
connections on a socket.  First it must use the 'listen' function to
enable connection requests on the socket, and then accept each incoming
connection with a call to 'accept' (*note Accepting Connections::).
Once connection requests are enabled on a server socket, the 'select'
function reports when the socket has a connection ready to be accepted
(*note Waiting for I/O::).

   The 'listen' function is not allowed for sockets using connectionless
communication styles.

   You can write a network server that does not even start running until
a connection to it is requested.  *Note Inetd Servers::.

   In the Internet namespace, there are no special protection mechanisms
for controlling access to a port; any process on any machine can make a
connection to your server.  If you want to restrict access to your
server, make it examine the addresses associated with connection
requests or implement some other handshaking or identification protocol.

   In the local namespace, the ordinary file protection bits control who
has access to connect to the socket.

 -- Function: int listen (int SOCKET, int N)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe fd | *Note POSIX Safety
     Concepts::.

     The 'listen' function enables the socket SOCKET to accept
     connections, thus making it a server socket.

     The argument N specifies the length of the queue for pending
     connections.  When the queue fills, new clients attempting to
     connect fail with 'ECONNREFUSED' until the server calls  accept’ to
     accept a connection from the queue.

     The 'listen' function returns  0’ on success and ‘-1’ on failure.
     The following 'errno' error conditions are defined for this
     function:

     'EBADF'
          The argument SOCKET is not a valid file descriptor.

     'ENOTSOCK'
          The argument SOCKET is not a socket.

     'EOPNOTSUPP'
          The socket SOCKET does not support this operation.

==============================================================================
File: libc.info,  Node: |Accepting_Connections|,  Next: |Who_is_Connected|,  Prev: |Listening|,  Up: |Connections|
==============================================================================

                                                         *Accepting_Connections*

16.9.3 Accepting Connections
----------------------------

When a server receives a connection request, it can complete the
connection by accepting the request.  Use the function 'accept' to do
this.

   A socket that has been established as a server can accept connection
requests from multiple clients.  The server's original socket _does not
become part of the connection_; instead, 'accept' makes a new socket
which participates in the connection.  'accept' returns the descriptor
for this socket.  The server's original socket remains available for
listening for further connection requests.

   The number of pending connection requests on a server socket is
finite.  If connection requests arrive from clients faster than the
server can act upon them, the queue can fill up and additional requests
are refused with an 'ECONNREFUSED' error.  You can specify the maximum
length of this queue as an argument to the 'listen' function, although
the system may also impose its own internal limit on the length of this
queue.

 -- Function: int accept (int SOCKET, struct sockaddr *ADDR, socklen_t
          *LENGTH_PTR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe fd | *Note POSIX Safety
     Concepts::.

     This function is used to accept a connection request on the server
     socket SOCKET.

     The 'accept' function waits if there are no connections pending,
     unless the socket SOCKET has nonblocking mode set.  (You can use
     'select' to wait for a pending connection, with a nonblocking
     socket.)  *Note File Status Flags::, for information about
     nonblocking mode.

     The ADDR and LENGTH-PTR arguments are used to return information
     about the name of the client socket that initiated the connection.
     *Note Socket Addresses::, for information about the format of the
     information.

     Accepting a connection does not make SOCKET part of the connection.
     Instead, it creates a new socket which becomes connected.  The
     normal return value of 'accept' is the file descriptor for the new
     socket.

     After 'accept', the original socket SOCKET remains open and
     unconnected, and continues listening until you close it.  You can
     accept further connections with SOCKET by calling 'accept' again.

     If an error occurs, 'accept' returns  -1’.  The following ‘errno’
     error conditions are defined for this function:

     'EBADF'
          The SOCKET argument is not a valid file descriptor.

     'ENOTSOCK'
          The descriptor SOCKET argument is not a socket.

     'EOPNOTSUPP'
          The descriptor SOCKET does not support this operation.

     'EWOULDBLOCK'
          SOCKET has nonblocking mode set, and there are no pending
          connections immediately available.

     This function is defined as a cancellation point in multi-threaded
     programs, so one has to be prepared for this and make sure that
     allocated resources (like memory, file descriptors, semaphores or
     whatever) are freed even if the thread is canceled.

   The 'accept' function is not allowed for sockets using connectionless
communication styles.

==============================================================================
File: libc.info,  Node: |Who_is_Connected|,  Next: |Transferring_Data|,  Prev: |Accepting_Connections|,  Up: |Connections|
==============================================================================

                                                              *Who_is_Connected*

16.9.4 Who is Connected to Me?
------------------------------

 -- Function: int getpeername (int SOCKET, struct sockaddr *ADDR,
          socklen_t *LENGTH-PTR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'getpeername' function returns the address of the socket that
     SOCKET is connected to; it stores the address in the memory space
     specified by ADDR and LENGTH-PTR.  It stores the length of the
     address in '*LENGTH-PTR'.

     *Note Socket Addresses::, for information about the format of the
     address.  In some operating systems, 'getpeername' works only for
     sockets in the Internet domain.

     The return value is '0' on success and  -1’ on error.  The
     following 'errno' error conditions are defined for this function:

     'EBADF'
          The argument SOCKET is not a valid file descriptor.

     'ENOTSOCK'
          The descriptor SOCKET is not a socket.

     'ENOTCONN'
          The socket SOCKET is not connected.

     'ENOBUFS'
          There are not enough internal buffers available.

==============================================================================
File: libc.info,  Node: |Transferring_Data|,  Next: |Byte_Stream_Example|,  Prev: |Who_is_Connected|,  Up: |Connections|
==============================================================================

                                                             *Transferring_Data*

16.9.5 Transferring Data
------------------------

Once a socket has been connected to a peer, you can use the ordinary
'read' and  write’ operations (*note I/O Primitives::) to transfer data.
A socket is a two-way communications channel, so read and write
operations can be performed at either end.

   There are also some I/O modes that are specific to socket operations.
In order to specify these modes, you must use the 'recv' and  send’
functions instead of the more generic 'read' and  write’ functions.  The
'recv' and  send’ functions take an additional argument which you can
use to specify various flags to control special I/O modes.  For example,
you can specify the 'MSG_OOB' flag to read or write out-of-band data,
the 'MSG_PEEK' flag to peek at input, or the  MSG_DONTROUTE’ flag to
control inclusion of routing information on output.

MENU

* |Sending_Data|::		Sending data with 'send'.
* |Receiving_Data|::		Reading data with 'recv'.
* |Socket_Data_Options|::		Using 'send' and  recv’.

==============================================================================
File: libc.info,  Node: |Sending_Data|,  Next: |Receiving_Data|,  Up: |Transferring_Data|
==============================================================================

                                                                  *Sending_Data*

16.9.5.1 Sending Data
---------------------

The 'send' function is declared in the header file  sys/socket.h’.  If
your FLAGS argument is zero, you can just as well use 'write' instead of
'send'; see *note I/O Primitives::.  If the socket was connected but the
connection has broken, you get a 'SIGPIPE' signal for any use of  send’
or 'write' (*note Miscellaneous Signals::).

 -- Function: ssize_t send (int SOCKET, const void *BUFFER, size_t SIZE,
          int FLAGS)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'send' function is like  write’, but with the additional flags
     FLAGS.  The possible values of FLAGS are described in *note Socket
     Data Options::.

     This function returns the number of bytes transmitted, or '-1' on
     failure.  If the socket is nonblocking, then 'send' (like  write’)
     can return after sending just part of the data.  *Note File Status
     Flags::, for information about nonblocking mode.

     Note, however, that a successful return value merely indicates that
     the message has been sent without error, not necessarily that it
     has been received without error.

     The following 'errno' error conditions are defined for this
     function:

     'EBADF'
          The SOCKET argument is not a valid file descriptor.

     'EINTR'
          The operation was interrupted by a signal before any data was
          sent.  *Note Interrupted Primitives::.

     'ENOTSOCK'
          The descriptor SOCKET is not a socket.

     'EMSGSIZE'
          The socket type requires that the message be sent atomically,
          but the message is too large for this to be possible.

     'EWOULDBLOCK'
          Nonblocking mode has been set on the socket, and the write
          operation would block.  (Normally 'send' blocks until the
          operation can be completed.)

     'ENOBUFS'
          There is not enough internal buffer space available.

     'ENOTCONN'
          You never connected this socket.

     'EPIPE'
          This socket was connected but the connection is now broken.
          In this case, 'send' generates a  SIGPIPE’ signal first; if
          that signal is ignored or blocked, or if its handler returns,
          then 'send' fails with  EPIPE’.

     This function is defined as a cancellation point in multi-threaded
     programs, so one has to be prepared for this and make sure that
     allocated resources (like memory, file descriptors, semaphores or
     whatever) are freed even if the thread is canceled.

==============================================================================
File: libc.info,  Node: |Receiving_Data|,  Next: |Socket_Data_Options|,  Prev: |Sending_Data|,  Up: |Transferring_Data|
==============================================================================

                                                                *Receiving_Data*

16.9.5.2 Receiving Data
-----------------------

The 'recv' function is declared in the header file  sys/socket.h’.  If
your FLAGS argument is zero, you can just as well use 'read' instead of
'recv'; see *note I/O Primitives::.

 -- Function: ssize_t recv (int SOCKET, void *BUFFER, size_t SIZE, int
          FLAGS)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'recv' function is like  read’, but with the additional flags
     FLAGS.  The possible values of FLAGS are described in *note Socket
     Data Options::.

     If nonblocking mode is set for SOCKET, and no data are available to
     be read, 'recv' fails immediately rather than waiting.  *Note File
     Status Flags::, for information about nonblocking mode.

     This function returns the number of bytes received, or '-1' on
     failure.  The following 'errno' error conditions are defined for
     this function:

     'EBADF'
          The SOCKET argument is not a valid file descriptor.

     'ENOTSOCK'
          The descriptor SOCKET is not a socket.

     'EWOULDBLOCK'
          Nonblocking mode has been set on the socket, and the read
          operation would block.  (Normally, 'recv' blocks until there
          is input available to be read.)

     'EINTR'
          The operation was interrupted by a signal before any data was
          read.  *Note Interrupted Primitives::.

     'ENOTCONN'
          You never connected this socket.

     This function is defined as a cancellation point in multi-threaded
     programs, so one has to be prepared for this and make sure that
     allocated resources (like memory, file descriptors, semaphores or
     whatever) are freed even if the thread is canceled.

==============================================================================
File: libc.info,  Node: |Socket_Data_Options|,  Prev: |Receiving_Data|,  Up: |Transferring_Data|
==============================================================================

                                                           *Socket_Data_Options*

16.9.5.3 Socket Data Options
----------------------------

The FLAGS argument to 'send' and  recv’ is a bit mask.  You can
bitwise-OR the values of the following macros together to obtain a value
for this argument.  All are defined in the header file 'sys/socket.h'.

 -- Macro: int MSG_OOB
     Send or receive out-of-band data.  *Note Out-of-Band Data::.

 -- Macro: int MSG_PEEK
     Look at the data but don't remove it from the input queue.  This is
     only meaningful with input functions such as 'recv', not with
     'send'.

 -- Macro: int MSG_DONTROUTE
     Don't include routing information in the message.  This is only
     meaningful with output operations, and is usually only of interest
     for diagnostic or routing programs.  We don't try to explain it
     here.

==============================================================================
File: libc.info,  Node: |Byte_Stream_Example|,  Next: |Server_Example|,  Prev: |Transferring_Data|,  Up: |Connections|
==============================================================================

                                                           *Byte_Stream_Example*

16.9.6 Byte Stream Socket Example
---------------------------------

Here is an example client program that makes a connection for a byte
stream socket in the Internet namespace.  It doesn't do anything
particularly interesting once it has connected to the server; it just
sends a text string to the server and exits.

   This program uses 'init_sockaddr' to set up the socket address; see
*note Inet Example::.


     #include <stdio.h>
     #include <errno.h>
     #include <stdlib.h>
     #include <unistd.h>
     #include <sys/types.h>
     #include <sys/socket.h>
     #include <netinet/in.h>
     #include <netdb.h>

     #define PORT            5555
     #define MESSAGE         "Yow!!! Are we having fun yet?!?"
     #define SERVERHOST      "www.gnu.org"

     void
     write_to_server (int filedes)
     {
       int nbytes;

       nbytes = write (filedes, MESSAGE, strlen (MESSAGE) + 1);
       if (nbytes < 0)
         {
           perror ("write");
           exit (EXIT_FAILURE);
         }
     }


     int
     main (void)
     {
       extern void init_sockaddr (struct sockaddr_in *name,
                                  const char *hostname,
                                  uint16_t port);
       int sock;
       struct sockaddr_in servername;

       /* Create the socket. */
       sock = socket (PF_INET, SOCK_STREAM, 0);
       if (sock < 0)
         {
           perror ("socket (client)");
           exit (EXIT_FAILURE);
         }

       /* Connect to the server. */
       init_sockaddr (&servername, SERVERHOST, PORT);
       if (0 > connect (sock,
                        (struct sockaddr *) &servername,
                        sizeof (servername)))
         {
           perror ("connect (client)");
           exit (EXIT_FAILURE);
         }

       /* Send data to the server. */
       write_to_server (sock);
       close (sock);
       exit (EXIT_SUCCESS);
     }

==============================================================================
File: libc.info,  Node: |Server_Example|,  Next: |Out_of_Band_Data|,  Prev: |Byte_Stream_Example|,  Up: |Connections|
==============================================================================

                                                                *Server_Example*

16.9.7 Byte Stream Connection Server Example
--------------------------------------------

The server end is much more complicated.  Since we want to allow
multiple clients to be connected to the server at the same time, it
would be incorrect to wait for input from a single client by simply
calling 'read' or  recv’.  Instead, the right thing to do is to use
'select' (*note Waiting for I/O::) to wait for input on all of the open
sockets.  This also allows the server to deal with additional connection
requests.

   This particular server doesn't do anything interesting once it has
gotten a message from a client.  It does close the socket for that
client when it detects an end-of-file condition (resulting from the
client shutting down its end of the connection).

   This program uses 'make_socket' to set up the socket address; see
*note Inet Example::.


     #include <stdio.h>
     #include <errno.h>
     #include <stdlib.h>
     #include <unistd.h>
     #include <sys/types.h>
     #include <sys/socket.h>
     #include <netinet/in.h>
     #include <netdb.h>

     #define PORT    5555
     #define MAXMSG  512

     int
     read_from_client (int filedes)
     {
       char buffer[MAXMSG];
       int nbytes;

       nbytes = read (filedes, buffer, MAXMSG);
       if (nbytes < 0)
         {
           /* Read error. */
           perror ("read");
           exit (EXIT_FAILURE);
         }
       else if (nbytes == 0)
         /* End-of-file. */
         return -1;
       else
         {
           /* Data read. */
           fprintf (stderr, "Server: got message: `%s'\n", buffer);
           return 0;
         }
     }

     int
     main (void)
     {
       extern int make_socket (uint16_t port);
       int sock;
       fd_set active_fd_set, read_fd_set;
       int i;
       struct sockaddr_in clientname;
       size_t size;

       /* Create the socket and set it up to accept connections. */
       sock = make_socket (PORT);
       if (listen (sock, 1) < 0)
         {
           perror ("listen");
           exit (EXIT_FAILURE);
         }

       /* Initialize the set of active sockets. */
       FD_ZERO (&active_fd_set);
       FD_SET (sock, &active_fd_set);

       while (1)
         {
           /* Block until input arrives on one or more active sockets. */
           read_fd_set = active_fd_set;
           if (select (FD_SETSIZE, &read_fd_set, NULL, NULL, NULL) < 0)
             {
               perror ("select");
               exit (EXIT_FAILURE);
             }

           /* Service all the sockets with input pending. */
           for (i = 0; i < FD_SETSIZE; ++i)
             if (FD_ISSET (i, &read_fd_set))
               {
                 if (i == sock)
                   {
                     /* Connection request on original socket. */
                     int new;
                     size = sizeof (clientname);
                     new = accept (sock,
                                   (struct sockaddr *) &clientname,
                                   &size);
                     if (new < 0)
                       {
                         perror ("accept");
                         exit (EXIT_FAILURE);
                       }
                     fprintf (stderr,
                              "Server: connect from host %s, port %hd.\n",
                              inet_ntoa (clientname.sin_addr),
                              ntohs (clientname.sin_port));
                     FD_SET (new, &active_fd_set);
                   }
                 else
                   {
                     /* Data arriving on an already-connected socket. */
                     if (read_from_client (i) < 0)
                       {
                         close (i);
                         FD_CLR (i, &active_fd_set);
                       }
                   }
               }
         }
     }

==============================================================================
File: libc.info,  Node: |Out_of_Band_Data|,  Prev: |Server_Example|,  Up: |Connections|
==============================================================================

                                                              *Out_of_Band_Data*

16.9.8 Out-of-Band Data
-----------------------

Streams with connections permit 'out-of-band' data that is delivered
with higher priority than ordinary data.  Typically the reason for
sending out-of-band data is to send notice of an exceptional condition.
To send out-of-band data use 'send', specifying the flag  MSG_OOB’
(*note Sending Data::).

   Out-of-band data are received with higher priority because the
receiving process need not read it in sequence; to read the next
available out-of-band data, use 'recv' with the  MSG_OOB’ flag (*note
Receiving Data::).  Ordinary read operations do not read out-of-band
data; they read only ordinary data.

   When a socket finds that out-of-band data are on their way, it sends
a 'SIGURG' signal to the owner process or process group of the socket.
You can specify the owner using the 'F_SETOWN' command to the  fcntl’
function; see *note Interrupt Input::.  You must also establish a
handler for this signal, as described in *note Signal Handling::, in
order to take appropriate action such as reading the out-of-band data.

   Alternatively, you can test for pending out-of-band data, or wait
until there is out-of-band data, using the 'select' function; it can
wait for an exceptional condition on the socket.  *Note Waiting for
I/O::, for more information about 'select'.

   Notification of out-of-band data (whether with 'SIGURG' or with
'select') indicates that out-of-band data are on the way; the data may
not actually arrive until later.  If you try to read the out-of-band
data before it arrives, 'recv' fails with an  EWOULDBLOCK’ error.

   Sending out-of-band data automatically places a 'mark' in the stream
of ordinary data, showing where in the sequence the out-of-band data
'would have been'.  This is useful when the meaning of out-of-band data
is 'cancel everything sent so far'.  Here is how you can test, in the
receiving process, whether any ordinary data was sent before the mark:

     success = ioctl (socket, SIOCATMARK, &atmark);

   The 'integer' variable ATMARK is set to a nonzero value if the
socket's read pointer has reached the 'mark'.

   Here's a function to discard any ordinary data preceding the
out-of-band mark:

     int
     discard_until_mark (int socket)
     {
       while (1)
         {
           /* This is not an arbitrary limit; any size will do.  */
           char buffer[1024];
           int atmark, success;

           /* If we have reached the mark, return.  */
           success = ioctl (socket, SIOCATMARK, &atmark);
           if (success < 0)
             perror ("ioctl");
           if (result)
             return;

           /* Otherwise, read a bunch of ordinary data and discard it.
              This is guaranteed not to read past the mark
              if it starts before the mark.  */
           success = read (socket, buffer, sizeof buffer);
           if (success < 0)
             perror ("read");
         }
     }

   If you don't want to discard the ordinary data preceding the mark,
you may need to read some of it anyway, to make room in internal system
buffers for the out-of-band data.  If you try to read out-of-band data
and get an 'EWOULDBLOCK' error, try reading some ordinary data (saving
it so that you can use it when you want it) and see if that makes room.
Here is an example:

     struct buffer
     {
       char *buf;
       int size;
       struct buffer *next;
     };

     /* Read the out-of-band data from SOCKET and return it
        as a 'struct buffer', which records the address of the data
        and its size.

        It may be necessary to read some ordinary data
        in order to make room for the out-of-band data.
        If so, the ordinary data are saved as a chain of buffers
        found in the 'next' field of the value.  */

     struct buffer *
     read_oob (int socket)
     {
       struct buffer *tail = 0;
       struct buffer *list = 0;

       while (1)
         {
           /* This is an arbitrary limit.
              Does anyone know how to do this without a limit?  */
     #define BUF_SZ 1024
           char *buf = (char *) xmalloc (BUF_SZ);
           int success;
           int atmark;

           /* Try again to read the out-of-band data.  */
           success = recv (socket, buf, BUF_SZ, MSG_OOB);
           if (success >= 0)
             {
               /* We got it, so return it.  */
               struct buffer *link
                 = (struct buffer *) xmalloc (sizeof (struct buffer));
               link->buf = buf;
               link->size = success;
               link->next = list;
               return link;
             }

           /* If we fail, see if we are at the mark.  */
           success = ioctl (socket, SIOCATMARK, &atmark);
           if (success < 0)
             perror ("ioctl");
           if (atmark)
             {
               /* At the mark; skipping past more ordinary data cannot help.
                  So just wait a while.  */
               sleep (1);
               continue;
             }

           /* Otherwise, read a bunch of ordinary data and save it.
              This is guaranteed not to read past the mark
              if it starts before the mark.  */
           success = read (socket, buf, BUF_SZ);
           if (success < 0)
             perror ("read");

           /* Save this data in the buffer list.  */
           {
             struct buffer *link
               = (struct buffer *) xmalloc (sizeof (struct buffer));
             link->buf = buf;
             link->size = success;

             /* Add the new link to the end of the list.  */
             if (tail)
               tail->next = link;
             else
               list = link;
             tail = link;
           }
         }
     }

==============================================================================
File: libc.info,  Node: |Datagrams|,  Next: |Inetd|,  Prev: |Connections|,  Up: |Sockets|
==============================================================================

                                                                     *Datagrams*

16.10 Datagram Socket Operations
--------------------------------

This section describes how to use communication styles that don't use
connections (styles 'SOCK_DGRAM' and  SOCK_RDM’).  Using these styles,
you group data into packets and each packet is an independent
communication.  You specify the destination for each packet
individually.

   Datagram packets are like letters: you send each one independently
with its own destination address, and they may arrive in the wrong order
or not at all.

   The 'listen' and  accept’ functions are not allowed for sockets using
connectionless communication styles.

MENU

* |Sending_Datagrams|::    Sending packets on a datagram socket.
* |Receiving_Datagrams|::  Receiving packets on a datagram socket.
* |Datagram_Example|::     An example program: packets sent over a
                           datagram socket in the local namespace.
* |Example_Receiver|::	 Another program, that receives those packets.

==============================================================================
File: libc.info,  Node: |Sending_Datagrams|,  Next: |Receiving_Datagrams|,  Up: |Datagrams|
==============================================================================

                                                             *Sending_Datagrams*

16.10.1 Sending Datagrams
-------------------------

The normal way of sending data on a datagram socket is by using the
'sendto' function, declared in  sys/socket.h’.

   You can call 'connect' on a datagram socket, but this only specifies
a default destination for further data transmission on the socket.  When
a socket has a default destination you can use 'send' (*note Sending
Data::) or even 'write' (*note I/O Primitives::) to send a packet there.
You can cancel the default destination by calling 'connect' using an
address format of 'AF_UNSPEC' in the ADDR argument.  *Note Connecting::,
for more information about the 'connect' function.

 -- Function: ssize_t sendto (int SOCKET, const void *BUFFER, size_t
          SIZE, int FLAGS, struct sockaddr *ADDR, socklen_t LENGTH)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'sendto' function transmits the data in the BUFFER through the
     socket SOCKET to the destination address specified by the ADDR and
     LENGTH arguments.  The SIZE argument specifies the number of bytes
     to be transmitted.

     The FLAGS are interpreted the same way as for 'send'; see *note
     Socket Data Options::.

     The return value and error conditions are also the same as for
     'send', but you cannot rely on the system to detect errors and
     report them; the most common error is that the packet is lost or
     there is no-one at the specified address to receive it, and the
     operating system on your machine usually does not know this.

     It is also possible for one call to 'sendto' to report an error
     owing to a problem related to a previous call.

     This function is defined as a cancellation point in multi-threaded
     programs, so one has to be prepared for this and make sure that
     allocated resources (like memory, file descriptors, semaphores or
     whatever) are freed even if the thread is canceled.

==============================================================================
File: libc.info,  Node: |Receiving_Datagrams|,  Next: |Datagram_Example|,  Prev: |Sending_Datagrams|,  Up: |Datagrams|
==============================================================================

                                                           *Receiving_Datagrams*

16.10.2 Receiving Datagrams
---------------------------

The 'recvfrom' function reads a packet from a datagram socket and also
tells you where it was sent from.  This function is declared in
'sys/socket.h'.

 -- Function: ssize_t recvfrom (int SOCKET, void *BUFFER, size_t SIZE,
          int FLAGS, struct sockaddr *ADDR, socklen_t *LENGTH-PTR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'recvfrom' function reads one packet from the socket SOCKET
     into the buffer BUFFER.  The SIZE argument specifies the maximum
     number of bytes to be read.

     If the packet is longer than SIZE bytes, then you get the first
     SIZE bytes of the packet and the rest of the packet is lost.
     There's no way to read the rest of the packet.  Thus, when you use
     a packet protocol, you must always know how long a packet to
     expect.

     The ADDR and LENGTH-PTR arguments are used to return the address
     where the packet came from.  *Note Socket Addresses::.  For a
     socket in the local domain the address information won't be
     meaningful, since you can't read the address of such a socket
     (*note Local Namespace::).  You can specify a null pointer as the
     ADDR argument if you are not interested in this information.

     The FLAGS are interpreted the same way as for 'recv' (*note Socket
     Data Options::).  The return value and error conditions are also
     the same as for 'recv'.

     This function is defined as a cancellation point in multi-threaded
     programs, so one has to be prepared for this and make sure that
     allocated resources (like memory, file descriptors, semaphores or
     whatever) are freed even if the thread is canceled.

   You can use plain 'recv' (*note Receiving Data::) instead of
'recvfrom' if you don t need to find out who sent the packet (either
because you know where it should come from or because you treat all
possible senders alike).  Even 'read' can be used if you don t want to
specify FLAGS (*note I/O Primitives::).

==============================================================================
File: libc.info,  Node: |Datagram_Example|,  Next: |Example_Receiver|,  Prev: |Receiving_Datagrams|,  Up: |Datagrams|
==============================================================================

                                                              *Datagram_Example*

16.10.3 Datagram Socket Example
-------------------------------

Here is a set of example programs that send messages over a datagram
stream in the local namespace.  Both the client and server programs use
the 'make_named_socket' function that was presented in *note Local
Socket Example::, to create and name their sockets.

   First, here is the server program.  It sits in a loop waiting for
messages to arrive, bouncing each message back to the sender.  Obviously
this isn't a particularly useful program, but it does show the general
ideas involved.


     #include <stdio.h>
     #include <errno.h>
     #include <stdlib.h>
     #include <sys/socket.h>
     #include <sys/un.h>

     #define SERVER  "/tmp/serversocket"
     #define MAXMSG  512

     int
     main (void)
     {
       int sock;
       char message[MAXMSG];
       struct sockaddr_un name;
       size_t size;
       int nbytes;

       /* Remove the filename first, it's ok if the call fails */
       unlink (SERVER);

       /* Make the socket, then loop endlessly. */
       sock = make_named_socket (SERVER);
       while (1)
         {
           /* Wait for a datagram. */
           size = sizeof (name);
           nbytes = recvfrom (sock, message, MAXMSG, 0,
                              (struct sockaddr *) & name, &size);
           if (nbytes < 0)
             {
               perror ("recfrom (server)");
               exit (EXIT_FAILURE);
             }

           /* Give a diagnostic message. */
           fprintf (stderr, "Server: got message: %s\n", message);

           /* Bounce the message back to the sender. */
           nbytes = sendto (sock, message, nbytes, 0,
                            (struct sockaddr *) & name, size);
           if (nbytes < 0)
             {
               perror ("sendto (server)");
               exit (EXIT_FAILURE);
             }
         }
     }

==============================================================================
File: libc.info,  Node: |Example_Receiver|,  Prev: |Datagram_Example|,  Up: |Datagrams|
==============================================================================

                                                              *Example_Receiver*

16.10.4 Example of Reading Datagrams
------------------------------------

Here is the client program corresponding to the server above.

   It sends a datagram to the server and then waits for a reply.  Notice
that the socket for the client (as well as for the server) in this
example has to be given a name.  This is so that the server can direct a
message back to the client.  Since the socket has no associated
connection state, the only way the server can do this is by referencing
the name of the client.


     #include <stdio.h>
     #include <errno.h>
     #include <unistd.h>
     #include <stdlib.h>
     #include <sys/socket.h>
     #include <sys/un.h>

     #define SERVER  "/tmp/serversocket"
     #define CLIENT  "/tmp/mysocket"
     #define MAXMSG  512
     #define MESSAGE "Yow!!! Are we having fun yet?!?"

     int
     main (void)
     {
       extern int make_named_socket (const char *name);
       int sock;
       char message[MAXMSG];
       struct sockaddr_un name;
       size_t size;
       int nbytes;

       /* Make the socket. */
       sock = make_named_socket (CLIENT);

       /* Initialize the server socket address. */
       name.sun_family = AF_LOCAL;
       strcpy (name.sun_path, SERVER);
       size = strlen (name.sun_path) + sizeof (name.sun_family);

       /* Send the datagram. */
       nbytes = sendto (sock, MESSAGE, strlen (MESSAGE) + 1, 0,
                        (struct sockaddr *) & name, size);
       if (nbytes < 0)
         {
           perror ("sendto (client)");
           exit (EXIT_FAILURE);
         }

       /* Wait for a reply. */
       nbytes = recvfrom (sock, message, MAXMSG, 0, NULL, 0);
       if (nbytes < 0)
         {
           perror ("recfrom (client)");
           exit (EXIT_FAILURE);
         }

       /* Print a diagnostic message. */
       fprintf (stderr, "Client: got message: %s\n", message);

       /* Clean up. */
       remove (CLIENT);
       close (sock);
     }

   Keep in mind that datagram socket communications are unreliable.  In
this example, the client program waits indefinitely if the message never
reaches the server or if the server's response never comes back.  It s
up to the user running the program to kill and restart it if desired.  A
more automatic solution could be to use 'select' (*note Waiting for
I/O::) to establish a timeout period for the reply, and in case of
timeout either re-send the message or shut down the socket and exit.

==============================================================================
File: libc.info,  Node: |Inetd|,  Next: |Socket_Options|,  Prev: |Datagrams|,  Up: |Sockets|
==============================================================================

                                                                         *Inetd*

16.11 The 'inetd' Daemon
------------------------

We've explained above how to write a server program that does its own
listening.  Such a server must already be running in order for anyone to
connect to it.

   Another way to provide a service on an Internet port is to let the
daemon program 'inetd' do the listening.   inetd’ is a program that runs
all the time and waits (using 'select') for messages on a specified set
of ports.  When it receives a message, it accepts the connection (if the
socket style calls for connections) and then forks a child process to
run the corresponding server program.  You specify the ports and their
programs in the file '/etc/inetd.conf'.

MENU

* |Inetd_Servers|::
* |Configuring_Inetd|::

==============================================================================
File: libc.info,  Node: |Inetd_Servers|,  Next: |Configuring_Inetd|,  Up: |Inetd|
==============================================================================

                                                                 *Inetd_Servers*

16.11.1 'inetd' Servers
-----------------------

Writing a server program to be run by 'inetd' is very simple.  Each time
someone requests a connection to the appropriate port, a new server
process starts.  The connection already exists at this time; the socket
is available as the standard input descriptor and as the standard output
descriptor (descriptors 0 and 1) in the server process.  Thus the server
program can begin reading and writing data right away.  Often the
program needs only the ordinary I/O facilities; in fact, a
general-purpose filter program that knows nothing about sockets can work
as a byte stream server run by 'inetd'.

   You can also use 'inetd' for servers that use connectionless
communication styles.  For these servers, 'inetd' does not try to accept
a connection since no connection is possible.  It just starts the server
program, which can read the incoming datagram packet from descriptor 0.
The server program can handle one request and then exit, or you can
choose to write it to keep reading more requests until no more arrive,
and then exit.  You must specify which of these two techniques the
server uses when you configure 'inetd'.

==============================================================================
File: libc.info,  Node: |Configuring_Inetd|,  Prev: |Inetd_Servers|,  Up: |Inetd|
==============================================================================

                                                             *Configuring_Inetd*

16.11.2 Configuring 'inetd'
---------------------------

The file '/etc/inetd.conf' tells  inetd’ which ports to listen to and
what server programs to run for them.  Normally each entry in the file
is one line, but you can split it onto multiple lines provided all but
the first line of the entry start with whitespace.  Lines that start
with '#' are comments.

   Here are two standard entries in '/etc/inetd.conf':

     ftp	stream	tcp	nowait	root	/libexec/ftpd	ftpd
     talk	dgram	udp	wait	root	/libexec/talkd	talkd

   An entry has this format:

     SERVICE STYLE PROTOCOL WAIT USERNAME PROGRAM ARGUMENTS

   The SERVICE field says which service this program provides.  It
should be the name of a service defined in '/etc/services'.   inetd’
uses SERVICE to decide which port to listen on for this entry.

   The fields STYLE and PROTOCOL specify the communication style and the
protocol to use for the listening socket.  The style should be the name
of a communication style, converted to lower case and with 'SOCK_'
deleted for example, 'stream' or ‘dgram’.  PROTOCOL should be one of the
protocols listed in '/etc/protocols'.  The typical protocol names are
'tcp' for byte stream connections and  udp’ for unreliable datagrams.

   The WAIT field should be either 'wait' or  nowait’.  Use ‘wait’ if
STYLE is a connectionless style and the server, once started, handles
multiple requests as they come in.  Use 'nowait' if  inetd’ should start
a new process for each message or request that comes in.  If STYLE uses
connections, then WAIT must be 'nowait'.

   USER is the user name that the server should run as.  'inetd' runs as
root, so it can set the user ID of its children arbitrarily.  It's best
to avoid using 'root' for USER if you can; but some servers, such as
Telnet and FTP, read a username and password themselves.  These servers
need to be root initially so they can log in as commanded by the data
coming over the network.

   PROGRAM together with ARGUMENTS specifies the command to run to start
the server.  PROGRAM should be an absolute file name specifying the
executable file to run.  ARGUMENTS consists of any number of
whitespace-separated words, which become the command-line arguments of
PROGRAM.  The first word in ARGUMENTS is argument zero, which should by
convention be the program name itself (sans directories).

   If you edit '/etc/inetd.conf', you can tell  inetd’ to reread the
file and obey its new contents by sending the 'inetd' process the
'SIGHUP' signal.  You ll have to use ‘ps’ to determine the process ID of
the 'inetd' process as it is not fixed.

==============================================================================
File: libc.info,  Node: |Socket_Options|,  Next: |Networks_Database|,  Prev: |Inetd|,  Up: |Sockets|
==============================================================================

                                                                *Socket_Options*

16.12 Socket Options
--------------------

This section describes how to read or set various options that modify
the behavior of sockets and their underlying communications protocols.

   When you are manipulating a socket option, you must specify which
'level' the option pertains to.  This describes whether the option
applies to the socket interface, or to a lower-level communications
protocol interface.

MENU

* |Socket_Option_Functions|::     The basic functions for setting and getting
                                 socket options.
* |Socket_Level_Options|::        Details of the options at the socket level.

==============================================================================
File: libc.info,  Node: |Socket_Option_Functions|,  Next: |Socket_Level_Options|,  Up: |Socket_Options|
==============================================================================

                                                       *Socket_Option_Functions*

16.12.1 Socket Option Functions
-------------------------------

Here are the functions for examining and modifying socket options.  They
are declared in 'sys/socket.h'.

 -- Function: int getsockopt (int SOCKET, int LEVEL, int OPTNAME, void
          *OPTVAL, socklen_t *OPTLEN-PTR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'getsockopt' function gets information about the value of
     option OPTNAME at level LEVEL for socket SOCKET.

     The option value is stored in the buffer that OPTVAL points to.
     Before the call, you should supply in '*OPTLEN-PTR' the size of
     this buffer; on return, it contains the number of bytes of
     information actually stored in the buffer.

     Most options interpret the OPTVAL buffer as a single 'int' value.

     The actual return value of 'getsockopt' is  0’ on success and ‘-1’
     on failure.  The following 'errno' error conditions are defined:

     'EBADF'
          The SOCKET argument is not a valid file descriptor.

     'ENOTSOCK'
          The descriptor SOCKET is not a socket.

     'ENOPROTOOPT'
          The OPTNAME doesn't make sense for the given LEVEL.

 -- Function: int setsockopt (int SOCKET, int LEVEL, int OPTNAME, const
          void *OPTVAL, socklen_t OPTLEN)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function is used to set the socket option OPTNAME at level
     LEVEL for socket SOCKET.  The value of the option is passed in the
     buffer OPTVAL of size OPTLEN.

     The return value and error codes for 'setsockopt' are the same as
     for 'getsockopt'.

==============================================================================
File: libc.info,  Node: |Socket_Level_Options|,  Prev: |Socket_Option_Functions|,  Up: |Socket_Options|
==============================================================================

                                                          *Socket_Level_Options*

16.12.2 Socket-Level Options
----------------------------

 -- Constant: int SOL_SOCKET
     Use this constant as the LEVEL argument to 'getsockopt' or
     'setsockopt' to manipulate the socket-level options described in
     this section.

Here is a table of socket-level option names; all are defined in the
header file 'sys/socket.h'.

'SO_DEBUG'

     This option toggles recording of debugging information in the
     underlying protocol modules.  The value has type 'int'; a nonzero
     value means 'yes'.

'SO_REUSEADDR'
     This option controls whether 'bind' (*note Setting Address::)
     should permit reuse of local addresses for this socket.  If you
     enable this option, you can actually have two sockets with the same
     Internet port number; but the system won't allow you to use the two
     identically-named sockets in a way that would confuse the Internet.
     The reason for this option is that some higher-level Internet
     protocols, including FTP, require you to keep reusing the same port
     number.

     The value has type 'int'; a nonzero value means 'yes'.

'SO_KEEPALIVE'
     This option controls whether the underlying protocol should
     periodically transmit messages on a connected socket.  If the peer
     fails to respond to these messages, the connection is considered
     broken.  The value has type 'int'; a nonzero value means 'yes'.

'SO_DONTROUTE'
     This option controls whether outgoing messages bypass the normal
     message routing facilities.  If set, messages are sent directly to
     the network interface instead.  The value has type 'int'; a nonzero
     value means 'yes'.

'SO_LINGER'
     This option specifies what should happen when the socket of a type
     that promises reliable delivery still has untransmitted messages
     when it is closed; see *note Closing a Socket::.  The value has
     type 'struct linger'.

      -- Data Type: struct linger
          This structure type has the following members:

          'int l_onoff'
               This field is interpreted as a boolean.  If nonzero,
               'close' blocks until the data are transmitted or the
               timeout period has expired.

          'int l_linger'
               This specifies the timeout period, in seconds.

'SO_BROADCAST'
     This option controls whether datagrams may be broadcast from the
     socket.  The value has type 'int'; a nonzero value means 'yes'.

'SO_OOBINLINE'
     If this option is set, out-of-band data received on the socket is
     placed in the normal input queue.  This permits it to be read using
     'read' or  recv’ without specifying the ‘MSG_OOB’ flag.  *Note
     Out-of-Band Data::.  The value has type 'int'; a nonzero value
     means 'yes'.

'SO_SNDBUF'
     This option gets or sets the size of the output buffer.  The value
     is a 'size_t', which is the size in bytes.

'SO_RCVBUF'
     This option gets or sets the size of the input buffer.  The value
     is a 'size_t', which is the size in bytes.

'SO_STYLE'
'SO_TYPE'
     This option can be used with 'getsockopt' only.  It is used to get
     the socket's communication style.  'SO_TYPE  is the historical
     name, and 'SO_STYLE' is the preferred name in GNU. The value has
     type 'int' and its value designates a communication style; see
     *note Communication Styles::.

'SO_ERROR'

     This option can be used with 'getsockopt' only.  It is used to
     reset the error status of the socket.  The value is an 'int', which
     represents the previous error status.

==============================================================================
File: libc.info,  Node: |Networks_Database|,  Prev: Socket Options,  Up:
==============================================================================
|Sockets|

                                                             *Networks_Database*

16.13 Networks Database
-----------------------

Many systems come with a database that records a list of networks known
to the system developer.  This is usually kept either in the file
'/etc/networks' or in an equivalent from a name server.  This data base
is useful for routing programs such as 'route', but it is not useful for
programs that simply communicate over the network.  We provide functions
to access this database, which are declared in 'netdb.h'.

 -- Data Type: struct netent
     This data type is used to represent information about entries in
     the networks database.  It has the following members:

     'char *n_name'
          This is the 'official' name of the network.

     'char **n_aliases'
          These are alternative names for the network, represented as a
          vector of strings.  A null pointer terminates the array.

     'int n_addrtype'
          This is the type of the network number; this is always equal
          to 'AF_INET' for Internet networks.

     'unsigned long int n_net'
          This is the network number.  Network numbers are returned in
          host byte order; see *note Byte Order::.

   Use the 'getnetbyname' or  getnetbyaddr’ functions to search the
networks database for information about a specific network.  The
information is returned in a statically-allocated structure; you must
copy the information if you need to save it.

 -- Function: struct netent * getnetbyname (const char *NAME)
     Preliminary: | MT-Unsafe race:netbyname env locale | AS-Unsafe
     dlopen plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note
     POSIX Safety Concepts::.

     The 'getnetbyname' function returns information about the network
     named NAME.  It returns a null pointer if there is no such network.

 -- Function: struct netent * getnetbyaddr (uint32_t NET, int TYPE)
     Preliminary: | MT-Unsafe race:netbyaddr locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     The 'getnetbyaddr' function returns information about the network
     of type TYPE with number NET.  You should specify a value of
     'AF_INET' for the TYPE argument for Internet networks.

     'getnetbyaddr' returns a null pointer if there is no such network.

   You can also scan the networks database using 'setnetent',
'getnetent' and  endnetent’.  Be careful when using these functions
because they are not reentrant.

 -- Function: void setnetent (int STAYOPEN)
     Preliminary: | MT-Unsafe race:netent env locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     This function opens and rewinds the networks database.

     If the STAYOPEN argument is nonzero, this sets a flag so that
     subsequent calls to 'getnetbyname' or  getnetbyaddr’ will not close
     the database (as they usually would).  This makes for more
     efficiency if you call those functions several times, by avoiding
     reopening the database for each call.

 -- Function: struct netent * getnetent (void)
     Preliminary: | MT-Unsafe race:netent race:netentbuf env locale |
     AS-Unsafe dlopen plugin heap lock | AC-Unsafe corrupt lock fd mem |
     *Note POSIX Safety Concepts::.

     This function returns the next entry in the networks database.  It
     returns a null pointer if there are no more entries.

 -- Function: void endnetent (void)
     Preliminary: | MT-Unsafe race:netent env locale | AS-Unsafe dlopen
     plugin heap lock | AC-Unsafe corrupt lock fd mem | *Note POSIX
     Safety Concepts::.

     This function closes the networks database.

==============================================================================
File: libc.info,  Node: |Low_Level_Terminal_Interface|,  Next: |Syslog|,  Prev: |Sockets|,  Up: |Top|
==============================================================================

                                                  *Low_Level_Terminal_Interface*

17 Low-Level Terminal Interface
===============================

This chapter describes functions that are specific to terminal devices.
You can use these functions to do things like turn off input echoing;
set serial line characteristics such as line speed and flow control; and
change which characters are used for end-of-file, command-line editing,
sending signals, and similar control functions.

   Most of the functions in this chapter operate on file descriptors.
*Note Low-Level I/O::, for more information about what a file descriptor
is and how to open a file descriptor for a terminal device.

MENU

* |Is_It_a_Terminal|::            How to determine if a file is a terminal
			         device, and what its name is.
* |I/O_Queues|::                  About flow control and typeahead.
* |Canonical_or_Not|::            Two basic styles of input processing.
* |Terminal_Modes|::              How to examine and modify flags controlling
			         details of terminal I/O: echoing,
                                 signals, editing.  Posix.
* |BSD_Terminal_Modes|::          BSD compatible terminal mode setting
* |Line_Control|::                Sending break sequences, clearing
                                 terminal buffers ...
* |Noncanon_Example|::            How to read single characters without echo.
* |Pseudo_Terminals|::            How to open a pseudo-terminal.

==============================================================================
File: libc.info,  Node: |Is_It_a_Terminal|,  Next: |I/O_Queues|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                              *Is_It_a_Terminal*

17.1 Identifying Terminals
--------------------------

The functions described in this chapter only work on files that
correspond to terminal devices.  You can find out whether a file
descriptor is associated with a terminal by using the 'isatty' function.

   Prototypes for the functions in this section are declared in the
header file 'unistd.h'.

 -- Function: int isatty (int FILEDES)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns '1' if FILEDES is a file descriptor
     associated with an open terminal device, and 0 otherwise.

   If a file descriptor is associated with a terminal, you can get its
associated file name using the 'ttyname' function.  See also the
'ctermid' function, described in *note Identifying the Terminal::.

 -- Function: char * ttyname (int FILEDES)
     Preliminary: | MT-Unsafe race:ttyname | AS-Unsafe heap lock |
     AC-Unsafe lock fd mem | *Note POSIX Safety Concepts::.

     If the file descriptor FILEDES is associated with a terminal
     device, the 'ttyname' function returns a pointer to a
     statically-allocated, null-terminated string containing the file
     name of the terminal file.  The value is a null pointer if the file
     descriptor isn't associated with a terminal, or the file name
     cannot be determined.

 -- Function: int ttyname_r (int FILEDES, char *BUF, size_t LEN)
     Preliminary: | MT-Safe | AS-Unsafe heap | AC-Unsafe mem fd | *Note
     POSIX Safety Concepts::.

     The 'ttyname_r' function is similar to the  ttyname’ function
     except that it places its result into the user-specified buffer
     starting at BUF with length LEN.

     The normal return value from 'ttyname_r' is 0.  Otherwise an error
     number is returned to indicate the error.  The following 'errno'
     error conditions are defined for this function:

     'EBADF'
          The FILEDES argument is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal.

     'ERANGE'
          The buffer length LEN is too small to store the string to be
          returned.

==============================================================================
File: libc.info,  Node: |I/O_Queues|,  Next: |Canonical_or_Not|,  Prev: |Is_It_a_Terminal|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                                    *I/O_Queues*

17.2 I/O Queues
---------------

Many of the remaining functions in this section refer to the input and
output queues of a terminal device.  These queues implement a form of
buffering _within the kernel_ independent of the buffering implemented
by I/O streams (*note I/O on Streams::).

   The 'terminal input queue' is also sometimes referred to as its
'typeahead buffer'.  It holds the characters that have been received
from the terminal but not yet read by any process.

   The size of the input queue is described by the 'MAX_INPUT' and
'_POSIX_MAX_INPUT' parameters; see *note Limits for Files::.  You are
guaranteed a queue size of at least 'MAX_INPUT', but the queue might be
larger, and might even dynamically change size.  If input flow control
is enabled by setting the 'IXOFF' input mode bit (*note Input Modes::),
the terminal driver transmits STOP and START characters to the terminal
when necessary to prevent the queue from overflowing.  Otherwise, input
may be lost if it comes in too fast from the terminal.  In canonical
mode, all input stays in the queue until a newline character is
received, so the terminal input queue can fill up when you type a very
long line.  *Note Canonical or Not::.

   The 'terminal output queue' is like the input queue, but for output;
it contains characters that have been written by processes, but not yet
transmitted to the terminal.  If output flow control is enabled by
setting the 'IXON' input mode bit (*note Input Modes::), the terminal
driver obeys START and STOP characters sent by the terminal to stop and
restart transmission of output.

   'Clearing' the terminal input queue means discarding any characters
that have been received but not yet read.  Similarly, clearing the
terminal output queue means discarding any characters that have been
written but not yet transmitted.

==============================================================================
File: libc.info,  Node: |Canonical_or_Not|,  Next: |Terminal_Modes|,  Prev: |I/O_Queues|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                              *Canonical_or_Not*

17.3 Two Styles of Input: Canonical or Not
------------------------------------------

POSIX systems support two basic modes of input: canonical and
noncanonical.

   In 'canonical input processing' mode, terminal input is processed in
lines terminated by newline (''\n''), EOF, or EOL characters.  No input
can be read until an entire line has been typed by the user, and the
'read' function (*note I/O Primitives::) returns at most a single line
of input, no matter how many bytes are requested.

   In canonical input mode, the operating system provides input editing
facilities: some characters are interpreted specially to perform editing
operations within the current line of text, such as ERASE and KILL.
*Note Editing Characters::.

   The constants '_POSIX_MAX_CANON' and  MAX_CANON’ parameterize the
maximum number of bytes which may appear in a single line of canonical
input.  *Note Limits for Files::.  You are guaranteed a maximum line
length of at least 'MAX_CANON' bytes, but the maximum might be larger,
and might even dynamically change size.

   In 'noncanonical input processing' mode, characters are not grouped
into lines, and ERASE and KILL processing is not performed.  The
granularity with which bytes are read in noncanonical input mode is
controlled by the MIN and TIME settings.  *Note Noncanonical Input::.

   Most programs use canonical input mode, because this gives the user a
way to edit input line by line.  The usual reason to use noncanonical
mode is when the program accepts single-character commands or provides
its own editing facilities.

   The choice of canonical or noncanonical input is controlled by the
'ICANON' flag in the  c_lflag’ member of ‘struct termios’.  *Note Local
Modes::.

==============================================================================
File: libc.info,  Node: |Terminal_Modes|,  Next: |BSD_Terminal_Modes|,  Prev: |Canonical_or_Not|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                                *Terminal_Modes*

17.4 Terminal Modes
-------------------

This section describes the various terminal attributes that control how
input and output are done.  The functions, data structures, and symbolic
constants are all declared in the header file 'termios.h'.

   Don't confuse terminal attributes with file attributes.  A device
special file which is associated with a terminal has file attributes as
described in *note File Attributes::.  These are unrelated to the
attributes of the terminal device itself, which are discussed in this
section.

MENU

* |Mode_Data_Types|::             The data type 'struct termios' and
                                 related types.
* |Mode_Functions|::              Functions to read and set the terminal
                                 attributes.
* |Setting_Modes|::               The right way to set terminal attributes
                                 reliably.
* |Input_Modes|::                 Flags controlling low-level input handling.
* |Output_Modes|::                Flags controlling low-level output handling.
* |Control_Modes|::               Flags controlling serial port behavior.
* |Local_Modes|::                 Flags controlling high-level input handling.
* |Line_Speed|::                  How to read and set the terminal line speed.
* |Special_Characters|::          Characters that have special effects,
			         and how to change them.
* |Noncanonical_Input|::          Controlling how long to wait for input.

==============================================================================
File: libc.info,  Node: |Mode_Data_Types|,  Next: |Mode_Functions|,  Up: |Terminal_Modes|
==============================================================================

                                                               *Mode_Data_Types*

17.4.1 Terminal Mode Data Types
-------------------------------

The entire collection of attributes of a terminal is stored in a
structure of type 'struct termios'.  This structure is used with the
functions 'tcgetattr' and  tcsetattr’ to read and set the attributes.

 -- Data Type: struct termios
     A 'struct termios' records all the I/O attributes of a terminal.
     The structure includes at least the following members:

     'tcflag_t c_iflag'
          A bit mask specifying flags for input modes; see *note Input
          Modes::.

     'tcflag_t c_oflag'
          A bit mask specifying flags for output modes; see *note Output
          Modes::.

     'tcflag_t c_cflag'
          A bit mask specifying flags for control modes; see *note
          Control Modes::.

     'tcflag_t c_lflag'
          A bit mask specifying flags for local modes; see *note Local
          Modes::.

     'cc_t c_cc[NCCS]'
          An array specifying which characters are associated with
          various control functions; see *note Special Characters::.

     The 'struct termios' structure also contains members which encode
     input and output transmission speeds, but the representation is not
     specified.  *Note Line Speed::, for how to examine and store the
     speed values.

   The following sections describe the details of the members of the
'struct termios' structure.

 -- Data Type: tcflag_t
     This is an unsigned integer type used to represent the various bit
     masks for terminal flags.

 -- Data Type: cc_t
     This is an unsigned integer type used to represent characters
     associated with various terminal control functions.

 -- Macro: int NCCS
     The value of this macro is the number of elements in the 'c_cc'
     array.

==============================================================================
File: libc.info,  Node: |Mode_Functions|,  Next: |Setting_Modes|,  Prev: |Mode_Data_Types|,  Up: |Terminal_Modes|
==============================================================================

                                                                *Mode_Functions*

17.4.2 Terminal Mode Functions
------------------------------

 -- Function: int tcgetattr (int FILEDES, struct termios *TERMIOS-P)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function is used to examine the attributes of the terminal
     device with file descriptor FILEDES.  The attributes are returned
     in the structure that TERMIOS-P points to.

     If successful, 'tcgetattr' returns 0.  A return value of -1
     indicates an error.  The following 'errno' error conditions are
     defined for this function:

     'EBADF'
          The FILEDES argument is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal.

 -- Function: int tcsetattr (int FILEDES, int WHEN, const struct termios
          *TERMIOS-P)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function sets the attributes of the terminal device with file
     descriptor FILEDES.  The new attributes are taken from the
     structure that TERMIOS-P points to.

     The WHEN argument specifies how to deal with input and output
     already queued.  It can be one of the following values:

     'TCSANOW'
          Make the change immediately.

     'TCSADRAIN'
          Make the change after waiting until all queued output has been
          written.  You should usually use this option when changing
          parameters that affect output.

     'TCSAFLUSH'
          This is like 'TCSADRAIN', but also discards any queued input.

     'TCSASOFT'
          This is a flag bit that you can add to any of the above
          alternatives.  Its meaning is to inhibit alteration of the
          state of the terminal hardware.  It is a BSD extension; it is
          only supported on BSD systems and GNU/Hurd systems.

          Using 'TCSASOFT' is exactly the same as setting the  CIGNORE’
          bit in the 'c_cflag' member of the structure TERMIOS-P points
          to.  *Note Control Modes::, for a description of 'CIGNORE'.

     If this function is called from a background process on its
     controlling terminal, normally all processes in the process group
     are sent a 'SIGTTOU' signal, in the same way as if the process were
     trying to write to the terminal.  The exception is if the calling
     process itself is ignoring or blocking 'SIGTTOU' signals, in which
     case the operation is performed and no signal is sent.  *Note Job
     Control::.

     If successful, 'tcsetattr' returns 0.  A return value of -1
     indicates an error.  The following 'errno' error conditions are
     defined for this function:

     'EBADF'
          The FILEDES argument is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal.

     'EINVAL'
          Either the value of the 'when' argument is not valid, or there
          is something wrong with the data in the TERMIOS-P argument.

   Although 'tcgetattr' and  tcsetattr’ specify the terminal device with
a file descriptor, the attributes are those of the terminal device
itself and not of the file descriptor.  This means that the effects of
changing terminal attributes are persistent; if another process opens
the terminal file later on, it will see the changed attributes even
though it doesn't have anything to do with the open file descriptor you
originally specified in changing the attributes.

   Similarly, if a single process has multiple or duplicated file
descriptors for the same terminal device, changing the terminal
attributes affects input and output to all of these file descriptors.
This means, for example, that you can't open one file descriptor or
stream to read from a terminal in the normal line-buffered, echoed mode;
and simultaneously have another file descriptor for the same terminal
that you use to read from it in single-character, non-echoed mode.
Instead, you have to explicitly switch the terminal back and forth
between the two modes.

==============================================================================
File: libc.info,  Node: |Setting_Modes|,  Next: |Input_Modes|,  Prev: |Mode_Functions|,  Up: |Terminal_Modes|
==============================================================================

                                                                 *Setting_Modes*

17.4.3 Setting Terminal Modes Properly
--------------------------------------

When you set terminal modes, you should call 'tcgetattr' first to get
the current modes of the particular terminal device, modify only those
modes that you are really interested in, and store the result with
'tcsetattr'.

   It's a bad idea to simply initialize a 'struct termios  structure to
a chosen set of attributes and pass it directly to 'tcsetattr'.  Your
program may be run years from now, on systems that support members not
documented in this manual.  The way to avoid setting these members to
unreasonable values is to avoid changing them.

   What's more, different terminal devices may require different mode
settings in order to function properly.  So you should avoid blindly
copying attributes from one terminal device to another.

   When a member contains a collection of independent flags, as the
'c_iflag',  c_oflag’ and ‘c_cflag’ members do, even setting the entire
member is a bad idea, because particular operating systems have their
own flags.  Instead, you should start with the current value of the
member and alter only the flags whose values matter in your program,
leaving any other flags unchanged.

   Here is an example of how to set one flag ('ISTRIP') in the  struct
termios' structure while properly preserving all the other data in the
structure:

     int
     set_istrip (int desc, int value)
     {
       struct termios settings;
       int result;

       result = tcgetattr (desc, &settings);
       if (result < 0)
         {
           perror ("error in tcgetattr");
           return 0;
         }
       settings.c_iflag &= ~ISTRIP;
       if (value)
         settings.c_iflag |= ISTRIP;
       result = tcsetattr (desc, TCSANOW, &settings);
       if (result < 0)
         {
           perror ("error in tcsetattr");
           return 0;
        }
       return 1;
     }

==============================================================================
File: libc.info,  Node: |Input_Modes|,  Next: |Output_Modes|,  Prev: |Setting_Modes|,  Up: |Terminal_Modes|
==============================================================================

                                                                   *Input_Modes*

17.4.4 Input Modes
------------------

This section describes the terminal attribute flags that control fairly
low-level aspects of input processing: handling of parity errors, break
signals, flow control, and <RET> and <LFD> characters.

   All of these flags are bits in the 'c_iflag' member of the  struct
termios' structure.  The member is an integer, and you change flags
using the operators '&',  |’ and ‘^’.  Don’t try to specify the entire
value for 'c_iflag' instead, change only specific flags and leave the
rest untouched (*note Setting Modes::).

 -- Macro: tcflag_t INPCK
     If this bit is set, input parity checking is enabled.  If it is not
     set, no checking at all is done for parity errors on input; the
     characters are simply passed through to the application.

     Parity checking on input processing is independent of whether
     parity detection and generation on the underlying terminal hardware
     is enabled; see *note Control Modes::.  For example, you could
     clear the 'INPCK' input mode flag and set the  PARENB’ control mode
     flag to ignore parity errors on input, but still generate parity on
     output.

     If this bit is set, what happens when a parity error is detected
     depends on whether the 'IGNPAR' or  PARMRK’ bits are set.  If
     neither of these bits are set, a byte with a parity error is passed
     to the application as a ''\0'' character.

 -- Macro: tcflag_t IGNPAR
     If this bit is set, any byte with a framing or parity error is
     ignored.  This is only useful if 'INPCK' is also set.

 -- Macro: tcflag_t PARMRK
     If this bit is set, input bytes with parity or framing errors are
     marked when passed to the program.  This bit is meaningful only
     when 'INPCK' is set and  IGNPAR’ is not set.

     The way erroneous bytes are marked is with two preceding bytes,
     '377' and  0’.  Thus, the program actually reads three bytes for
     one erroneous byte received from the terminal.

     If a valid byte has the value '0377', and  ISTRIP’ (see below) is
     not set, the program might confuse it with the prefix that marks a
     parity error.  So a valid byte '0377' is passed to the program as
     two bytes, '0377'  0377’, in this case.

 -- Macro: tcflag_t ISTRIP
     If this bit is set, valid input bytes are stripped to seven bits;
     otherwise, all eight bits are available for programs to read.

 -- Macro: tcflag_t IGNBRK
     If this bit is set, break conditions are ignored.

     A 'break condition' is defined in the context of asynchronous
     serial data transmission as a series of zero-value bits longer than
     a single byte.

 -- Macro: tcflag_t BRKINT
     If this bit is set and 'IGNBRK' is not set, a break condition
     clears the terminal input and output queues and raises a 'SIGINT'
     signal for the foreground process group associated with the
     terminal.

     If neither 'BRKINT' nor  IGNBRK’ are set, a break condition is
     passed to the application as a single ''\0'' character if  PARMRK’
     is not set, or otherwise as a three-character sequence ''\377'',
     ''\0'',  '\0'’.

 -- Macro: tcflag_t IGNCR
     If this bit is set, carriage return characters (''\r'') are
     discarded on input.  Discarding carriage return may be useful on
     terminals that send both carriage return and linefeed when you type
     the <RET> key.

 -- Macro: tcflag_t ICRNL
     If this bit is set and 'IGNCR' is not set, carriage return
     characters (''\r'') received as input are passed to the application
     as newline characters (''\n'').

 -- Macro: tcflag_t INLCR
     If this bit is set, newline characters (''\n'') received as input
     are passed to the application as carriage return characters
     (''\r'').

 -- Macro: tcflag_t IXOFF
     If this bit is set, start/stop control on input is enabled.  In
     other words, the computer sends STOP and START characters as
     necessary to prevent input from coming in faster than programs are
     reading it.  The idea is that the actual terminal hardware that is
     generating the input data responds to a STOP character by
     suspending transmission, and to a START character by resuming
     transmission.  *Note Start/Stop Characters::.

 -- Macro: tcflag_t IXON
     If this bit is set, start/stop control on output is enabled.  In
     other words, if the computer receives a STOP character, it suspends
     output until a START character is received.  In this case, the STOP
     and START characters are never passed to the application program.
     If this bit is not set, then START and STOP can be read as ordinary
     characters.  *Note Start/Stop Characters::.

 -- Macro: tcflag_t IXANY
     If this bit is set, any input character restarts output when output
     has been suspended with the STOP character.  Otherwise, only the
     START character restarts output.

     This is a BSD extension; it exists only on BSD systems and
     GNU/Linux and GNU/Hurd systems.

 -- Macro: tcflag_t IMAXBEL
     If this bit is set, then filling up the terminal input buffer sends
     a BEL character (code '007') to the terminal to ring the bell.

     This is a BSD extension.

==============================================================================
File: libc.info,  Node: |Output_Modes|,  Next: |Control_Modes|,  Prev: |Input_Modes|,  Up: |Terminal_Modes|
==============================================================================

                                                                  *Output_Modes*

17.4.5 Output Modes
-------------------

This section describes the terminal flags and fields that control how
output characters are translated and padded for display.  All of these
are contained in the 'c_oflag' member of the  struct termios’ structure.

   The 'c_oflag' member itself is an integer, and you change the flags
and fields using the operators '&',  |’, and ‘^’.  Don’t try to specify
the entire value for 'c_oflag' instead, change only specific flags and
leave the rest untouched (*note Setting Modes::).

 -- Macro: tcflag_t OPOST
     If this bit is set, output data is processed in some unspecified
     way so that it is displayed appropriately on the terminal device.
     This typically includes mapping newline characters (''\n'') onto
     carriage return and linefeed pairs.

     If this bit isn't set, the characters are transmitted as-is.

   The following three bits are effective only if 'OPOST' is set.

 -- Macro: tcflag_t ONLCR
     If this bit is set, convert the newline character on output into a
     pair of characters, carriage return followed by linefeed.

 -- Macro: tcflag_t OXTABS
     If this bit is set, convert tab characters on output into the
     appropriate number of spaces to emulate a tab stop every eight
     columns.  This bit exists only on BSD systems and GNU/Hurd systems;
     on GNU/Linux systems it is available as 'XTABS'.

 -- Macro: tcflag_t ONOEOT
     If this bit is set, discard 'C-d' characters (code  004’) on
     output.  These characters cause many dial-up terminals to
     disconnect.  This bit exists only on BSD systems and GNU/Hurd
     systems.

==============================================================================
File: libc.info,  Node: |Control_Modes|,  Next: |Local_Modes|,  Prev: |Output_Modes|,  Up: |Terminal_Modes|
==============================================================================

                                                                 *Control_Modes*

17.4.6 Control Modes
--------------------

This section describes the terminal flags and fields that control
parameters usually associated with asynchronous serial data
transmission.  These flags may not make sense for other kinds of
terminal ports (such as a network connection pseudo-terminal).  All of
these are contained in the 'c_cflag' member of the  struct termios’
structure.

   The 'c_cflag' member itself is an integer, and you change the flags
and fields using the operators '&',  |’, and ‘^’.  Don’t try to specify
the entire value for 'c_cflag' instead, change only specific flags and
leave the rest untouched (*note Setting Modes::).

 -- Macro: tcflag_t CLOCAL
     If this bit is set, it indicates that the terminal is connected
     'locally' and that the modem status lines (such as carrier detect)
     should be ignored.

     On many systems if this bit is not set and you call 'open' without
     the 'O_NONBLOCK' flag set,  open’ blocks until a modem connection
     is established.

     If this bit is not set and a modem disconnect is detected, a
     'SIGHUP' signal is sent to the controlling process group for the
     terminal (if it has one).  Normally, this causes the process to
     exit; see *note Signal Handling::.  Reading from the terminal after
     a disconnect causes an end-of-file condition, and writing causes an
     'EIO' error to be returned.  The terminal device must be closed and
     reopened to clear the condition.

 -- Macro: tcflag_t HUPCL
     If this bit is set, a modem disconnect is generated when all
     processes that have the terminal device open have either closed the
     file or exited.

 -- Macro: tcflag_t CREAD
     If this bit is set, input can be read from the terminal.
     Otherwise, input is discarded when it arrives.

 -- Macro: tcflag_t CSTOPB
     If this bit is set, two stop bits are used.  Otherwise, only one
     stop bit is used.

 -- Macro: tcflag_t PARENB
     If this bit is set, generation and detection of a parity bit are
     enabled.  *Note Input Modes::, for information on how input parity
     errors are handled.

     If this bit is not set, no parity bit is added to output
     characters, and input characters are not checked for correct
     parity.

 -- Macro: tcflag_t PARODD
     This bit is only useful if 'PARENB' is set.  If  PARODD’ is set,
     odd parity is used, otherwise even parity is used.

   The control mode flags also includes a field for the number of bits
per character.  You can use the 'CSIZE' macro as a mask to extract the
value, like this: 'settings.c_cflag & CSIZE'.

 -- Macro: tcflag_t CSIZE
     This is a mask for the number of bits per character.

 -- Macro: tcflag_t CS5
     This specifies five bits per byte.

 -- Macro: tcflag_t CS6
     This specifies six bits per byte.

 -- Macro: tcflag_t CS7
     This specifies seven bits per byte.

 -- Macro: tcflag_t CS8
     This specifies eight bits per byte.

   The following four bits are BSD extensions; these exist only on BSD
systems and GNU/Hurd systems.

 -- Macro: tcflag_t CCTS_OFLOW
     If this bit is set, enable flow control of output based on the CTS
     wire (RS232 protocol).

 -- Macro: tcflag_t CRTS_IFLOW
     If this bit is set, enable flow control of input based on the RTS
     wire (RS232 protocol).

 -- Macro: tcflag_t MDMBUF
     If this bit is set, enable carrier-based flow control of output.

 -- Macro: tcflag_t CIGNORE
     If this bit is set, it says to ignore the control modes and line
     speed values entirely.  This is only meaningful in a call to
     'tcsetattr'.

     The 'c_cflag' member and the line speed values returned by
     'cfgetispeed' and  cfgetospeed’ will be unaffected by the call.
     'CIGNORE' is useful if you want to set all the software modes in
     the other members, but leave the hardware details in 'c_cflag'
     unchanged.  (This is how the 'TCSASOFT' flag to  tcsettattr’
     works.)

     This bit is never set in the structure filled in by 'tcgetattr'.

==============================================================================
File: libc.info,  Node: |Local_Modes|,  Next: |Line_Speed|,  Prev: |Control_Modes|,  Up: |Terminal_Modes|
==============================================================================

                                                                   *Local_Modes*

17.4.7 Local Modes
------------------

This section describes the flags for the 'c_lflag' member of the  struct
termios' structure.  These flags generally control higher-level aspects
of input processing than the input modes flags described in *note Input
Modes::, such as echoing, signals, and the choice of canonical or
noncanonical input.

   The 'c_lflag' member itself is an integer, and you change the flags
and fields using the operators '&',  |’, and ‘^’.  Don’t try to specify
the entire value for 'c_lflag' instead, change only specific flags and
leave the rest untouched (*note Setting Modes::).

 -- Macro: tcflag_t ICANON
     This bit, if set, enables canonical input processing mode.
     Otherwise, input is processed in noncanonical mode.  *Note
     Canonical or Not::.

 -- Macro: tcflag_t ECHO
     If this bit is set, echoing of input characters back to the
     terminal is enabled.

 -- Macro: tcflag_t ECHOE
     If this bit is set, echoing indicates erasure of input with the
     ERASE character by erasing the last character in the current line
     from the screen.  Otherwise, the character erased is re-echoed to
     show what has happened (suitable for a printing terminal).

     This bit only controls the display behavior; the 'ICANON' bit by
     itself controls actual recognition of the ERASE character and
     erasure of input, without which 'ECHOE' is simply irrelevant.

 -- Macro: tcflag_t ECHOPRT
     This bit, like 'ECHOE', enables display of the ERASE character in a
     way that is geared to a hardcopy terminal.  When you type the ERASE
     character, a '\' character is printed followed by the first
     character erased.  Typing the ERASE character again just prints the
     next character erased.  Then, the next time you type a normal
     character, a '/' character is printed before the character echoes.

     This is a BSD extension, and exists only in BSD systems and
     GNU/Linux and GNU/Hurd systems.

 -- Macro: tcflag_t ECHOK
     This bit enables special display of the KILL character by moving to
     a new line after echoing the KILL character normally.  The behavior
     of 'ECHOKE' (below) is nicer to look at.

     If this bit is not set, the KILL character echoes just as it would
     if it were not the KILL character.  Then it is up to the user to
     remember that the KILL character has erased the preceding input;
     there is no indication of this on the screen.

     This bit only controls the display behavior; the 'ICANON' bit by
     itself controls actual recognition of the KILL character and
     erasure of input, without which 'ECHOK' is simply irrelevant.

 -- Macro: tcflag_t ECHOKE
     This bit is similar to 'ECHOK'.  It enables special display of the
     KILL character by erasing on the screen the entire line that has
     been killed.  This is a BSD extension, and exists only in BSD
     systems and GNU/Linux and GNU/Hurd systems.

 -- Macro: tcflag_t ECHONL
     If this bit is set and the 'ICANON' bit is also set, then the
     newline (''\n'') character is echoed even if the  ECHO’ bit is not
     set.

 -- Macro: tcflag_t ECHOCTL
     If this bit is set and the 'ECHO' bit is also set, echo control
     characters with '^' followed by the corresponding text character.
     Thus, control-A echoes as '^A'.  This is usually the preferred mode
     for interactive input, because echoing a control character back to
     the terminal could have some undesired effect on the terminal.

     This is a BSD extension, and exists only in BSD systems and
     GNU/Linux and GNU/Hurd systems.

 -- Macro: tcflag_t ISIG
     This bit controls whether the INTR, QUIT, and SUSP characters are
     recognized.  The functions associated with these characters are
     performed if and only if this bit is set.  Being in canonical or
     noncanonical input mode has no effect on the interpretation of
     these characters.

     You should use caution when disabling recognition of these
     characters.  Programs that cannot be interrupted interactively are
     very user-unfriendly.  If you clear this bit, your program should
     provide some alternate interface that allows the user to
     interactively send the signals associated with these characters, or
     to escape from the program.

     *Note Signal Characters::.

 -- Macro: tcflag_t IEXTEN
     POSIX.1 gives 'IEXTEN' implementation-defined meaning, so you
     cannot rely on this interpretation on all systems.

     On BSD systems and GNU/Linux and GNU/Hurd systems, it enables the
     LNEXT and DISCARD characters.  *Note Other Special::.

 -- Macro: tcflag_t NOFLSH
     Normally, the INTR, QUIT, and SUSP characters cause input and
     output queues for the terminal to be cleared.  If this bit is set,
     the queues are not cleared.

 -- Macro: tcflag_t TOSTOP
     If this bit is set and the system supports job control, then
     'SIGTTOU' signals are generated by background processes that
     attempt to write to the terminal.  *Note Access to the Terminal::.

   The following bits are BSD extensions; they exist only on BSD systems
and GNU/Hurd systems.

 -- Macro: tcflag_t ALTWERASE
     This bit determines how far the WERASE character should erase.  The
     WERASE character erases back to the beginning of a word; the
     question is, where do words begin?

     If this bit is clear, then the beginning of a word is a
     nonwhitespace character following a whitespace character.  If the
     bit is set, then the beginning of a word is an alphanumeric
     character or underscore following a character which is none of
     those.

     *Note Editing Characters::, for more information about the WERASE
     character.

 -- Macro: tcflag_t FLUSHO
     This is the bit that toggles when the user types the DISCARD
     character.  While this bit is set, all output is discarded.  *Note
     Other Special::.

 -- Macro: tcflag_t NOKERNINFO
     Setting this bit disables handling of the STATUS character.  *Note
     Other Special::.

 -- Macro: tcflag_t PENDIN
     If this bit is set, it indicates that there is a line of input that
     needs to be reprinted.  Typing the REPRINT character sets this bit;
     the bit remains set until reprinting is finished.  *Note Editing
     Characters::.

==============================================================================
File: libc.info,  Node: |Line_Speed|,  Next: |Special_Characters|,  Prev: |Local_Modes|,  Up: |Terminal_Modes|
==============================================================================

                                                                    *Line_Speed*

17.4.8 Line Speed
-----------------

The terminal line speed tells the computer how fast to read and write
data on the terminal.

   If the terminal is connected to a real serial line, the terminal
speed you specify actually controls the line if it doesn't match the
terminal's own idea of the speed, communication does not work.  Real
serial ports accept only certain standard speeds.  Also, particular
hardware may not support even all the standard speeds.  Specifying a
speed of zero hangs up a dialup connection and turns off modem control
signals.

   If the terminal is not a real serial line (for example, if it is a
network connection), then the line speed won't really affect data
transmission speed, but some programs will use it to determine the
amount of padding needed.  It's best to specify a line speed value that
matches the actual speed of the actual terminal, but you can safely
experiment with different values to vary the amount of padding.

   There are actually two line speeds for each terminal, one for input
and one for output.  You can set them independently, but most often
terminals use the same speed for both directions.

   The speed values are stored in the 'struct termios' structure, but
don't try to access them in the 'struct termios  structure directly.
Instead, you should use the following functions to read and store them:

 -- Function: speed_t cfgetospeed (const struct termios *TERMIOS-P)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns the output line speed stored in the structure
     '*TERMIOS-P'.

 -- Function: speed_t cfgetispeed (const struct termios *TERMIOS-P)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns the input line speed stored in the structure
     '*TERMIOS-P'.

 -- Function: int cfsetospeed (struct termios *TERMIOS-P, speed_t SPEED)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function stores SPEED in '*TERMIOS-P' as the output speed.
     The normal return value is 0; a value of -1 indicates an error.  If
     SPEED is not a speed, 'cfsetospeed' returns -1.

 -- Function: int cfsetispeed (struct termios *TERMIOS-P, speed_t SPEED)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function stores SPEED in '*TERMIOS-P' as the input speed.  The
     normal return value is 0; a value of -1 indicates an error.  If
     SPEED is not a speed, 'cfsetospeed' returns -1.

 -- Function: int cfsetspeed (struct termios *TERMIOS-P, speed_t SPEED)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function stores SPEED in '*TERMIOS-P' as both the input and
     output speeds.  The normal return value is 0; a value of -1
     indicates an error.  If SPEED is not a speed, 'cfsetspeed' returns
     -1.  This function is an extension in 4.4 BSD.

 -- Data Type: speed_t
     The 'speed_t' type is an unsigned integer data type used to
     represent line speeds.

   The functions 'cfsetospeed' and  cfsetispeed’ report errors only for
speed values that the system simply cannot handle.  If you specify a
speed value that is basically acceptable, then those functions will
succeed.  But they do not check that a particular hardware device can
actually support the specified speeds in fact, they don't know which
device you plan to set the speed for.  If you use 'tcsetattr' to set the
speed of a particular device to a value that it cannot handle,
'tcsetattr' returns -1.

   *Portability note:* In the GNU C Library, the functions above accept
speeds measured in bits per second as input, and return speed values
measured in bits per second.  Other libraries require speeds to be
indicated by special codes.  For POSIX.1 portability, you must use one
of the following symbols to represent the speed; their precise numeric
values are system-dependent, but each name has a fixed meaning: 'B110'
stands for 110 bps, 'B300' for 300 bps, and so on.  There is no portable
way to represent any speed but these, but these are the only speeds that
typical serial lines can support.

     B0  B50  B75  B110  B134  B150  B200
     B300  B600  B1200  B1800  B2400  B4800
     B9600  B19200  B38400  B57600  B115200
     B230400  B460800

   BSD defines two additional speed symbols as aliases: 'EXTA' is an
alias for 'B19200' and  EXTB’ is an alias for ‘B38400’.  These aliases
are obsolete.

==============================================================================
File: libc.info,  Node: |Special_Characters|,  Next: |Noncanonical_Input|,  Prev: |Line_Speed|,  Up: |Terminal_Modes|
==============================================================================

                                                            *Special_Characters*

17.4.9 Special Characters
-------------------------

In canonical input, the terminal driver recognizes a number of special
characters which perform various control functions.  These include the
ERASE character (usually <DEL>) for editing input, and other editing
characters.  The INTR character (normally 'C-c') for sending a  SIGINT’
signal, and other signal-raising characters, may be available in either
canonical or noncanonical input mode.  All these characters are
described in this section.

   The particular characters used are specified in the 'c_cc' member of
the 'struct termios' structure.  This member is an array; each element
specifies the character for a particular role.  Each element has a
symbolic constant that stands for the index of that element for example,
'VINTR' is the index of the element that specifies the INTR character,
so storing ''='' in  TERMIOS.c_cc[VINTR]’ specifies ‘=’ as the INTR
character.

   On some systems, you can disable a particular special character
function by specifying the value '_POSIX_VDISABLE' for that role.  This
value is unequal to any possible character code.  *Note Options for
Files::, for more information about how to tell whether the operating
system you are using supports '_POSIX_VDISABLE'.

MENU

* |Editing_Characters|::          Special characters that terminate lines and
                                  delete text, and other editing functions.
* |Signal_Characters|::           Special characters that send or raise signals
                                  to or for certain classes of processes.
* |Start/Stop_Characters|::       Special characters that suspend or resume
                                  suspended output.
* |Other_Special|::		Other special characters for BSD systems:
				  they can discard output, and print status.

==============================================================================
File: libc.info,  Node: |Editing_Characters|,  Next: |Signal_Characters|,  Up: |Special_Characters|
==============================================================================

                                                            *Editing_Characters*

17.4.9.1 Characters for Input Editing
-------------------------------------

These special characters are active only in canonical input mode.  *Note
Canonical or Not::.

 -- Macro: int VEOF
     This is the subscript for the EOF character in the special control
     character array.  'TERMIOS.c_cc[VEOF]' holds the character itself.

     The EOF character is recognized only in canonical input mode.  It
     acts as a line terminator in the same way as a newline character,
     but if the EOF character is typed at the beginning of a line it
     causes 'read' to return a byte count of zero, indicating
     end-of-file.  The EOF character itself is discarded.

     Usually, the EOF character is 'C-d'.

 -- Macro: int VEOL
     This is the subscript for the EOL character in the special control
     character array.  'TERMIOS.c_cc[VEOL]' holds the character itself.

     The EOL character is recognized only in canonical input mode.  It
     acts as a line terminator, just like a newline character.  The EOL
     character is not discarded; it is read as the last character in the
     input line.

     You don't need to use the EOL character to make <RET> end a line.
     Just set the ICRNL flag.  In fact, this is the default state of
     affairs.

 -- Macro: int VEOL2
     This is the subscript for the EOL2 character in the special control
     character array.  'TERMIOS.c_cc[VEOL2]' holds the character itself.

     The EOL2 character works just like the EOL character (see above),
     but it can be a different character.  Thus, you can specify two
     characters to terminate an input line, by setting EOL to one of
     them and EOL2 to the other.

     The EOL2 character is a BSD extension; it exists only on BSD
     systems and GNU/Linux and GNU/Hurd systems.

 -- Macro: int VERASE
     This is the subscript for the ERASE character in the special
     control character array.  'TERMIOS.c_cc[VERASE]' holds the
     character itself.

     The ERASE character is recognized only in canonical input mode.
     When the user types the erase character, the previous character
     typed is discarded.  (If the terminal generates multibyte character
     sequences, this may cause more than one byte of input to be
     discarded.)  This cannot be used to erase past the beginning of the
     current line of text.  The ERASE character itself is discarded.

     Usually, the ERASE character is <DEL>.

 -- Macro: int VWERASE
     This is the subscript for the WERASE character in the special
     control character array.  'TERMIOS.c_cc[VWERASE]' holds the
     character itself.

     The WERASE character is recognized only in canonical mode.  It
     erases an entire word of prior input, and any whitespace after it;
     whitespace characters before the word are not erased.

     The definition of a 'word' depends on the setting of the
     'ALTWERASE' mode; *note Local Modes::.

     If the 'ALTWERASE' mode is not set, a word is defined as a sequence
     of any characters except space or tab.

     If the 'ALTWERASE' mode is set, a word is defined as a sequence of
     characters containing only letters, numbers, and underscores,
     optionally followed by one character that is not a letter, number,
     or underscore.

     The WERASE character is usually 'C-w'.

     This is a BSD extension.

 -- Macro: int VKILL
     This is the subscript for the KILL character in the special control
     character array.  'TERMIOS.c_cc[VKILL]' holds the character itself.

     The KILL character is recognized only in canonical input mode.
     When the user types the kill character, the entire contents of the
     current line of input are discarded.  The kill character itself is
     discarded too.

     The KILL character is usually 'C-u'.

 -- Macro: int VREPRINT
     This is the subscript for the REPRINT character in the special
     control character array.  'TERMIOS.c_cc[VREPRINT]' holds the
     character itself.

     The REPRINT character is recognized only in canonical mode.  It
     reprints the current input line.  If some asynchronous output has
     come while you are typing, this lets you see the line you are
     typing clearly again.

     The REPRINT character is usually 'C-r'.

     This is a BSD extension.

==============================================================================
File: libc.info,  Node: |Signal_Characters|,  Next: |Start/Stop_Characters|,  Prev: |Editing_Characters|,  Up: |Special_Characters|
==============================================================================

                                                             *Signal_Characters*

17.4.9.2 Characters that Cause Signals
--------------------------------------

These special characters may be active in either canonical or
noncanonical input mode, but only when the 'ISIG' flag is set (*note
Local Modes::).

 -- Macro: int VINTR
     This is the subscript for the INTR character in the special control
     character array.  'TERMIOS.c_cc[VINTR]' holds the character itself.

     The INTR (interrupt) character raises a 'SIGINT' signal for all
     processes in the foreground job associated with the terminal.  The
     INTR character itself is then discarded.  *Note Signal Handling::,
     for more information about signals.

     Typically, the INTR character is 'C-c'.

 -- Macro: int VQUIT
     This is the subscript for the QUIT character in the special control
     character array.  'TERMIOS.c_cc[VQUIT]' holds the character itself.

     The QUIT character raises a 'SIGQUIT' signal for all processes in
     the foreground job associated with the terminal.  The QUIT
     character itself is then discarded.  *Note Signal Handling::, for
     more information about signals.

     Typically, the QUIT character is 'C-\'.

 -- Macro: int VSUSP
     This is the subscript for the SUSP character in the special control
     character array.  'TERMIOS.c_cc[VSUSP]' holds the character itself.

     The SUSP (suspend) character is recognized only if the
     implementation supports job control (*note Job Control::).  It
     causes a 'SIGTSTP' signal to be sent to all processes in the
     foreground job associated with the terminal.  The SUSP character
     itself is then discarded.  *Note Signal Handling::, for more
     information about signals.

     Typically, the SUSP character is 'C-z'.

   Few applications disable the normal interpretation of the SUSP
character.  If your program does this, it should provide some other
mechanism for the user to stop the job.  When the user invokes this
mechanism, the program should send a 'SIGTSTP' signal to the process
group of the process, not just to the process itself.  *Note Signaling
Another Process::.

 -- Macro: int VDSUSP
     This is the subscript for the DSUSP character in the special
     control character array.  'TERMIOS.c_cc[VDSUSP]' holds the
     character itself.

     The DSUSP (suspend) character is recognized only if the
     implementation supports job control (*note Job Control::).  It
     sends a 'SIGTSTP' signal, like the SUSP character, but not right
     away only when the program tries to read it as input.  Not all
     systems with job control support DSUSP; only BSD-compatible systems
     do (including GNU/Hurd systems).

     *Note Signal Handling::, for more information about signals.

     Typically, the DSUSP character is 'C-y'.

==============================================================================
File: libc.info,  Node: |Start/Stop_Characters|,  Next: |Other_Special|,  Prev: |Signal_Characters|,  Up: |Special_Characters|
==============================================================================

                                                         *Start/Stop_Characters*

17.4.9.3 Special Characters for Flow Control
--------------------------------------------

These special characters may be active in either canonical or
noncanonical input mode, but their use is controlled by the flags 'IXON'
and 'IXOFF' (*note Input Modes::).

 -- Macro: int VSTART
     This is the subscript for the START character in the special
     control character array.  'TERMIOS.c_cc[VSTART]' holds the
     character itself.

     The START character is used to support the 'IXON' and  IXOFF’ input
     modes.  If 'IXON' is set, receiving a START character resumes
     suspended output; the START character itself is discarded.  If
     'IXANY' is set, receiving any character at all resumes suspended
     output; the resuming character is not discarded unless it is the
     START character.  If 'IXOFF' is set, the system may also transmit
     START characters to the terminal.

     The usual value for the START character is 'C-q'.  You may not be
     able to change this value the hardware may insist on using 'C-q'
     regardless of what you specify.

 -- Macro: int VSTOP
     This is the subscript for the STOP character in the special control
     character array.  'TERMIOS.c_cc[VSTOP]' holds the character itself.

     The STOP character is used to support the 'IXON' and  IXOFF’ input
     modes.  If 'IXON' is set, receiving a STOP character causes output
     to be suspended; the STOP character itself is discarded.  If
     'IXOFF' is set, the system may also transmit STOP characters to the
     terminal, to prevent the input queue from overflowing.

     The usual value for the STOP character is 'C-s'.  You may not be
     able to change this value the hardware may insist on using 'C-s'
     regardless of what you specify.

==============================================================================
File: libc.info,  Node: |Other_Special|,  Prev: |Start/Stop_Characters|,  Up: |Special_Characters|
==============================================================================

                                                                 *Other_Special*

17.4.9.4 Other Special Characters
---------------------------------

 -- Macro: int VLNEXT
     This is the subscript for the LNEXT character in the special
     control character array.  'TERMIOS.c_cc[VLNEXT]' holds the
     character itself.

     The LNEXT character is recognized only when 'IEXTEN' is set, but in
     both canonical and noncanonical mode.  It disables any special
     significance of the next character the user types.  Even if the
     character would normally perform some editing function or generate
     a signal, it is read as a plain character.  This is the analogue of
     the 'C-q' command in Emacs.  'LNEXT' stands for  literal next.”

     The LNEXT character is usually 'C-v'.

     This character is available on BSD systems and GNU/Linux and
     GNU/Hurd systems.

 -- Macro: int VDISCARD
     This is the subscript for the DISCARD character in the special
     control character array.  'TERMIOS.c_cc[VDISCARD]' holds the
     character itself.

     The DISCARD character is recognized only when 'IEXTEN' is set, but
     in both canonical and noncanonical mode.  Its effect is to toggle
     the discard-output flag.  When this flag is set, all program output
     is discarded.  Setting the flag also discards all output currently
     in the output buffer.  Typing any other character resets the flag.

     This character is available on BSD systems and GNU/Linux and
     GNU/Hurd systems.

 -- Macro: int VSTATUS
     This is the subscript for the STATUS character in the special
     control character array.  'TERMIOS.c_cc[VSTATUS]' holds the
     character itself.

     The STATUS character's effect is to print out a status message
     about how the current process is running.

     The STATUS character is recognized only in canonical mode, and only
     if 'NOKERNINFO' is not set.

     This character is available only on BSD systems and GNU/Hurd
     systems.

==============================================================================
File: libc.info,  Node: |Noncanonical_Input|,  Prev: Special Characters,  Up: |Terminal_Modes|
==============================================================================

                                                            *Noncanonical_Input*

17.4.10 Noncanonical Input
--------------------------

In noncanonical input mode, the special editing characters such as ERASE
and KILL are ignored.  The system facilities for the user to edit input
are disabled in noncanonical mode, so that all input characters (unless
they are special for signal or flow-control purposes) are passed to the
application program exactly as typed.  It is up to the application
program to give the user ways to edit the input, if appropriate.

   Noncanonical mode offers special parameters called MIN and TIME for
controlling whether and how long to wait for input to be available.  You
can even use them to avoid ever waiting to return immediately with
whatever input is available, or with no input.

   The MIN and TIME are stored in elements of the 'c_cc' array, which is
a member of the 'struct termios' structure.  Each element of this array
has a particular role, and each element has a symbolic constant that
stands for the index of that element.  'VMIN' and  VTIME’ are the names
for the indices in the array of the MIN and TIME slots.

 -- Macro: int VMIN
     This is the subscript for the MIN slot in the 'c_cc' array.  Thus,
     'TERMIOS.c_cc[VMIN]' is the value itself.

     The MIN slot is only meaningful in noncanonical input mode; it
     specifies the minimum number of bytes that must be available in the
     input queue in order for 'read' to return.

 -- Macro: int VTIME
     This is the subscript for the TIME slot in the 'c_cc' array.  Thus,
     'TERMIOS.c_cc[VTIME]' is the value itself.

     The TIME slot is only meaningful in noncanonical input mode; it
     specifies how long to wait for input before returning, in units of
     0.1 seconds.

   The MIN and TIME values interact to determine the criterion for when
'read' should return; their precise meanings depend on which of them are
nonzero.  There are four possible cases:

   - Both TIME and MIN are nonzero.

     In this case, TIME specifies how long to wait after each input
     character to see if more input arrives.  After the first character
     received, 'read' keeps waiting until either MIN bytes have arrived
     in all, or TIME elapses with no further input.

     'read' always blocks until the first character arrives, even if
     TIME elapses first.  'read' can return more than MIN characters if
     more than MIN happen to be in the queue.

   - Both MIN and TIME are zero.

     In this case, 'read' always returns immediately with as many
     characters as are available in the queue, up to the number
     requested.  If no input is immediately available, 'read' returns a
     value of zero.

   - MIN is zero but TIME has a nonzero value.

     In this case, 'read' waits for time TIME for input to become
     available; the availability of a single byte is enough to satisfy
     the read request and cause 'read' to return.  When it returns, it
     returns as many characters as are available, up to the number
     requested.  If no input is available before the timer expires,
     'read' returns a value of zero.

   - TIME is zero but MIN has a nonzero value.

     In this case, 'read' waits until at least MIN bytes are available
     in the queue.  At that time, 'read' returns as many characters as
     are available, up to the number requested.  'read' can return more
     than MIN characters if more than MIN happen to be in the queue.

   What happens if MIN is 50 and you ask to read just 10 bytes?
Normally, 'read' waits until there are 50 bytes in the buffer (or, more
generally, the wait condition described above is satisfied), and then
reads 10 of them, leaving the other 40 buffered in the operating system
for a subsequent call to 'read'.

   *Portability note:* On some systems, the MIN and TIME slots are
actually the same as the EOF and EOL slots.  This causes no serious
problem because the MIN and TIME slots are used only in noncanonical
input and the EOF and EOL slots are used only in canonical input, but it
isn't very clean.  The GNU C Library allocates separate slots for these
uses.

 -- Function: void cfmakeraw (struct termios *TERMIOS-P)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function provides an easy way to set up '*TERMIOS-P' for what
     has traditionally been called 'raw mode' in BSD. This uses
     noncanonical input, and turns off most processing to give an
     unmodified channel to the terminal.

     It does exactly this:
            TERMIOS-P->c_iflag &= ~(IGNBRK|BRKINT|PARMRK|ISTRIP
                                          |INLCR|IGNCR|ICRNL|IXON);
            TERMIOS-P->c_oflag &= ~OPOST;
            TERMIOS-P->c_lflag &= ~(ECHO|ECHONL|ICANON|ISIG|IEXTEN);
            TERMIOS-P->c_cflag &= ~(CSIZE|PARENB);
            TERMIOS-P->c_cflag |= CS8;

==============================================================================
File: libc.info,  Node: |BSD_Terminal_Modes|,  Next: |Line_Control|,  Prev: |Terminal_Modes|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                            *BSD_Terminal_Modes*

17.5 BSD Terminal Modes
-----------------------

The usual way to get and set terminal modes is with the functions
described in *note Terminal Modes::.  However, on some systems you can
use the BSD-derived functions in this section to do some of the same
things.  On many systems, these functions do not exist.  Even with the
GNU C Library, the functions simply fail with 'errno' =  ENOSYS’ with
many kernels, including Linux.

   The symbols used in this section are declared in 'sgtty.h'.

 -- Data Type: struct sgttyb
     This structure is an input or output parameter list for 'gtty' and
     'stty'.

     'char sg_ispeed'
          Line speed for input
     'char sg_ospeed'
          Line speed for output
     'char sg_erase'
          Erase character
     'char sg_kill'
          Kill character
     'int sg_flags'
          Various flags

 -- Function: int gtty (int FILEDES, struct sgttyb *ATTRIBUTES)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function gets the attributes of a terminal.

     'gtty' sets *ATTRIBUTES to describe the terminal attributes of the
     terminal which is open with file descriptor FILEDES.

 -- Function: int stty (int FILEDES, const struct sgttyb *ATTRIBUTES)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function sets the attributes of a terminal.

     'stty' sets the terminal attributes of the terminal which is open
     with file descriptor FILEDES to those described by *ATTRIBUTES.

==============================================================================
File: libc.info,  Node: |Line_Control|,  Next: |Noncanon_Example|,  Prev: |BSD_Terminal_Modes|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                                  *Line_Control*

17.6 Line Control Functions
---------------------------

These functions perform miscellaneous control actions on terminal
devices.  As regards terminal access, they are treated like doing
output: if any of these functions is used by a background process on its
controlling terminal, normally all processes in the process group are
sent a 'SIGTTOU' signal.  The exception is if the calling process itself
is ignoring or blocking 'SIGTTOU' signals, in which case the operation
is performed and no signal is sent.  *Note Job Control::.

 -- Function: int tcsendbreak (int FILEDES, int DURATION)
     Preliminary: | MT-Unsafe race:tcattr(filedes)/bsd | AS-Unsafe |
     AC-Unsafe corrupt/bsd | *Note POSIX Safety Concepts::.

     This function generates a break condition by transmitting a stream
     of zero bits on the terminal associated with the file descriptor
     FILEDES.  The duration of the break is controlled by the DURATION
     argument.  If zero, the duration is between 0.25 and 0.5 seconds.
     The meaning of a nonzero value depends on the operating system.

     This function does nothing if the terminal is not an asynchronous
     serial data port.

     The return value is normally zero.  In the event of an error, a
     value of -1 is returned.  The following 'errno' error conditions
     are defined for this function:

     'EBADF'
          The FILEDES is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal device.

 -- Function: int tcdrain (int FILEDES)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'tcdrain' function waits until all queued output to the
     terminal FILEDES has been transmitted.

     This function is a cancellation point in multi-threaded programs.
     This is a problem if the thread allocates some resources (like
     memory, file descriptors, semaphores or whatever) at the time
     'tcdrain' is called.  If the thread gets canceled these resources
     stay allocated until the program ends.  To avoid this calls to
     'tcdrain' should be protected using cancellation handlers.

     The return value is normally zero.  In the event of an error, a
     value of -1 is returned.  The following 'errno' error conditions
     are defined for this function:

     'EBADF'
          The FILEDES is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal device.

     'EINTR'
          The operation was interrupted by delivery of a signal.  *Note
          Interrupted Primitives::.

 -- Function: int tcflush (int FILEDES, int QUEUE)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'tcflush' function is used to clear the input and/or output
     queues associated with the terminal file FILEDES.  The QUEUE
     argument specifies which queue(s) to clear, and can be one of the
     following values:

     'TCIFLUSH'

          Clear any input data received, but not yet read.

     'TCOFLUSH'

          Clear any output data written, but not yet transmitted.

     'TCIOFLUSH'

          Clear both queued input and output.

     The return value is normally zero.  In the event of an error, a
     value of -1 is returned.  The following 'errno' error conditions
     are defined for this function:

     'EBADF'
          The FILEDES is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal device.

     'EINVAL'
          A bad value was supplied as the QUEUE argument.

     It is unfortunate that this function is named 'tcflush', because
     the term 'flush' is normally used for quite another
     operation waiting until all output is transmitted—and using it for
     discarding input or output would be confusing.  Unfortunately, the
     name 'tcflush' comes from POSIX and we cannot change it.

 -- Function: int tcflow (int FILEDES, int ACTION)
     Preliminary: | MT-Unsafe race:tcattr(filedes)/bsd | AS-Unsafe |
     AC-Safe | *Note POSIX Safety Concepts::.

     The 'tcflow' function is used to perform operations relating to
     XON/XOFF flow control on the terminal file specified by FILEDES.

     The ACTION argument specifies what operation to perform, and can be
     one of the following values:

     'TCOOFF'
          Suspend transmission of output.

     'TCOON'
          Restart transmission of output.

     'TCIOFF'
          Transmit a STOP character.

     'TCION'
          Transmit a START character.

     For more information about the STOP and START characters, see *note
     Special Characters::.

     The return value is normally zero.  In the event of an error, a
     value of -1 is returned.  The following 'errno' error conditions
     are defined for this function:

     'EBADF'
          The FILEDES is not a valid file descriptor.

     'ENOTTY'
          The FILEDES is not associated with a terminal device.

     'EINVAL'
          A bad value was supplied as the ACTION argument.

==============================================================================
File: libc.info,  Node: |Noncanon_Example|,  Next: |Pseudo_Terminals|,  Prev: |Line_Control|,  Up: |Low_Level_Terminal_Interface|
==============================================================================

                                                              *Noncanon_Example*

17.7 Noncanonical Mode Example
------------------------------

Here is an example program that shows how you can set up a terminal
device to read single characters in noncanonical input mode, without
echo.


     #include <unistd.h>
     #include <stdio.h>
     #include <stdlib.h>
     #include <termios.h>

     /* Use this variable to remember original terminal attributes. */

     struct termios saved_attributes;

     void
     reset_input_mode (void)
     {
       tcsetattr (STDIN_FILENO, TCSANOW, &saved_attributes);
     }

     void
     set_input_mode (void)
     {
       struct termios tattr;
       char *name;

       /* Make sure stdin is a terminal. */
       if (!isatty (STDIN_FILENO))
         {
           fprintf (stderr, "Not a terminal.\n");
           exit (EXIT_FAILURE);
         }

       /* Save the terminal attributes so we can restore them later. */
       tcgetattr (STDIN_FILENO, &saved_attributes);
       atexit (reset_input_mode);

       /* Set the funny terminal modes. */
       tcgetattr (STDIN_FILENO, &tattr);
       tattr.c_lflag &= ~(ICANON|ECHO); /* Clear ICANON and ECHO. */
       tattr.c_cc[VMIN] = 1;
       tattr.c_cc[VTIME] = 0;
       tcsetattr (STDIN_FILENO, TCSAFLUSH, &tattr);
     }

     int
     main (void)
     {
       char c;
        vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
