
 -- Function: double nexttoward (double X, long double Y)
 -- Function: float nexttowardf (float X, long double Y)
 -- Function: long double nexttowardl (long double X, long double Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions are identical to the corresponding versions of
     'nextafter' except that their second argument is a  long double’.

 -- Function: double nextup (double X)
 -- Function: float nextupf (float X)
 -- Function: long double nextupl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'nextup' function returns the next representable neighbor of X
     in the direction of positive infinity.  If X is the smallest
     negative subnormal number in the type of X the function returns
     '-0'.  If X =  0’ the function returns the smallest positive
     subnormal number in the type of X.  If X is NaN, NaN is returned.
     If X is +oo, +oo is returned.  'nextup' is from TS 18661-1:2014.
     'nextup' never raises an exception except for signaling NaNs.

 -- Function: double nextdown (double X)
 -- Function: float nextdownf (float X)
 -- Function: long double nextdownl (long double X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'nextdown' function returns the next representable neighbor of
     X in the direction of negative infinity.  If X is the smallest
     positive subnormal number in the type of X the function returns
     '+0'.  If X =  0’ the function returns the smallest negative
     subnormal number in the type of X.  If X is NaN, NaN is returned.
     If X is -oo, -oo is returned.  'nextdown' is from TS 18661-1:2014.
     'nextdown' never raises an exception except for signaling NaNs.

 -- Function: double nan (const char *TAGP)
 -- Function: float nanf (const char *TAGP)
 -- Function: long double nanl (const char *TAGP)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'nan' function returns a representation of NaN, provided that
     NaN is supported by the target platform.  'nan ("N-CHAR-SEQUENCE")'
     is equivalent to 'strtod ("NAN(N-CHAR-SEQUENCE)")'.

     The argument TAGP is used in an unspecified manner.  On IEEE 754
     systems, there are many representations of NaN, and TAGP selects
     one.  On other systems it may do nothing.

 -- Function: int canonicalize (double *CX, const double *X)
 -- Function: int canonicalizef (float *CX, const float *X)
 -- Function: int canonicalizel (long double *CX, const long double *X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     In some floating-point formats, some values have canonical
     (preferred) and noncanonical encodings (for IEEE interchange binary
     formats, all encodings are canonical).  These functions, defined by
     TS 18661-1:2014, attempt to produce a canonical version of the
     floating-point value pointed to by X; if that value is a signaling
     NaN, they raise the invalid exception and produce a quiet NaN. If a
     canonical value is produced, it is stored in the object pointed to
     by CX, and these functions return zero.  Otherwise (if a canonical
     value could not be produced because the object pointed to by X is
     not a valid representation of any floating-point value), the object
     pointed to by CX is unchanged and a nonzero value is returned.

     Note that some formats have multiple encodings of a value which are
     all equally canonical; when such an encoding is used as an input to
     this function, any such encoding of the same value (or of the
     corresponding quiet NaN, if that value is a signaling NaN) may be
     produced as output.

 -- Function: double getpayload (const double *X)
 -- Function: float getpayloadf (const float *X)
 -- Function: long double getpayloadl (const long double *X)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     IEEE 754 defines the 'payload' of a NaN to be an integer value
     encoded in the representation of the NaN. Payloads are typically
     propagated from NaN inputs to the result of a floating-point
     operation.  These functions, defined by TS 18661-1:2014, return the
     payload of the NaN pointed to by X (returned as a positive integer,
     or positive zero, represented as a floating-point number); if X is
     not a NaN, they return an unspecified value.  They raise no
     floating-point exceptions even for signaling NaNs.

 -- Function: int setpayload (double *X, double PAYLOAD)
 -- Function: int setpayloadf (float *X, float PAYLOAD)
 -- Function: int setpayloadl (long double *X, long double PAYLOAD)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions, defined by TS 18661-1:2014, set the object pointed
     to by X to a quiet NaN with payload PAYLOAD and a zero sign bit and
     return zero.  If PAYLOAD is not a positive-signed integer that is a
     valid payload for a quiet NaN of the given type, the object pointed
     to by X is set to positive zero and a nonzero value is returned.
     They raise no floating-point exceptions.

 -- Function: int setpayloadsig (double *X, double PAYLOAD)
 -- Function: int setpayloadsigf (float *X, float PAYLOAD)
 -- Function: int setpayloadsigl (long double *X, long double PAYLOAD)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions, defined by TS 18661-1:2014, set the object pointed
     to by X to a signaling NaN with payload PAYLOAD and a zero sign bit
     and return zero.  If PAYLOAD is not a positive-signed integer that
     is a valid payload for a signaling NaN of the given type, the
     object pointed to by X is set to positive zero and a nonzero value
     is returned.  They raise no floating-point exceptions.

==============================================================================
File: libc.info,  Node: |FP_Comparison_Functions|,  Next: |Misc_FP_Arithmetic|,  Prev: |FP_Bit_Twiddling|,  Up: |Arithmetic_Functions|
==============================================================================

                                                       *FP_Comparison_Functions*

20.8.6 Floating-Point Comparison Functions
------------------------------------------

The standard C comparison operators provoke exceptions when one or other
of the operands is NaN. For example,

     int v = a < 1.0;

will raise an exception if A is NaN. (This does _not_ happen with '=='
and '!='; those merely return false and true, respectively, when NaN is
examined.)  Frequently this exception is undesirable.  ISO C99 therefore
defines comparison functions that do not raise exceptions when NaN is
examined.  All of the functions are implemented as macros which allow
their arguments to be of any floating-point type.  The macros are
guaranteed to evaluate their arguments only once.  TS 18661-1:2014 adds
such a macro for an equality comparison that _does_ raise an exception
for a NaN argument; it also adds functions that provide a total ordering
on all floating-point values, including NaNs, without raising any
exceptions even for signaling NaNs.

 -- Macro: int isgreater (_real-floating_ X, _real-floating_ Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro determines whether the argument X is greater than Y.  It
     is equivalent to '(X) > (Y)', but no exception is raised if X or Y
     are NaN.

 -- Macro: int isgreaterequal (_real-floating_ X, _real-floating_ Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro determines whether the argument X is greater than or
     equal to Y.  It is equivalent to '(X) >= (Y)', but no exception is
     raised if X or Y are NaN.

 -- Macro: int isless (_real-floating_ X, _real-floating_ Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro determines whether the argument X is less than Y.  It is
     equivalent to '(X) < (Y)', but no exception is raised if X or Y are
     NaN.

 -- Macro: int islessequal (_real-floating_ X, _real-floating_ Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro determines whether the argument X is less than or equal
     to Y.  It is equivalent to '(X) <= (Y)', but no exception is raised
     if X or Y are NaN.

 -- Macro: int islessgreater (_real-floating_ X, _real-floating_ Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro determines whether the argument X is less or greater
     than Y.  It is equivalent to '(X) < (Y) || (X) > (Y)' (although it
     only evaluates X and Y once), but no exception is raised if X or Y
     are NaN.

     This macro is not equivalent to 'X != Y', because that expression
     is true if X or Y are NaN.

 -- Macro: int isunordered (_real-floating_ X, _real-floating_ Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro determines whether its arguments are unordered.  In
     other words, it is true if X or Y are NaN, and false otherwise.

 -- Macro: int iseqsig (_real-floating_ X, _real-floating_ Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro determines whether its arguments are equal.  It is
     equivalent to '(X) == (Y)', but it raises the invalid exception and
     sets 'errno' to  EDOM’ if either argument is a NaN.

 -- Function: int totalorder (double X, double Y)
 -- Function: int totalorderf (float X, float Y)
 -- Function: int totalorderl (long double X, long double Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions determine whether the total order relationship,
     defined in IEEE 754-2008, is true for X and Y, returning nonzero if
     it is true and zero if it is false.  No exceptions are raised even
     for signaling NaNs.  The relationship is true if they are the same
     floating-point value (including sign for zero and NaNs, and payload
     for NaNs), or if X comes before Y in the following order: negative
     quiet NaNs, in order of decreasing payload; negative signaling
     NaNs, in order of decreasing payload; negative infinity; finite
     numbers, in ascending order, with negative zero before positive
     zero; positive infinity; positive signaling NaNs, in order of
     increasing payload; positive quiet NaNs, in order of increasing
     payload.

 -- Function: int totalordermag (double X, double Y)
 -- Function: int totalordermagf (float X, float Y)
 -- Function: int totalordermagl (long double X, long double Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions determine whether the total order relationship,
     defined in IEEE 754-2008, is true for the absolute values of X and
     Y, returning nonzero if it is true and zero if it is false.  No
     exceptions are raised even for signaling NaNs.

   Not all machines provide hardware support for these operations.  On
machines that don't, the macros can be very slow.  Therefore, you should
not use these functions when NaN is not a concern.

   NB: There are no macros 'isequal' or  isunequal’.  They are
unnecessary, because the '==' and  !=’ operators do _not_ throw an
exception if one or both of the operands are NaN.

==============================================================================
File: libc.info,  Node: |Misc_FP_Arithmetic|,  Prev: |FP_Comparison_Functions|,  Up: |Arithmetic_Functions|
==============================================================================

                                                            *Misc_FP_Arithmetic*

20.8.7 Miscellaneous FP arithmetic functions
--------------------------------------------

The functions in this section perform miscellaneous but common
operations that are awkward to express with C operators.  On some
processors these functions can use special machine instructions to
perform these operations faster than the equivalent C code.

 -- Function: double fmin (double X, double Y)
 -- Function: float fminf (float X, float Y)
 -- Function: long double fminl (long double X, long double Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'fmin' function returns the lesser of the two values X and Y.
     It is similar to the expression
          ((x) < (y) ? (x) : (y))
     except that X and Y are only evaluated once.

     If an argument is NaN, the other argument is returned.  If both
     arguments are NaN, NaN is returned.

 -- Function: double fmax (double X, double Y)
 -- Function: float fmaxf (float X, float Y)
 -- Function: long double fmaxl (long double X, long double Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'fmax' function returns the greater of the two values X and Y.

     If an argument is NaN, the other argument is returned.  If both
     arguments are NaN, NaN is returned.

 -- Function: double fminmag (double X, double Y)
 -- Function: float fminmagf (float X, float Y)
 -- Function: long double fminmagl (long double X, long double Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions, from TS 18661-1:2014, return whichever of the two
     values X and Y has the smaller absolute value.  If both have the
     same absolute value, or either is NaN, they behave the same as the
     'fmin' functions.

 -- Function: double fmaxmag (double X, double Y)
 -- Function: float fmaxmagf (float X, float Y)
 -- Function: long double fmaxmagl (long double X, long double Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions, from TS 18661-1:2014, return whichever of the two
     values X and Y has the greater absolute value.  If both have the
     same absolute value, or either is NaN, they behave the same as the
     'fmax' functions.

 -- Function: double fdim (double X, double Y)
 -- Function: float fdimf (float X, float Y)
 -- Function: long double fdiml (long double X, long double Y)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'fdim' function returns the positive difference between X and
     Y.  The positive difference is X - Y if X is greater than Y, and 0
     otherwise.

     If X, Y, or both are NaN, NaN is returned.

 -- Function: double fma (double X, double Y, double Z)
 -- Function: float fmaf (float X, float Y, float Z)
 -- Function: long double fmal (long double X, long double Y, long
          double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'fma' function performs floating-point multiply-add.  This is
     the operation (X * Y) + Z, but the intermediate result is not
     rounded to the destination type.  This can sometimes improve the
     precision of a calculation.

     This function was introduced because some processors have a special
     instruction to perform multiply-add.  The C compiler cannot use it
     directly, because the expression 'x*y + z' is defined to round the
     intermediate result.  'fma' lets you choose when you want to round
     only once.

     On processors which do not implement multiply-add in hardware,
     'fma' can be very slow since it must avoid intermediate rounding.
     'math.h' defines the symbols  FP_FAST_FMA’, ‘FP_FAST_FMAF’, and
     'FP_FAST_FMAL' when the corresponding version of  fma’ is no slower
     than the expression 'x*y + z'.  In the GNU C Library, this always
     means the operation is implemented in hardware.

==============================================================================
File: libc.info,  Node: |Complex_Numbers|,  Next: |Operations_on_Complex|,  Prev: |Arithmetic_Functions|,  Up: |Arithmetic|
==============================================================================

                                                               *Complex_Numbers*

20.9 Complex Numbers
--------------------

ISO C99 introduces support for complex numbers in C. This is done with a
new type qualifier, 'complex'.  It is a keyword if and only if
'complex.h' has been included.  There are three complex types,
corresponding to the three real types: 'float complex',  double
complex', and 'long double complex .

   To construct complex numbers you need a way to indicate the imaginary
part of a number.  There is no standard notation for an imaginary
floating point constant.  Instead, 'complex.h' defines two macros that
can be used to create complex numbers.

 -- Macro: const float complex _Complex_I
     This macro is a representation of the complex number '0+1i'.
     Multiplying a real floating-point value by '_Complex_I' gives a
     complex number whose value is purely imaginary.  You can use this
     to construct complex constants:

          3.0 + 4.0i = 3.0 + 4.0 * _Complex_I

     Note that '_Complex_I * _Complex_I' has the value  -1’, but the
     type of that value is 'complex'.

'_Complex_I' is a bit of a mouthful.   complex.h’ also defines a shorter
name for the same constant.

 -- Macro: const float complex I
     This macro has exactly the same value as '_Complex_I'.  Most of the
     time it is preferable.  However, it causes problems if you want to
     use the identifier 'I' for something else.  You can safely write

          #include <complex.h>
          #undef I

     if you need 'I' for your own purposes.  (In that case we recommend
     you also define some other short name for '_Complex_I', such as
     'J'.)

==============================================================================
File: libc.info,  Node: |Operations_on_Complex|,  Next: |Parsing_of_Numbers|,  Prev: |Complex_Numbers|,  Up: |Arithmetic|
==============================================================================

                                                         *Operations_on_Complex*

20.10 Projections, Conjugates, and Decomposing of Complex Numbers
-----------------------------------------------------------------

ISO C99 also defines functions that perform basic operations on complex
numbers, such as decomposition and conjugation.  The prototypes for all
these functions are in 'complex.h'.  All functions are available in
three variants, one for each of the three complex types.

 -- Function: double creal (complex double Z)
 -- Function: float crealf (complex float Z)
 -- Function: long double creall (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the real part of the complex number Z.

 -- Function: double cimag (complex double Z)
 -- Function: float cimagf (complex float Z)
 -- Function: long double cimagl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the imaginary part of the complex number Z.

 -- Function: complex double conj (complex double Z)
 -- Function: complex float conjf (complex float Z)
 -- Function: complex long double conjl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the conjugate value of the complex number Z.
     The conjugate of a complex number has the same real part and a
     negated imaginary part.  In other words, 'conj(a + bi) = a + -bi'.

 -- Function: double carg (complex double Z)
 -- Function: float cargf (complex float Z)
 -- Function: long double cargl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the argument of the complex number Z.  The
     argument of a complex number is the angle in the complex plane
     between the positive real axis and a line passing through zero and
     the number.  This angle is measured in the usual fashion and ranges
     from -pi to pi.

     'carg' has a branch cut along the negative real axis.

 -- Function: complex double cproj (complex double Z)
 -- Function: complex float cprojf (complex float Z)
 -- Function: complex long double cprojl (complex long double Z)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     These functions return the projection of the complex value Z onto
     the Riemann sphere.  Values with an infinite imaginary part are
     projected to positive infinity on the real axis, even if the real
     part is NaN. If the real part is infinite, the result is equivalent
     to

          INFINITY + I * copysign (0.0, cimag (z))

==============================================================================
File: libc.info,  Node: |Parsing_of_Numbers|,  Next: |Printing_of_Floats|,  Prev: |Operations_on_Complex|,  Up: |Arithmetic|
==============================================================================

                                                            *Parsing_of_Numbers*

20.11 Parsing of Numbers
------------------------

This section describes functions for 'reading' integer and
floating-point numbers from a string.  It may be more convenient in some
cases to use 'sscanf' or one of the related functions; see *note
Formatted Input::.  But often you can make a program more robust by
finding the tokens in the string by hand, then converting the numbers
one by one.

MENU

* |Parsing_of_Integers|::         Functions for conversion of integer values.
* |Parsing_of_Floats|::           Functions for conversion of floating-point
				 values.

==============================================================================
File: libc.info,  Node: |Parsing_of_Integers|,  Next: |Parsing_of_Floats|,  Up: |Parsing_of_Numbers|
==============================================================================

                                                           *Parsing_of_Integers*

20.11.1 Parsing of Integers
---------------------------

The 'str' functions are declared in  stdlib.h’ and those beginning with
'wcs' are declared in  wchar.h’.  One might wonder about the use of
'restrict' in the prototypes of the functions in this section.  It is
seemingly useless but the ISO C standard uses it (for the functions
defined there) so we have to do it as well.

 -- Function: long int strtol (const char *restrict STRING, char
          **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'strtol' ('string-to-long') function converts the initial part
     of STRING to a signed integer, which is returned as a value of type
     'long int'.

     This function attempts to decompose STRING as follows:

        - A (possibly empty) sequence of whitespace characters.  Which
          characters are whitespace is determined by the 'isspace'
          function (*note Classification of Characters::).  These are
          discarded.

        - An optional plus or minus sign ('+' or  -’).

        - A nonempty sequence of digits in the radix specified by BASE.

          If BASE is zero, decimal radix is assumed unless the series of
          digits begins with '0' (specifying octal radix), or  0x’ or
          '0X' (specifying hexadecimal radix); in other words, the same
          syntax used for integer constants in C.

          Otherwise BASE must have a value between '2' and  36’.  If
          BASE is '16', the digits may optionally be preceded by  0x’ or
          '0X'.  If base has no legal value the value returned is  0l’
          and the global variable 'errno' is set to  EINVAL’.

        - Any remaining characters in the string.  If TAILPTR is not a
          null pointer, 'strtol' stores a pointer to this tail in
          '*TAILPTR'.

     If the string is empty, contains only whitespace, or does not
     contain an initial substring that has the expected syntax for an
     integer in the specified BASE, no conversion is performed.  In this
     case, 'strtol' returns a value of zero and the value stored in
     '*TAILPTR' is the value of STRING.

     In a locale other than the standard '"C"' locale, this function may
     recognize additional implementation-dependent syntax.

     If the string has valid syntax for an integer but the value is not
     representable because of overflow, 'strtol' returns either
     'LONG_MAX' or  LONG_MIN’ (*note Range of Type::), as appropriate
     for the sign of the value.  It also sets 'errno' to  ERANGE’ to
     indicate there was overflow.

     You should not check for errors by examining the return value of
     'strtol', because the string might be a valid representation of
     '0l',  LONG_MAX’, or ‘LONG_MIN’.  Instead, check whether TAILPTR
     points to what you expect after the number (e.g.  ''\0'' if the
     string should end after the number).  You also need to clear ERRNO
     before the call and check it afterward, in case there was overflow.

     There is an example at the end of this section.

 -- Function: long int wcstol (const wchar_t *restrict STRING, wchar_t
          **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'wcstol' function is equivalent to the  strtol’ function in
     nearly all aspects but handles wide character strings.

     The 'wcstol' function was introduced in Amendment 1 of ISO C90.

 -- Function: unsigned long int strtoul (const char *retrict STRING,
          char **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'strtoul' ('string-to-unsigned-long') function is like  strtol’
     except it converts to an 'unsigned long int' value.  The syntax is
     the same as described above for 'strtol'.  The value returned on
     overflow is 'ULONG_MAX' (*note Range of Type::).

     If STRING depicts a negative number, 'strtoul' acts the same as
     STRTOL but casts the result to an unsigned integer.  That means for
     example that 'strtoul' on  "-1"’ returns ‘ULONG_MAX’ and an input
     more negative than 'LONG_MIN' returns ( ULONG_MAX’ + 1) / 2.

     'strtoul' sets ERRNO to  EINVAL’ if BASE is out of range, or
     'ERANGE' on overflow.

 -- Function: unsigned long int wcstoul (const wchar_t *restrict STRING,
          wchar_t **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'wcstoul' function is equivalent to the  strtoul’ function in
     nearly all aspects but handles wide character strings.

     The 'wcstoul' function was introduced in Amendment 1 of ISO C90.

 -- Function: long long int strtoll (const char *restrict STRING, char
          **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'strtoll' function is like  strtol’ except that it returns a
     'long long int' value, and accepts numbers with a correspondingly
     larger range.

     If the string has valid syntax for an integer but the value is not
     representable because of overflow, 'strtoll' returns either
     'LLONG_MAX' or  LLONG_MIN’ (*note Range of Type::), as appropriate
     for the sign of the value.  It also sets 'errno' to  ERANGE’ to
     indicate there was overflow.

     The 'strtoll' function was introduced in ISO C99.

 -- Function: long long int wcstoll (const wchar_t *restrict STRING,
          wchar_t **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'wcstoll' function is equivalent to the  strtoll’ function in
     nearly all aspects but handles wide character strings.

     The 'wcstoll' function was introduced in Amendment 1 of ISO C90.

 -- Function: long long int strtoq (const char *restrict STRING, char
          **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     'strtoq' ('string-to-quad-word') is the BSD name for  strtoll’.

 -- Function: long long int wcstoq (const wchar_t *restrict STRING,
          wchar_t **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'wcstoq' function is equivalent to the  strtoq’ function in
     nearly all aspects but handles wide character strings.

     The 'wcstoq' function is a GNU extension.

 -- Function: unsigned long long int strtoull (const char *restrict
          STRING, char **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'strtoull' function is related to  strtoll’ the same way
     'strtoul' is related to  strtol’.

     The 'strtoull' function was introduced in ISO C99.

 -- Function: unsigned long long int wcstoull (const wchar_t *restrict
          STRING, wchar_t **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'wcstoull' function is equivalent to the  strtoull’ function in
     nearly all aspects but handles wide character strings.

     The 'wcstoull' function was introduced in Amendment 1 of ISO C90.

 -- Function: unsigned long long int strtouq (const char *restrict
          STRING, char **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     'strtouq' is the BSD name for  strtoull’.

 -- Function: unsigned long long int wcstouq (const wchar_t *restrict
          STRING, wchar_t **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'wcstouq' function is equivalent to the  strtouq’ function in
     nearly all aspects but handles wide character strings.

     The 'wcstouq' function is a GNU extension.

 -- Function: intmax_t strtoimax (const char *restrict STRING, char
          **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'strtoimax' function is like  strtol’ except that it returns a
     'intmax_t' value, and accepts numbers of a corresponding range.

     If the string has valid syntax for an integer but the value is not
     representable because of overflow, 'strtoimax' returns either
     'INTMAX_MAX' or  INTMAX_MIN’ (*note Integers::), as appropriate for
     the sign of the value.  It also sets 'errno' to  ERANGE’ to
     indicate there was overflow.

     See *note Integers:: for a description of the 'intmax_t' type.  The
     'strtoimax' function was introduced in ISO C99.

 -- Function: intmax_t wcstoimax (const wchar_t *restrict STRING,
          wchar_t **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'wcstoimax' function is equivalent to the  strtoimax’ function
     in nearly all aspects but handles wide character strings.

     The 'wcstoimax' function was introduced in ISO C99.

 -- Function: uintmax_t strtoumax (const char *restrict STRING, char
          **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'strtoumax' function is related to  strtoimax’ the same way
     that 'strtoul' is related to  strtol’.

     See *note Integers:: for a description of the 'intmax_t' type.  The
     'strtoumax' function was introduced in ISO C99.

 -- Function: uintmax_t wcstoumax (const wchar_t *restrict STRING,
          wchar_t **restrict TAILPTR, int BASE)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'wcstoumax' function is equivalent to the  strtoumax’ function
     in nearly all aspects but handles wide character strings.

     The 'wcstoumax' function was introduced in ISO C99.

 -- Function: long int atol (const char *STRING)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     This function is similar to the 'strtol' function with a BASE
     argument of '10', except that it need not detect overflow errors.
     The 'atol' function is provided mostly for compatibility with
     existing code; using 'strtol' is more robust.

 -- Function: int atoi (const char *STRING)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     This function is like 'atol', except that it returns an  int’.  The
     'atoi' function is also considered obsolete; use  strtol’ instead.

 -- Function: long long int atoll (const char *STRING)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     This function is similar to 'atol', except it returns a  long long
     int'.

     The 'atoll' function was introduced in ISO C99.  It too is obsolete
     (despite having just been added); use 'strtoll' instead.

   All the functions mentioned in this section so far do not handle
alternative representations of characters as described in the locale
data.  Some locales specify thousands separator and the way they have to
be used which can help to make large numbers more readable.  To read
such numbers one has to use the 'scanf' functions with the  '’ flag.

   Here is a function which parses a string as a sequence of integers
and returns the sum of them:

     int
     sum_ints_from_string (char *string)
     {
       int sum = 0;

       while (1) {
         char *tail;
         int next;

         /* Skip whitespace by hand, to detect the end.  */
         while (isspace (*string)) string++;
         if (*string == 0)
           break;

         /* There is more nonwhitespace,  */
         /* so it ought to be another number.  */
         errno = 0;
         /* Parse it.  */
         next = strtol (string, &tail, 0);
         /* Add it in, if not overflow.  */
         if (errno)
           printf ("Overflow\n");
         else
           sum += next;
         /* Advance past it.  */
         string = tail;
       }

       return sum;
     }

==============================================================================
File: libc.info,  Node: |Parsing_of_Floats|,  Prev: |Parsing_of_Integers|,  Up: |Parsing_of_Numbers|
==============================================================================

                                                             *Parsing_of_Floats*

20.11.2 Parsing of Floats
-------------------------

The 'str' functions are declared in  stdlib.h’ and those beginning with
'wcs' are declared in  wchar.h’.  One might wonder about the use of
'restrict' in the prototypes of the functions in this section.  It is
seemingly useless but the ISO C standard uses it (for the functions
defined there) so we have to do it as well.

 -- Function: double strtod (const char *restrict STRING, char
          **restrict TAILPTR)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'strtod' ('string-to-double') function converts the initial
     part of STRING to a floating-point number, which is returned as a
     value of type 'double'.

     This function attempts to decompose STRING as follows:

        - A (possibly empty) sequence of whitespace characters.  Which
          characters are whitespace is determined by the 'isspace'
          function (*note Classification of Characters::).  These are
          discarded.

        - An optional plus or minus sign ('+' or  -’).

        - A floating point number in decimal or hexadecimal format.  The
          decimal format is:

               A nonempty sequence of digits optionally containing a
               decimal-point character normally '.', but it depends on
               the locale (*note General Numeric::).

               An optional exponent part, consisting of a character 'e'
               or 'E', an optional sign, and a sequence of digits.

          The hexadecimal format is as follows:

               A 0x or 0X followed by a nonempty sequence of hexadecimal
               digits optionally containing a decimal-point
               character normally '.', but it depends on the locale
               (*note General Numeric::).

               An optional binary-exponent part, consisting of a
               character 'p' or  P’, an optional sign, and a sequence of
               digits.

        - Any remaining characters in the string.  If TAILPTR is not a
          null pointer, a pointer to this tail of the string is stored
          in '*TAILPTR'.

     If the string is empty, contains only whitespace, or does not
     contain an initial substring that has the expected syntax for a
     floating-point number, no conversion is performed.  In this case,
     'strtod' returns a value of zero and the value returned in
     '*TAILPTR' is the value of STRING.

     In a locale other than the standard '"C"' or  "POSIX"’ locales,
     this function may recognize additional locale-dependent syntax.

     If the string has valid syntax for a floating-point number but the
     value is outside the range of a 'double',  strtod’ will signal
     overflow or underflow as described in *note Math Error Reporting::.

     'strtod' recognizes four special input strings.  The strings
     '"inf"' and  "infinity"’ are converted to oo, or to the largest
     representable value if the floating-point format doesn't support
     infinities.  You can prepend a '"+"' or  "-"’ to specify the sign.
     Case is ignored when scanning these strings.

     The strings '"nan"' and  "nan(CHARS...)"’ are converted to NaN.
     Again, case is ignored.  If CHARS... are provided, they are used in
     some unspecified fashion to select a particular representation of
     NaN (there can be several).

     Since zero is a valid result as well as the value returned on
     error, you should check for errors in the same way as for 'strtol',
     by examining ERRNO and TAILPTR.

 -- Function: float strtof (const char *STRING, char **TAILPTR)
 -- Function: long double strtold (const char *STRING, char **TAILPTR)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     These functions are analogous to 'strtod', but return  float’ and
     'long double' values respectively.  They report errors in the same
     way as 'strtod'.   strtof’ can be substantially faster than
     'strtod', but has less precision; conversely,  strtold’ can be much
     slower but has more precision (on systems where 'long double' is a
     separate type).

     These functions have been GNU extensions and are new to ISO C99.

 -- Function: double wcstod (const wchar_t *restrict STRING, wchar_t
          **restrict TAILPTR)
 -- Function: float wcstof (const wchar_t *STRING, wchar_t **TAILPTR)
 -- Function: long double wcstold (const wchar_t *STRING, wchar_t
          **TAILPTR)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'wcstod',  wcstof’, and ‘wcstol’ functions are equivalent in
     nearly all aspect to the 'strtod',  strtof’, and ‘strtold’
     functions but it handles wide character string.

     The 'wcstod' function was introduced in Amendment 1 of ISO C90.
     The 'wcstof' and  wcstold’ functions were introduced in ISO C99.

 -- Function: double atof (const char *STRING)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     This function is similar to the 'strtod' function, except that it
     need not detect overflow and underflow errors.  The 'atof' function
     is provided mostly for compatibility with existing code; using
     'strtod' is more robust.

   The GNU C Library also provides '_l' versions of these functions,
which take an additional argument, the locale to use in conversion.

   See also *note Parsing of Integers::.

==============================================================================
File: libc.info,  Node: |Printing_of_Floats|,  Next: |System_V_Number_Conversion|,  Prev: |Parsing_of_Numbers|,  Up: |Arithmetic|
==============================================================================

                                                            *Printing_of_Floats*

20.12 Printing of Floats
------------------------

The 'strfrom' functions are declared in  stdlib.h’.

 -- Function: int strfromd (char *restrict STRING, size_t SIZE, const
          char *restrict FORMAT, double VALUE)
 -- Function: int strfromf (char *restrict STRING, size_t SIZE, const
          char *restrict FORMAT, float VALUE)
 -- Function: int strfroml (char *restrict STRING, size_t SIZE, const
          char *restrict FORMAT, long double VALUE)
     Preliminary: | MT-Safe locale | AS-Unsafe heap | AC-Unsafe mem |
     *Note POSIX Safety Concepts::.

     The functions 'strfromd' ('string-from-double'),  strfromf’
     ('string-from-float'), and 'strfroml' ( string-from-long-double”)
     convert the floating-point number VALUE to a string of characters
     and stores them into the area pointed to by STRING.  The conversion
     writes at most SIZE characters and respects the format specified by
     FORMAT.

     The format string must start with the character '%'.  An optional
     precision follows, which starts with a period, '.', and may be
     followed by a decimal integer, representing the precision.  If a
     decimal integer is not specified after the period, the precision is
     taken to be zero.  The character '*' is not allowed.  Finally, the
     format string ends with one of the following conversion specifiers:
     'a',  A’, ‘e’, ‘E’, ‘f’, ‘F’, ‘g’ or ‘G’ (*note Table of Output
     Conversions::).  Invalid format strings result in undefined
     behavior.

     These functions return the number of characters that would have
     been written to STRING had SIZE been sufficiently large, not
     counting the terminating null character.  Thus, the null-terminated
     output has been completely written if and only if the returned
     value is less than SIZE.

     These functions were introduced by ISO/IEC TS 18661-1.

==============================================================================
File: libc.info,  Node: |System_V_Number_Conversion|,  Prev: |Printing_of_Floats|,  Up: |Arithmetic|
==============================================================================

                                                    *System_V_Number_Conversion*

20.13 Old-fashioned System V number-to-string functions
-------------------------------------------------------

The old System V C library provided three functions to convert numbers
to strings, with unusual and hard-to-use semantics.  The GNU C Library
also provides these functions and some natural extensions.

   These functions are only available in the GNU C Library and on
systems descended from AT&T Unix.  Therefore, unless these functions do
precisely what you need, it is better to use 'sprintf', which is
standard.

   All these functions are defined in 'stdlib.h'.

 -- Function: char * ecvt (double VALUE, int NDIGIT, int *DECPT, int
          *NEG)
     Preliminary: | MT-Unsafe race:ecvt | AS-Unsafe | AC-Safe | *Note
     POSIX Safety Concepts::.

     The function 'ecvt' converts the floating-point number VALUE to a
     string with at most NDIGIT decimal digits.  The returned string
     contains no decimal point or sign.  The first digit of the string
     is non-zero (unless VALUE is actually zero) and the last digit is
     rounded to nearest.  '*DECPT' is set to the index in the string of
     the first digit after the decimal point.  '*NEG' is set to a
     nonzero value if VALUE is negative, zero otherwise.

     If NDIGIT decimal digits would exceed the precision of a 'double'
     it is reduced to a system-specific value.

     The returned string is statically allocated and overwritten by each
     call to 'ecvt'.

     If VALUE is zero, it is implementation defined whether '*DECPT' is
     '0' or  1’.

     For example: 'ecvt (12.3, 5, &d, &n)' returns  "12300"’ and sets D
     to '2' and N to  0’.

 -- Function: char * fcvt (double VALUE, int NDIGIT, int *DECPT, int
          *NEG)
     Preliminary: | MT-Unsafe race:fcvt | AS-Unsafe heap | AC-Unsafe mem
     | *Note POSIX Safety Concepts::.

     The function 'fcvt' is like  ecvt’, but NDIGIT specifies the number
     of digits after the decimal point.  If NDIGIT is less than zero,
     VALUE is rounded to the NDIGIT+1'th place to the left of the
     decimal point.  For example, if NDIGIT is '-1', VALUE will be
     rounded to the nearest 10.  If NDIGIT is negative and larger than
     the number of digits to the left of the decimal point in VALUE,
     VALUE will be rounded to one significant digit.

     If NDIGIT decimal digits would exceed the precision of a 'double'
     it is reduced to a system-specific value.

     The returned string is statically allocated and overwritten by each
     call to 'fcvt'.

 -- Function: char * gcvt (double VALUE, int NDIGIT, char *BUF)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'gcvt' is functionally equivalent to  sprintf(buf, "%*g", ndigit,
     value'.  It is provided only for compatibility s sake.  It returns
     BUF.

     If NDIGIT decimal digits would exceed the precision of a 'double'
     it is reduced to a system-specific value.

   As extensions, the GNU C Library provides versions of these three
functions that take 'long double' arguments.

 -- Function: char * qecvt (long double VALUE, int NDIGIT, int *DECPT,
          int *NEG)
     Preliminary: | MT-Unsafe race:qecvt | AS-Unsafe | AC-Safe | *Note
     POSIX Safety Concepts::.

     This function is equivalent to 'ecvt' except that it takes a  long
     double' for the first parameter and that NDIGIT is restricted by
     the precision of a 'long double'.

 -- Function: char * qfcvt (long double VALUE, int NDIGIT, int *DECPT,
          int *NEG)
     Preliminary: | MT-Unsafe race:qfcvt | AS-Unsafe heap | AC-Unsafe
     mem | *Note POSIX Safety Concepts::.

     This function is equivalent to 'fcvt' except that it takes a  long
     double' for the first parameter and that NDIGIT is restricted by
     the precision of a 'long double'.

 -- Function: char * qgcvt (long double VALUE, int NDIGIT, char *BUF)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function is equivalent to 'gcvt' except that it takes a  long
     double' for the first parameter and that NDIGIT is restricted by
     the precision of a 'long double'.

   The 'ecvt' and  fcvt’ functions, and their ‘long double’ equivalents,
all return a string located in a static buffer which is overwritten by
the next call to the function.  The GNU C Library provides another set
of extended functions which write the converted string into a
user-supplied buffer.  These have the conventional '_r' suffix.

   'gcvt_r' is not necessary, because  gcvt’ already uses a
user-supplied buffer.

 -- Function: int ecvt_r (double VALUE, int NDIGIT, int *DECPT, int
          *NEG, char *BUF, size_t LEN)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'ecvt_r' function is the same as  ecvt’, except that it places
     its result into the user-specified buffer pointed to by BUF, with
     length LEN.  The return value is '-1' in case of an error and zero
     otherwise.

     This function is a GNU extension.

 -- Function: int fcvt_r (double VALUE, int NDIGIT, int *DECPT, int
          *NEG, char *BUF, size_t LEN)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'fcvt_r' function is the same as  fcvt’, except that it places
     its result into the user-specified buffer pointed to by BUF, with
     length LEN.  The return value is '-1' in case of an error and zero
     otherwise.

     This function is a GNU extension.

 -- Function: int qecvt_r (long double VALUE, int NDIGIT, int *DECPT,
          int *NEG, char *BUF, size_t LEN)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'qecvt_r' function is the same as  qecvt’, except that it
     places its result into the user-specified buffer pointed to by BUF,
     with length LEN.  The return value is '-1' in case of an error and
     zero otherwise.

     This function is a GNU extension.

 -- Function: int qfcvt_r (long double VALUE, int NDIGIT, int *DECPT,
          int *NEG, char *BUF, size_t LEN)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'qfcvt_r' function is the same as  qfcvt’, except that it
     places its result into the user-specified buffer pointed to by BUF,
     with length LEN.  The return value is '-1' in case of an error and
     zero otherwise.

     This function is a GNU extension.

==============================================================================
File: libc.info,  Node: |Date_and_Time|,  Next: |Resource_Usage_And_Limitation|,  Prev: |Arithmetic|,  Up: |Top|
==============================================================================

                                                                 *Date_and_Time*

21 Date and Time
================

This chapter describes functions for manipulating dates and times,
including functions for determining what time it is and conversion
between different time representations.

MENU

* |Time_Basics|::                 Concepts and definitions.
* |Elapsed_Time|::                Data types to represent elapsed times
* |Processor_And_CPU_Time|::      Time a program has spent executing.
* |Calendar_Time|::               Manipulation of 'real' dates and times.
* |Setting_an_Alarm|::            Sending a signal after a specified time.
* |Sleeping|::                    Waiting for a period of time.

==============================================================================
File: libc.info,  Node: |Time_Basics|,  Next: |Elapsed_Time|,  Up:
==============================================================================
|Date_and_Time|

                                                                   *Time_Basics*

21.1 Time Basics
----------------

Discussing time in a technical manual can be difficult because the word
'time' in English refers to lots of different things.  In this manual,
we use a rigorous terminology to avoid confusion, and the only thing we
use the simple word 'time' for is to talk about the abstract concept.

   A 'calendar time' is a point in the time continuum, for example
November 4, 1990, at 18:02.5 UTC. Sometimes this is called 'absolute
time'.

   We don't speak of a 'date', because that is inherent in a calendar
time.

   An 'interval' is a contiguous part of the time continuum between two
calendar times, for example the hour between 9:00 and 10:00 on July 4,
1980.

   An 'elapsed time' is the length of an interval, for example, 35
minutes.  People sometimes sloppily use the word 'interval' to refer to
the elapsed time of some interval.

   An 'amount of time' is a sum of elapsed times, which need not be of
any specific intervals.  For example, the amount of time it takes to
read a book might be 9 hours, independently of when and in how many
sittings it is read.

   A 'period' is the elapsed time of an interval between two events,
especially when they are part of a sequence of regularly repeating
events.

   'CPU time' is like calendar time, except that it is based on the
subset of the time continuum when a particular process is actively using
a CPU. CPU time is, therefore, relative to a process.

   'Processor time' is an amount of time that a CPU is in use.  In fact,
it's a basic system resource, since there s a limit to how much can
exist in any given interval (that limit is the elapsed time of the
interval times the number of CPUs in the processor).  People often call
this CPU time, but we reserve the latter term in this manual for the
definition above.

==============================================================================
File: libc.info,  Node: |Elapsed_Time|,  Next: |Processor_And_CPU_Time|,  Prev: |Time_Basics|,  Up: |Date_and_Time|
==============================================================================

                                                                  *Elapsed_Time*

21.2 Elapsed Time
-----------------

One way to represent an elapsed time is with a simple arithmetic data
type, as with the following function to compute the elapsed time between
two calendar times.  This function is declared in 'time.h'.

 -- Function: double difftime (time_t TIME1, time_t TIME0)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'difftime' function returns the number of seconds of elapsed
     time between calendar time TIME1 and calendar time TIME0, as a
     value of type 'double'.  The difference ignores leap seconds unless
     leap second support is enabled.

     In the GNU C Library, you can simply subtract 'time_t' values.  But
     on other systems, the 'time_t' data type might use some other
     encoding where subtraction doesn't work directly.

   The GNU C Library provides two data types specifically for
representing an elapsed time.  They are used by various GNU C Library
functions, and you can use them for your own purposes too.  They're
exactly the same except that one has a resolution in microseconds, and
the other, newer one, is in nanoseconds.

 -- Data Type: struct timeval
     The 'struct timeval' structure represents an elapsed time.  It is
     declared in 'sys/time.h' and has the following members:

     'time_t tv_sec'
          This represents the number of whole seconds of elapsed time.

     'long int tv_usec'
          This is the rest of the elapsed time (a fraction of a second),
          represented as the number of microseconds.  It is always less
          than one million.

 -- Data Type: struct timespec
     The 'struct timespec' structure represents an elapsed time.  It is
     declared in 'time.h' and has the following members:

     'time_t tv_sec'
          This represents the number of whole seconds of elapsed time.

     'long int tv_nsec'
          This is the rest of the elapsed time (a fraction of a second),
          represented as the number of nanoseconds.  It is always less
          than one billion.

   It is often necessary to subtract two values of type 'struct timeval'
or 'struct timespec'.  Here is the best way to do this.  It works even
on some peculiar operating systems where the 'tv_sec' member has an
unsigned type.


     /* Subtract the 'struct timeval' values X and Y,
        storing the result in RESULT.
        Return 1 if the difference is negative, otherwise 0. */

     int
     timeval_subtract (struct timeval *result, struct timeval *x, struct timeval *y)
     {
       /* Perform the carry for the later subtraction by updating Y. */
       if (x->tv_usec < y->tv_usec) {
         int nsec = (y->tv_usec - x->tv_usec) / 1000000 + 1;
         y->tv_usec -= 1000000 * nsec;
         y->tv_sec += nsec;
       }
       if (x->tv_usec - y->tv_usec > 1000000) {
         int nsec = (x->tv_usec - y->tv_usec) / 1000000;
         y->tv_usec += 1000000 * nsec;
         y->tv_sec -= nsec;
       }

       /* Compute the time remaining to wait.
          'tv_usec' is certainly positive. */
       result->tv_sec = x->tv_sec - y->tv_sec;
       result->tv_usec = x->tv_usec - y->tv_usec;

       /* Return 1 if result is negative. */
       return x->tv_sec < y->tv_sec;
     }

   Common functions that use 'struct timeval' are  gettimeofday’ and
'settimeofday'.

   There are no GNU C Library functions specifically oriented toward
dealing with elapsed times, but the calendar time, processor time, and
alarm and sleeping functions have a lot to do with them.

==============================================================================
File: libc.info,  Node: |Processor_And_CPU_Time|,  Next: |Calendar_Time|,  Prev: |Elapsed_Time|,  Up: |Date_and_Time|
==============================================================================

                                                        *Processor_And_CPU_Time*

21.3 Processor And CPU Time
---------------------------

If you're trying to optimize your program or measure its efficiency,
it's very useful to know how much processor time it uses.  For that,
calendar time and elapsed times are useless because a process may spend
time waiting for I/O or for other processes to use the CPU. However, you
can get the information with the functions in this section.

   CPU time (*note Time Basics::) is represented by the data type
'clock_t', which is a number of 'clock ticks'.  It gives the total
amount of time a process has actively used a CPU since some arbitrary
event.  On GNU systems, that event is the creation of the process.
While arbitrary in general, the event is always the same event for any
particular process, so you can always measure how much time on the CPU a
particular computation takes by examining the process' CPU time before
and after the computation.

   On GNU/Linux and GNU/Hurd systems, 'clock_t' is equivalent to  long
int' and 'CLOCKS_PER_SEC  is an integer value.  But in other systems,
both 'clock_t' and the macro  CLOCKS_PER_SEC’ can be either integer or
floating-point types.  Casting CPU time values to 'double', as in the
example above, makes sure that operations such as arithmetic and
printing work properly and consistently no matter what the underlying
representation is.

   Note that the clock can wrap around.  On a 32bit system with
'CLOCKS_PER_SEC' set to one million this function will return the same
value approximately every 72 minutes.

   For additional functions to examine a process' use of processor time,
and to control it, see *note Resource Usage And Limitation::.

MENU

* |CPU_Time|::                    The 'clock' function.
* |Processor_Time|::              The 'times' function.

==============================================================================
File: libc.info,  Node: |CPU_Time|,  Next: |Processor_Time|,  Up: |Processor_And_CPU_Time|
==============================================================================

                                                                      *CPU_Time*

21.3.1 CPU Time Inquiry
-----------------------

To get a process' CPU time, you can use the 'clock  function.  This
facility is declared in the header file 'time.h'.

   In typical usage, you call the 'clock' function at the beginning and
end of the interval you want to time, subtract the values, and then
divide by 'CLOCKS_PER_SEC' (the number of clock ticks per second) to get
processor time, like this:

     #include <time.h>

     clock_t start, end;
     double cpu_time_used;

     start = clock();
     ... /* Do the work. */
     end = clock();
     cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;

   Do not use a single CPU time as an amount of time; it doesn't work
that way.  Either do a subtraction as shown above or query processor
time directly.  *Note Processor Time::.

   Different computers and operating systems vary wildly in how they
keep track of CPU time.  It's common for the internal processor clock to
have a resolution somewhere between a hundredth and millionth of a
second.

 -- Macro: int CLOCKS_PER_SEC
     The value of this macro is the number of clock ticks per second
     measured by the 'clock' function.  POSIX requires that this value
     be one million independent of the actual resolution.

 -- Data Type: clock_t
     This is the type of the value returned by the 'clock' function.
     Values of type 'clock_t' are numbers of clock ticks.

 -- Function: clock_t clock (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns the calling process' current CPU time.  If
     the CPU time is not available or cannot be represented, 'clock'
     returns the value '(clock_t)(-1)'.

==============================================================================
File: libc.info,  Node: |Processor_Time|,  Prev: |CPU_Time|,  Up: |Processor_And_CPU_Time|
==============================================================================

                                                                *Processor_Time*

21.3.2 Processor Time Inquiry
-----------------------------

The 'times' function returns information about a process  consumption of
processor time in a 'struct tms' object, in addition to the process  CPU
time.  *Note Time Basics::.  You should include the header file
'sys/times.h' to use this facility.

 -- Data Type: struct tms
     The 'tms' structure is used to return information about process
     times.  It contains at least the following members:

     'clock_t tms_utime'
          This is the total processor time the calling process has used
          in executing the instructions of its program.

     'clock_t tms_stime'
          This is the processor time the system has used on behalf of
          the calling process.

     'clock_t tms_cutime'
          This is the sum of the 'tms_utime' values and the  tms_cutime’
          values of all terminated child processes of the calling
          process, whose status has been reported to the parent process
          by 'wait' or  waitpid’; see *note Process Completion::.  In
          other words, it represents the total processor time used in
          executing the instructions of all the terminated child
          processes of the calling process, excluding child processes
          which have not yet been reported by 'wait' or  waitpid’.

     'clock_t tms_cstime'
          This is similar to 'tms_cutime', but represents the total
          processor time the system has used on behalf of all the
          terminated child processes of the calling process.

     All of the times are given in numbers of clock ticks.  Unlike CPU
     time, these are the actual amounts of time; not relative to any
     event.  *Note Creating a Process::.

 -- Macro: int CLK_TCK
     This is an obsolete name for the number of clock ticks per second.
     Use 'sysconf (_SC_CLK_TCK)' instead.

 -- Function: clock_t times (struct tms *BUFFER)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'times' function stores the processor time information for the
     calling process in BUFFER.

     The return value is the number of clock ticks since an arbitrary
     point in the past, e.g.  since system start-up.  'times' returns
     '(clock_t)(-1)' to indicate failure.

   *Portability Note:* The 'clock' function described in *note CPU
Time:: is specified by the ISO C standard.  The 'times' function is a
feature of POSIX.1.  On GNU systems, the CPU time is defined to be
equivalent to the sum of the 'tms_utime' and  tms_stime’ fields returned
by 'times'.

==============================================================================
File: libc.info,  Node: |Calendar_Time|,  Next: |Setting_an_Alarm|,  Prev: |Processor_And_CPU_Time|,  Up: |Date_and_Time|
==============================================================================

                                                                 *Calendar_Time*

21.4 Calendar Time
------------------

This section describes facilities for keeping track of calendar time.
*Note Time Basics::.

   The GNU C Library represents calendar time three ways:

   - 'Simple time' (the 'time_t' data type) is a compact representation,
     typically giving the number of seconds of elapsed time since some
     implementation-specific base time.

   - There is also a "high-resolution time" representation.  Like simple
     time, this represents a calendar time as an elapsed time since a
     base time, but instead of measuring in whole seconds, it uses a
     'struct timeval' data type, which includes fractions of a second.
     Use this time representation instead of simple time when you need
     greater precision.

   - 'Local time' or  broken-down time” (the 'struct tm' data type)
     represents a calendar time as a set of components specifying the
     year, month, and so on in the Gregorian calendar, for a specific
     time zone.  This calendar time representation is usually used only
     to communicate with people.

MENU

* |Simple_Calendar_Time|::        Facilities for manipulating calendar time.
* |High_Resolution_Calendar|::    A time representation with greater precision.
* |Broken_down_Time|::            Facilities for manipulating local time.
* |High_Accuracy_Clock|::         Maintaining a high accuracy system clock.
* |Formatting_Calendar_Time|::    Converting times to strings.
* |Parsing_Date_and_Time|::       Convert textual time and date information back
                                 into broken-down time values.
* |TZ_Variable|::                 How users specify the time zone.
* |Time_Zone_Functions|::         Functions to examine or specify the time zone.
* |Time_Functions_Example|::      An example program showing use of some of
				 the time functions.

==============================================================================
File: libc.info,  Node: |Simple_Calendar_Time|,  Next: |High_Resolution_Calendar|,  Up: |Calendar_Time|
==============================================================================

                                                          *Simple_Calendar_Time*

21.4.1 Simple Calendar Time
---------------------------

This section describes the 'time_t' data type for representing calendar
time as simple time, and the functions which operate on simple time
objects.  These facilities are declared in the header file 'time.h'.

 -- Data Type: time_t
     This is the data type used to represent simple time.  Sometimes, it
     also represents an elapsed time.  When interpreted as a calendar
     time value, it represents the number of seconds elapsed since
     00:00:00 on January 1, 1970, Coordinated Universal Time.  (This
     calendar time is sometimes referred to as the 'epoch'.)  POSIX
     requires that this count not include leap seconds, but on some
     systems this count includes leap seconds if you set 'TZ' to certain
     values (*note TZ Variable::).

     Note that a simple time has no concept of local time zone.
     Calendar Time T is the same instant in time regardless of where on
     the globe the computer is.

     In the GNU C Library, 'time_t' is equivalent to  long int’.  In
     other systems, 'time_t' might be either an integer or
     floating-point type.

   The function 'difftime' tells you the elapsed time between two simple
calendar times, which is not always as easy to compute as just
subtracting.  *Note Elapsed Time::.

 -- Function: time_t time (time_t *RESULT)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'time' function returns the current calendar time as a value of
     type 'time_t'.  If the argument RESULT is not a null pointer, the
     calendar time value is also stored in '*RESULT'.  If the current
     calendar time is not available, the value '(time_t)(-1)' is
     returned.

 -- Function: int stime (const time_t *NEWTIME)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'stime' sets the system clock, i.e., it tells the system that the
     current calendar time is NEWTIME, where 'newtime' is interpreted as
     described in the above definition of 'time_t'.

     'settimeofday' is a newer function which sets the system clock to
     better than one second precision.  'settimeofday' is generally a
     better choice than 'stime'.  *Note High-Resolution Calendar::.

     Only the superuser can set the system clock.

     If the function succeeds, the return value is zero.  Otherwise, it
     is '-1' and  errno’ is set accordingly:

     'EPERM'
          The process is not superuser.

==============================================================================
File: libc.info,  Node: |High_Resolution_Calendar|,  Next: |Broken_down_Time|,  Prev: |Simple_Calendar_Time|,  Up: |Calendar_Time|
==============================================================================

                                                      *High_Resolution_Calendar*

21.4.2 High-Resolution Calendar
-------------------------------

The 'time_t' data type used to represent simple times has a resolution
of only one second.  Some applications need more precision.

   So, the GNU C Library also contains functions which are capable of
representing calendar times to a higher resolution than one second.  The
functions and the associated data types described in this section are
declared in 'sys/time.h'.

 -- Data Type: struct timezone
     The 'struct timezone' structure is used to hold minimal information
     about the local time zone.  It has the following members:

     'int tz_minuteswest'
          This is the number of minutes west of UTC.

     'int tz_dsttime'
          If nonzero, Daylight Saving Time applies during some part of
          the year.

     The 'struct timezone' type is obsolete and should never be used.
     Instead, use the facilities described in *note Time Zone
     Functions::.

 -- Function: int gettimeofday (struct timeval *TP, struct timezone
          *TZP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'gettimeofday' function returns the current calendar time as
     the elapsed time since the epoch in the 'struct timeval' structure
     indicated by TP.  (*note Elapsed Time:: for a description of
     'struct timeval').  Information about the time zone is returned in
     the structure pointed to by TZP.  If the TZP argument is a null
     pointer, time zone information is ignored.

     The return value is '0' on success and  -1’ on failure.  The
     following 'errno' error condition is defined for this function:

     'ENOSYS'
          The operating system does not support getting time zone
          information, and TZP is not a null pointer.  GNU systems do
          not support using 'struct timezone' to represent time zone
          information; that is an obsolete feature of 4.3 BSD. Instead,
          use the facilities described in *note Time Zone Functions::.

 -- Function: int settimeofday (const struct timeval *TP, const struct
          timezone *TZP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'settimeofday' function sets the current calendar time in the
     system clock according to the arguments.  As for 'gettimeofday',
     the calendar time is represented as the elapsed time since the
     epoch.  As for 'gettimeofday', time zone information is ignored if
     TZP is a null pointer.

     You must be a privileged user in order to use 'settimeofday'.

     Some kernels automatically set the system clock from some source
     such as a hardware clock when they start up.  Others, including
     Linux, place the system clock in an 'invalid' state (in which
     attempts to read the clock fail).  A call of 'stime' removes the
     system clock from an invalid state, and system startup scripts
     typically run a program that calls 'stime'.

     'settimeofday' causes a sudden jump forwards or backwards, which
     can cause a variety of problems in a system.  Use 'adjtime' (below)
     to make a smooth transition from one time to another by temporarily
     speeding up or slowing down the clock.

     With a Linux kernel, 'adjtimex' does the same thing and can also
     make permanent changes to the speed of the system clock so it
     doesn't need to be corrected as often.

     The return value is '0' on success and  -1’ on failure.  The
     following 'errno' error conditions are defined for this function:

     'EPERM'
          This process cannot set the clock because it is not
          privileged.

     'ENOSYS'
          The operating system does not support setting time zone
          information, and TZP is not a null pointer.

 -- Function: int adjtime (const struct timeval *DELTA, struct timeval
          *OLDDELTA)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function speeds up or slows down the system clock in order to
     make a gradual adjustment.  This ensures that the calendar time
     reported by the system clock is always monotonically increasing,
     which might not happen if you simply set the clock.

     The DELTA argument specifies a relative adjustment to be made to
     the clock time.  If negative, the system clock is slowed down for a
     while until it has lost this much elapsed time.  If positive, the
     system clock is speeded up for a while.

     If the OLDDELTA argument is not a null pointer, the 'adjtime'
     function returns information about any previous time adjustment
     that has not yet completed.

     This function is typically used to synchronize the clocks of
     computers in a local network.  You must be a privileged user to use
     it.

     With a Linux kernel, you can use the 'adjtimex' function to
     permanently change the clock speed.

     The return value is '0' on success and  -1’ on failure.  The
     following 'errno' error condition is defined for this function:

     'EPERM'
          You do not have privilege to set the time.

   *Portability Note:* The 'gettimeofday',  settimeofday’, and ‘adjtime’
functions are derived from BSD.

   Symbols for the following function are declared in 'sys/timex.h'.

 -- Function: int adjtimex (struct timex *TIMEX)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'adjtimex' is functionally identical to  ntp_adjtime’.  *Note High
     Accuracy Clock::.

     This function is present only with a Linux kernel.

==============================================================================
File: libc.info,  Node: |Broken_down_Time|,  Next: |High_Accuracy_Clock|,  Prev: |High_Resolution_Calendar|,  Up: |Calendar_Time|
==============================================================================

                                                              *Broken_down_Time*

21.4.3 Broken-down Time
-----------------------

Calendar time is represented by the usual GNU C Library functions as an
elapsed time since a fixed base calendar time.  This is convenient for
computation, but has no relation to the way people normally think of
calendar time.  By contrast, 'broken-down time' is a binary
representation of calendar time separated into year, month, day, and so
on.  Broken-down time values are not useful for calculations, but they
are useful for printing human readable time information.

   A broken-down time value is always relative to a choice of time zone,
and it also indicates which time zone that is.

   The symbols in this section are declared in the header file 'time.h'.

 -- Data Type: struct tm
     This is the data type used to represent a broken-down time.  The
     structure contains at least the following members, which can appear
     in any order.

     'int tm_sec'
          This is the number of full seconds since the top of the minute
          (normally in the range '0' through  59’, but the actual upper
          limit is '60', to allow for leap seconds if leap second
          support is available).

     'int tm_min'
          This is the number of full minutes since the top of the hour
          (in the range '0' through  59’).

     'int tm_hour'
          This is the number of full hours past midnight (in the range
          '0' through  23’).

     'int tm_mday'
          This is the ordinal day of the month (in the range '1' through
          '31').  Watch out for this one!  As the only ordinal number in
          the structure, it is inconsistent with the rest of the
          structure.

     'int tm_mon'
          This is the number of full calendar months since the beginning
          of the year (in the range '0' through  11’).  Watch out for
          this one!  People usually use ordinal numbers for
          month-of-year (where January = 1).

     'int tm_year'
          This is the number of full calendar years since 1900.

     'int tm_wday'
          This is the number of full days since Sunday (in the range '0'
          through '6').

     'int tm_yday'
          This is the number of full days since the beginning of the
          year (in the range '0' through  365’).

     'int tm_isdst'
          This is a flag that indicates whether Daylight Saving Time is
          (or was, or will be) in effect at the time described.  The
          value is positive if Daylight Saving Time is in effect, zero
          if it is not, and negative if the information is not
          available.

     'long int tm_gmtoff'
          This field describes the time zone that was used to compute
          this broken-down time value, including any adjustment for
          daylight saving; it is the number of seconds that you must add
          to UTC to get local time.  You can also think of this as the
          number of seconds east of UTC. For example, for U.S. Eastern
          Standard Time, the value is '-56060'.  The  tm_gmtoff’ field
          is derived from BSD and is a GNU library extension; it is not
          visible in a strict ISO C environment.

     'const char *tm_zone'
          This field is the name for the time zone that was used to
          compute this broken-down time value.  Like 'tm_gmtoff', this
          field is a BSD and GNU extension, and is not visible in a
          strict ISO C environment.

 -- Function: struct tm * localtime (const time_t *TIME)
     Preliminary: | MT-Unsafe race:tmbuf env locale | AS-Unsafe heap
     lock | AC-Unsafe lock mem fd | *Note POSIX Safety Concepts::.

     The 'localtime' function converts the simple time pointed to by
     TIME to broken-down time representation, expressed relative to the
     user's specified time zone.

     The return value is a pointer to a static broken-down time
     structure, which might be overwritten by subsequent calls to
     'ctime',  gmtime’, or ‘localtime’.  (But no other library function
     overwrites the contents of this object.)

     The return value is the null pointer if TIME cannot be represented
     as a broken-down time; typically this is because the year cannot
     fit into an 'int'.

     Calling 'localtime' also sets the current time zone as if  tzset’
     were called.  *Note Time Zone Functions::.

   Using the 'localtime' function is a big problem in multi-threaded
programs.  The result is returned in a static buffer and this is used in
all threads.  POSIX.1c introduced a variant of this function.

 -- Function: struct tm * localtime_r (const time_t *TIME, struct tm
          *RESULTP)
     Preliminary: | MT-Safe env locale | AS-Unsafe heap lock | AC-Unsafe
     lock mem fd | *Note POSIX Safety Concepts::.

     The 'localtime_r' function works just like the  localtime’
     function.  It takes a pointer to a variable containing a simple
     time and converts it to the broken-down time format.

     But the result is not placed in a static buffer.  Instead it is
     placed in the object of type 'struct tm' to which the parameter
     RESULTP points.

     If the conversion is successful the function returns a pointer to
     the object the result was written into, i.e., it returns RESULTP.

 -- Function: struct tm * gmtime (const time_t *TIME)
     Preliminary: | MT-Unsafe race:tmbuf env locale | AS-Unsafe heap
     lock | AC-Unsafe lock mem fd | *Note POSIX Safety Concepts::.

     This function is similar to 'localtime', except that the
     broken-down time is expressed as Coordinated Universal Time (UTC)
     (formerly called Greenwich Mean Time (GMT)) rather than relative to
     a local time zone.

   As for the 'localtime' function we have the problem that the result
is placed in a static variable.  POSIX.1c also provides a replacement
for 'gmtime'.

 -- Function: struct tm * gmtime_r (const time_t *TIME, struct tm
          *RESULTP)
     Preliminary: | MT-Safe env locale | AS-Unsafe heap lock | AC-Unsafe
     lock mem fd | *Note POSIX Safety Concepts::.

     This function is similar to 'localtime_r', except that it converts
     just like 'gmtime' the given time as Coordinated Universal Time.

     If the conversion is successful the function returns a pointer to
     the object the result was written into, i.e., it returns RESULTP.

 -- Function: time_t mktime (struct tm *BROKENTIME)
     Preliminary: | MT-Safe env locale | AS-Unsafe heap lock | AC-Unsafe
     lock mem fd | *Note POSIX Safety Concepts::.

     The 'mktime' function converts a broken-down time structure to a
     simple time representation.  It also normalizes the contents of the
     broken-down time structure, and fills in some components based on
     the values of the others.

     The 'mktime' function ignores the specified contents of the
     'tm_wday',  tm_yday’, ‘tm_gmtoff’, and ‘tm_zone’ members of the
     broken-down time structure.  It uses the values of the other
     components to determine the calendar time; it's permissible for
     these components to have unnormalized values outside their normal
     ranges.  The last thing that 'mktime' does is adjust the components
     of the BROKENTIME structure, including the members that were
     initially ignored.

     If the specified broken-down time cannot be represented as a simple
     time, 'mktime' returns a value of  (time_t)(-1)’ and does not
     modify the contents of BROKENTIME.

     Calling 'mktime' also sets the current time zone as if  tzset’ were
     called; 'mktime' uses this information instead of BROKENTIME s
     initial 'tm_gmtoff' and  tm_zone’ members.  *Note Time Zone
     Functions::.

 -- Function: time_t timelocal (struct tm *BROKENTIME)
     Preliminary: | MT-Safe env locale | AS-Unsafe heap lock | AC-Unsafe
     lock mem fd | *Note POSIX Safety Concepts::.

     'timelocal' is functionally identical to  mktime’, but more
     mnemonically named.  Note that it is the inverse of the 'localtime'
     function.

     *Portability note:* 'mktime' is essentially universally available.
     'timelocal' is rather rare.

 -- Function: time_t timegm (struct tm *BROKENTIME)
     Preliminary: | MT-Safe env locale | AS-Unsafe heap lock | AC-Unsafe
     lock mem fd | *Note POSIX Safety Concepts::.

     'timegm' is functionally identical to  mktime’ except it always
     takes the input values to be Coordinated Universal Time (UTC)
     regardless of any local time zone setting.

     Note that 'timegm' is the inverse of  gmtime’.

     *Portability note:* 'mktime' is essentially universally available.
     'timegm' is rather rare.  For the most portable conversion from a
     UTC broken-down time to a simple time, set the 'TZ' environment
     variable to UTC, call 'mktime', then set  TZ’ back.

==============================================================================
File: libc.info,  Node: |High_Accuracy_Clock|,  Next: |Formatting_Calendar_Time|,  Prev: |Broken_down_Time|,  Up: |Calendar_Time|
==============================================================================

                                                           *High_Accuracy_Clock*

21.4.4 High Accuracy Clock
--------------------------

The 'ntp_gettime' and  ntp_adjtime’ functions provide an interface to
monitor and manipulate the system clock to maintain high accuracy time.
For example, you can fine tune the speed of the clock or synchronize it
with another time source.

   A typical use of these functions is by a server implementing the
Network Time Protocol to synchronize the clocks of multiple systems and
high precision clocks.

   These functions are declared in 'sys/timex.h'.

 -- Data Type: struct ntptimeval
     This structure is used for information about the system clock.  It
     contains the following members:
     'struct timeval time'
          This is the current calendar time, expressed as the elapsed
          time since the epoch.  The 'struct timeval' data type is
          described in *note Elapsed Time::.

     'long int maxerror'
          This is the maximum error, measured in microseconds.  Unless
          updated via 'ntp_adjtime' periodically, this value will reach
          some platform-specific maximum value.

     'long int esterror'
          This is the estimated error, measured in microseconds.  This
          value can be set by 'ntp_adjtime' to indicate the estimated
          offset of the system clock from the true calendar time.

 -- Function: int ntp_gettime (struct ntptimeval *TPTR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'ntp_gettime' function sets the structure pointed to by TPTR to
     current values.  The elements of the structure afterwards contain
     the values the timer implementation in the kernel assumes.  They
     might or might not be correct.  If they are not, an 'ntp_adjtime'
     call is necessary.

     The return value is '0' on success and other values on failure.
     The following 'errno' error conditions are defined for this
     function:

     'TIME_ERROR'
          The precision clock model is not properly set up at the
          moment, thus the clock must be considered unsynchronized, and
          the values should be treated with care.

 -- Data Type: struct timex
     This structure is used to control and monitor the system clock.  It
     contains the following members:
     'unsigned int modes'
          This variable controls whether and which values are set.
          Several symbolic constants have to be combined with _binary
          or_ to specify the effective mode.  These constants start with
          'MOD_'.

     'long int offset'
          This value indicates the current offset of the system clock
          from the true calendar time.  The value is given in
          microseconds.  If bit 'MOD_OFFSET' is set in  modes’, the
          offset (and possibly other dependent values) can be set.  The
          offset's absolute value must not exceed 'MAXPHASE .

     'long int frequency'
          This value indicates the difference in frequency between the
          true calendar time and the system clock.  The value is
          expressed as scaled PPM (parts per million, 0.0001%).  The
          scaling is '1 << SHIFT_USEC'.  The value can be set with bit
          'MOD_FREQUENCY', but the absolute value must not exceed
          'MAXFREQ'.

     'long int maxerror'
          This is the maximum error, measured in microseconds.  A new
          value can be set using bit 'MOD_MAXERROR'.  Unless updated via
          'ntp_adjtime' periodically, this value will increase steadily
          and reach some platform-specific maximum value.

     'long int esterror'
          This is the estimated error, measured in microseconds.  This
          value can be set using bit 'MOD_ESTERROR'.

     'int status'
          This variable reflects the various states of the clock
          machinery.  There are symbolic constants for the significant
          bits, starting with 'STA_'.  Some of these flags can be
          updated using the 'MOD_STATUS' bit.

     'long int constant'
          This value represents the bandwidth or stiffness of the PLL
          (phase locked loop) implemented in the kernel.  The value can
          be changed using bit 'MOD_TIMECONST'.

     'long int precision'
          This value represents the accuracy or the maximum error when
          reading the system clock.  The value is expressed in
          microseconds.

     'long int tolerance'
          This value represents the maximum frequency error of the
          system clock in scaled PPM. This value is used to increase the
          'maxerror' every second.

     'struct timeval time'
          The current calendar time.

     'long int tick'
          The elapsed time between clock ticks in microseconds.  A clock
          tick is a periodic timer interrupt on which the system clock
          is based.

     'long int ppsfreq'
          This is the first of a few optional variables that are present
          only if the system clock can use a PPS (pulse per second)
          signal to discipline the system clock.  The value is expressed
          in scaled PPM and it denotes the difference in frequency
          between the system clock and the PPS signal.

     'long int jitter'
          This value expresses a median filtered average of the PPS
          signal's dispersion in microseconds.

     'int shift'
          This value is a binary exponent for the duration of the PPS
          calibration interval, ranging from 'PPS_SHIFT' to
          'PPS_SHIFTMAX'.

     'long int stabil'
          This value represents the median filtered dispersion of the
          PPS frequency in scaled PPM.

     'long int jitcnt'
          This counter represents the number of pulses where the jitter
          exceeded the allowed maximum 'MAXTIME'.

     'long int calcnt'
          This counter reflects the number of successful calibration
          intervals.

     'long int errcnt'
          This counter represents the number of calibration errors
          (caused by large offsets or jitter).

     'long int stbcnt'
          This counter denotes the number of calibrations where the
          stability exceeded the threshold.

 -- Function: int ntp_adjtime (struct timex *TPTR)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'ntp_adjtime' function sets the structure specified by TPTR to
     current values.

     In addition, 'ntp_adjtime' updates some settings to match what you
     pass to it in *TPTR.  Use the 'modes' element of *TPTR to select
     what settings to update.  You can set 'offset',  freq’, ‘maxerror’,
     'esterror',  status’, ‘constant’, and ‘tick’.

     'modes' = zero means set nothing.

     Only the superuser can update settings.

     The return value is '0' on success and other values on failure.
     The following 'errno' error conditions are defined for this
     function:

     'TIME_ERROR'
          The high accuracy clock model is not properly set up at the
          moment, thus the clock must be considered unsynchronized, and
          the values should be treated with care.  Another reason could
          be that the specified new values are not allowed.

     'EPERM'
          The process specified a settings update, but is not superuser.

     For more details see RFC1305 (Network Time Protocol, Version 3) and
     related documents.

     *Portability note:* Early versions of the GNU C Library did not
     have this function but did have the synonymous 'adjtimex'.

==============================================================================
File: libc.info,  Node: |Formatting_Calendar_Time|,  Next: |Parsing_Date_and_Time|,  Prev: |High_Accuracy_Clock|,  Up: |Calendar_Time|
==============================================================================

                                                      *Formatting_Calendar_Time*

21.4.5 Formatting Calendar Time
-------------------------------

The functions described in this section format calendar time values as
strings.  These functions are declared in the header file 'time.h'.

 -- Function: char * asctime (const struct tm *BROKENTIME)
     Preliminary: | MT-Unsafe race:asctime locale | AS-Unsafe | AC-Safe
     | *Note POSIX Safety Concepts::.

     The 'asctime' function converts the broken-down time value that
     BROKENTIME points to into a string in a standard format:

          "Tue May 21 13:46:22 1991\n"

     The abbreviations for the days of week are: 'Sun',  Mon’, ‘Tue’,
     'Wed',  Thu’, ‘Fri’, and ‘Sat’.

     The abbreviations for the months are: 'Jan',  Feb’, ‘Mar’, ‘Apr’,
     'May',  Jun’, ‘Jul’, ‘Aug’, ‘Sep’, ‘Oct’, ‘Nov’, and ‘Dec’.

     The return value points to a statically allocated string, which
     might be overwritten by subsequent calls to 'asctime' or  ctime’.
     (But no other library function overwrites the contents of this
     string.)

 -- Function: char * asctime_r (const struct tm *BROKENTIME, char
          *BUFFER)
     Preliminary: | MT-Safe locale | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     This function is similar to 'asctime' but instead of placing the
     result in a static buffer it writes the string in the buffer
     pointed to by the parameter BUFFER.  This buffer should have room
     for at least 26 bytes, including the terminating null.

     If no error occurred the function returns a pointer to the string
     the result was written into, i.e., it returns BUFFER.  Otherwise it
     returns 'NULL'.

 -- Function: char * ctime (const time_t *TIME)
     Preliminary: | MT-Unsafe race:tmbuf race:asctime env locale |
     AS-Unsafe heap lock | AC-Unsafe lock mem fd | *Note POSIX Safety
     Concepts::.

     The 'ctime' function is similar to  asctime’, except that you
     specify the calendar time argument as a 'time_t' simple time value
     rather than in broken-down local time format.  It is equivalent to

          asctime (localtime (TIME))

     Calling 'ctime' also sets the current time zone as if  tzset’ were
     called.  *Note Time Zone Functions::.

 -- Function: char * ctime_r (const time_t *TIME, char *BUFFER)
     Preliminary: | MT-Safe env locale | AS-Unsafe heap lock | AC-Unsafe
     lock mem fd | *Note POSIX Safety Concepts::.

     This function is similar to 'ctime', but places the result in the
     string pointed to by BUFFER.  It is equivalent to (written using
     gcc extensions, *note (gcc)Statement Exprs::):

          ({ struct tm tm; asctime_r (localtime_r (time, &tm), buf); })

     If no error occurred the function returns a pointer to the string
     the result was written into, i.e., it returns BUFFER.  Otherwise it
     returns 'NULL'.

 -- Function: size_t strftime (char *S, size_t SIZE, const char
          *TEMPLATE, const struct tm *BROKENTIME)
     Preliminary: | MT-Safe env locale | AS-Unsafe corrupt heap lock
     dlopen | AC-Unsafe corrupt lock mem fd | *Note POSIX Safety
     Concepts::.

     This function is similar to the 'sprintf' function (*note Formatted
     Input::), but the conversion specifications that can appear in the
     format template TEMPLATE are specialized for printing components of
     the date and time BROKENTIME according to the locale currently
     specified for time conversion (*note Locales::) and the current
     time zone (*note Time Zone Functions::).

     Ordinary characters appearing in the TEMPLATE are copied to the
     output string S; this can include multibyte character sequences.
     Conversion specifiers are introduced by a '%' character, followed
     by an optional flag which can be one of the following.  These flags
     are all GNU extensions.  The first three affect only the output of
     numbers:

     '_'
          The number is padded with spaces.

     '-'
          The number is not padded at all.

     '0'
          The number is padded with zeros even if the format specifies
          padding with spaces.

     '^'
          The output uses uppercase characters, but only if this is
          possible (*note Case Conversion::).

     The default action is to pad the number with zeros to keep it a
     constant width.  Numbers that do not have a range indicated below
     are never padded, since there is no natural width for them.

     Following the flag an optional specification of the width is
     possible.  This is specified in decimal notation.  If the natural
     size of the output of the field has less than the specified number
     of characters, the result is written right adjusted and space
     padded to the given size.

     An optional modifier can follow the optional flag and width
     specification.  The modifiers, which were first standardized by
     POSIX.2-1992 and by ISO C99, are:

     'E'
          Use the locale's alternate representation for date and time.
          This modifier applies to the '%c',  %C’, ‘%x’, ‘%X’, ‘%y’ and
          '%Y' format specifiers.  In a Japanese locale, for example,
          '%Ex' might yield a date format based on the Japanese
          Emperors' reigns.

     'O'
          Use the locale's alternate numeric symbols for numbers.  This
          modifier applies only to numeric format specifiers.

     If the format supports the modifier but no alternate representation
     is available, it is ignored.

     The conversion specifier ends with a format specifier taken from
     the following list.  The whole '%' sequence is replaced in the
     output string as follows:

     '%a'
          The abbreviated weekday name according to the current locale.

     '%A'
          The full weekday name according to the current locale.

     '%b'
          The abbreviated month name according to the current locale.

     '%B'
          The full month name according to the current locale.

          Using '%B' together with  %d’ produces grammatically incorrect
          results for some locales.

     '%c'
          The preferred calendar time representation for the current
          locale.

     '%C'
          The century of the year.  This is equivalent to the greatest
          integer not greater than the year divided by 100.

          This format was first standardized by POSIX.2-1992 and by
          ISO C99.

     '%d'
          The day of the month as a decimal number (range '01' through
          '31').

     '%D'
          The date using the format '%m/%d/%y'.

          This format was first standardized by POSIX.2-1992 and by
          ISO C99.

     '%e'
          The day of the month like with '%d', but padded with spaces
          (range ' 1' through  31’).

          This format was first standardized by POSIX.2-1992 and by
          ISO C99.

     '%F'
          The date using the format '%Y-%m-%d'.  This is the form
          specified in the ISO 8601 standard and is the preferred form
          for all uses.

          This format was first standardized by ISO C99 and by
          POSIX.1-2001.

     '%g'
          The year corresponding to the ISO week number, but without the
          century (range '00' through  99’).  This has the same format
          and value as '%y', except that if the ISO week number (see
          '%V') belongs to the previous or next year, that year is used
          instead.

          This format was first standardized by ISO C99 and by
          POSIX.1-2001.

     '%G'
          The year corresponding to the ISO week number.  This has the
          same format and value as '%Y', except that if the ISO week
          number (see '%V') belongs to the previous or next year, that
          year is used instead.

          This format was first standardized by ISO C99 and by
          POSIX.1-2001 but was previously available as a GNU extension.

     '%h'
          The abbreviated month name according to the current locale.
          The action is the same as for '%b'.

          This format was first standardized by POSIX.2-1992 and by
          ISO C99.

     '%H'
          The hour as a decimal number, using a 24-hour clock (range
          '00' through  23’).

     '%I'
          The hour as a decimal number, using a 12-hour clock (range
          '01' through  12’).

     '%j'
          The day of the year as a decimal number (range '001' through
          '366').

     '%k'
          The hour as a decimal number, using a 24-hour clock like '%H',
          but padded with spaces (range ' 0' through  23’).

          This format is a GNU extension.

     '%l'
          The hour as a decimal number, using a 12-hour clock like '%I',
          but padded with spaces (range ' 1' through  12’).

          This format is a GNU extension.

     '%m'
          The month as a decimal number (range '01' through  12’).

     '%M'
          The minute as a decimal number (range '00' through  59’).

     '%n'
          A single '\n' (newline) character.

          This format was first standardized by POSIX.2-1992 and by
          ISO C99.

     '%p'
          Either 'AM' or  PM’, according to the given time value; or the
          corresponding strings for the current locale.  Noon is treated
          as 'PM' and midnight as  AM’.  In most locales ‘AM’/‘PM’
          format is not supported, in such cases '"%p"' yields an empty
          string.

     '%P'
          Either 'am' or  pm’, according to the given time value; or the
          corresponding strings for the current locale, printed in
          lowercase characters.  Noon is treated as 'pm' and midnight as
          'am'.  In most locales  AM’/‘PM’ format is not supported, in
          such cases '"%P"' yields an empty string.

          This format is a GNU extension.

     '%r'
          The complete calendar time using the AM/PM format of the
          current locale.

          This format was first standardized by POSIX.2-1992 and by
          ISO C99.  In the POSIX locale, this format is equivalent to
          '%I:%M:%S %p'.

     '%R'
          The hour and minute in decimal numbers using the format
          '%H:%M'.

          This format was first standardized by ISO C99 and by
          POSIX.1-2001 but was previously available as a GNU extension.

     '%s'
          The number of seconds since the epoch, i.e., since 1970-01-01
          00:00:00 UTC. Leap seconds are not counted unless leap second
          support is available.

          This format is a GNU extension.

     '%S'
          The seconds as a decimal number (range '00' through  60’).

     '%t'
          A single '\t' (tabulator) character.

          This format was first standardized by POSIX.2-1992 and by
          ISO C99.

     '%T'
          The time of day using decimal numbers using the format
          '%H:%M:%S'.

          This format was first standardized by POSIX.2-1992 and by
          ISO C99.

     '%u'
          The day of the week as a decimal number (range '1' through
          '7'), Monday being  1’.

          This format was first standardized by POSIX.2-1992 and by
          ISO C99.

     '%U'
          The week number of the current year as a decimal number (range
          '00' through  53’), starting with the first Sunday as the
          first day of the first week.  Days preceding the first Sunday
          in the year are considered to be in week '00'.

     '%V'
          The ISO 8601:1988 week number as a decimal number (range '01'
          through '53').  ISO weeks start with Monday and end with
          Sunday.  Week '01' of a year is the first week which has the
          majority of its days in that year; this is equivalent to the
          week containing the year's first Thursday, and it is also
          equivalent to the week containing January 4.  Week '01' of a
          year can contain days from the previous year.  The week before
          week '01' of a year is the last week ( 52’ or ‘53’) of the
          previous year even if it contains days from the new year.

          This format was first standardized by POSIX.2-1992 and by
          ISO C99.

     '%w'
          The day of the week as a decimal number (range '0' through
          '6'), Sunday being  0’.

     '%W'
          The week number of the current year as a decimal number (range
          '00' through  53’), starting with the first Monday as the
          first day of the first week.  All days preceding the first
          Monday in the year are considered to be in week '00'.

     '%x'
          The preferred date representation for the current locale.

     '%X'
          The preferred time of day representation for the current
          locale.

     '%y'
          The year without a century as a decimal number (range '00'
          through '99').  This is equivalent to the year modulo 100.

     '%Y'
          The year as a decimal number, using the Gregorian calendar.
          Years before the year '1' are numbered  0’, ‘-1’, and so on.

     '%z'
          RFC 822/ISO 8601:1988 style numeric time zone (e.g., '-0600'
          or '+0100'), or nothing if no time zone is determinable.

          This format was first standardized by ISO C99 and by
          POSIX.1-2001 but was previously available as a GNU extension.

          In the POSIX locale, a full RFC 822 timestamp is generated by
          the format '"%a, %d %b %Y %H:%M:%S %z"' (or the equivalent
          '"%a, %d %b %Y %T %z"').

     '%Z'
          The time zone abbreviation (empty if the time zone can't be
          determined).

     '%%'
          A literal '%' character.

     The SIZE parameter can be used to specify the maximum number of
     characters to be stored in the array S, including the terminating
     null character.  If the formatted time requires more than SIZE
     characters, 'strftime' returns zero and the contents of the array S
     are undefined.  Otherwise the return value indicates the number of
     characters placed in the array S, not including the terminating
     null character.

     _Warning:_ This convention for the return value which is prescribed
     in ISO C can lead to problems in some situations.  For certain
     format strings and certain locales the output really can be the
     empty string and this cannot be discovered by testing the return
     value only.  E.g., in most locales the AM/PM time format is not
     supported (most of the world uses the 24 hour time representation).
     In such locales '"%p"' will return the empty string, i.e., the
     return value is zero.  To detect situations like this something
     similar to the following code should be used:

          buf[0] = '\1';
          len = strftime (buf, bufsize, format, tp);
          if (len == 0 && buf[0] != '\0')
            {
              /* Something went wrong in the strftime call.  */
              ...
            }

     If S is a null pointer, 'strftime' does not actually write
     anything, but instead returns the number of characters it would
     have written.

     Calling 'strftime' also sets the current time zone as if  tzset’
     were called; 'strftime' uses this information instead of
     BROKENTIME's 'tm_gmtoff  and ‘tm_zone’ members.  *Note Time Zone
     Functions::.

     For an example of 'strftime', see *note Time Functions Example::.

 -- Function: size_t wcsftime (wchar_t *S, size_t SIZE, const wchar_t
          *TEMPLATE, const struct tm *BROKENTIME)
     Preliminary: | MT-Safe env locale | AS-Unsafe corrupt heap lock
     dlopen | AC-Unsafe corrupt lock mem fd | *Note POSIX Safety
     Concepts::.

     The 'wcsftime' function is equivalent to the  strftime’ function
     with the difference that it operates on wide character strings.
     The buffer where the result is stored, pointed to by S, must be an
     array of wide characters.  The parameter SIZE which specifies the
     size of the output buffer gives the number of wide characters, not
     the number of bytes.

     Also the format string TEMPLATE is a wide character string.  Since
     all characters needed to specify the format string are in the basic
     character set it is portably possible to write format strings in
     the C source code using the 'L"..."' notation.  The parameter
     BROKENTIME has the same meaning as in the 'strftime' call.

     The 'wcsftime' function supports the same flags, modifiers, and
     format specifiers as the 'strftime' function.

     The return value of 'wcsftime' is the number of wide characters
     stored in 's'.  When more characters would have to be written than
     can be placed in the buffer S the return value is zero, with the
     same problems indicated in the 'strftime' documentation.

==============================================================================
File: libc.info,  Node: |Parsing_Date_and_Time|,  Next: |TZ_Variable|,  Prev: |Formatting_Calendar_Time|,  Up: |Calendar_Time|
==============================================================================

                                                         *Parsing_Date_and_Time*

21.4.6 Convert textual time and date information back
-----------------------------------------------------

The ISO C standard does not specify any functions which can convert the
output of the 'strftime' function back into a binary format.  This led
to a variety of more-or-less successful implementations with different
interfaces over the years.  Then the Unix standard was extended by the
addition of two functions: 'strptime' and  getdate’.  Both have strange
interfaces but at least they are widely available.

MENU

* |Low_Level_Time_String_Parsing|::  Interpret string according to given format.
* |General_Time_String_Parsing|::    User-friendly function to parse data and
                                    time strings.

==============================================================================
File: libc.info,  Node: |Low_Level_Time_String_Parsing|,  Next: |General_Time_String_Parsing|,  Up: |Parsing_Date_and_Time|
==============================================================================

                                                 *Low_Level_Time_String_Parsing*

21.4.6.1 Interpret string according to given format
---------------------------------------------------

The first function is rather low-level.  It is nevertheless frequently
used in software since it is better known.  Its interface and
implementation are heavily influenced by the 'getdate' function, which
is defined and implemented in terms of calls to 'strptime'.

 -- Function: char * strptime (const char *S, const char *FMT, struct tm
          *TP)
     Preliminary: | MT-Safe env locale | AS-Unsafe heap lock | AC-Unsafe
     lock mem fd | *Note POSIX Safety Concepts::.

     The 'strptime' function parses the input string S according to the
     format string FMT and stores its results in the structure TP.

     The input string could be generated by a 'strftime' call or
     obtained any other way.  It does not need to be in a
     human-recognizable format; e.g.  a date passed as '"02:1999:9"' is
     acceptable, even though it is ambiguous without context.  As long
     as the format string FMT matches the input string the function will
     succeed.

     The user has to make sure, though, that the input can be parsed in
     a unambiguous way.  The string '"1999112"' can be parsed using the
     format '"%Y%m%d"' as 1999-1-12, 1999-11-2, or even 19991-1-2.  It
     is necessary to add appropriate separators to reliably get results.

     The format string consists of the same components as the format
     string of the 'strftime' function.  The only difference is that the
     flags '_',  -’, ‘0’, and ‘^’ are not allowed.  Several of the
     distinct formats of 'strftime' do the same work in  strptime’ since
     differences like case of the input do not matter.  For reasons of
     symmetry all formats are supported, though.

     The modifiers 'E' and  O’ are also allowed everywhere the
     'strftime' function allows them.

     The formats are:

     '%a'
     '%A'
          The weekday name according to the current locale, in
          abbreviated form or the full name.

     '%b'
     '%B'
     '%h'
          The month name according to the current locale, in abbreviated
          form or the full name.

     '%c'
          The date and time representation for the current locale.

     '%Ec'
          Like '%c' but the locale s alternative date and time format is
          used.

     '%C'
          The century of the year.

          It makes sense to use this format only if the format string
          also contains the '%y' format.

     '%EC'
          The locale's representation of the period.

          Unlike '%C' it sometimes makes sense to use this format since
          some cultures represent years relative to the beginning of
          eras instead of using the Gregorian years.

     '%d'
     '%e'
          The day of the month as a decimal number (range '1' through
          '31').  Leading zeroes are permitted but not required.

     '%Od'
     '%Oe'
          Same as '%d' but using the locale s alternative numeric
          symbols.

          Leading zeroes are permitted but not required.

     '%D'
          Equivalent to '%m/%d/%y'.

     '%F'
          Equivalent to '%Y-%m-%d', which is the ISO 8601 date format.

          This is a GNU extension following an ISO C99 extension to
          'strftime'.

     '%g'
          The year corresponding to the ISO week number, but without the
          century (range '00' through  99’).

          _Note:_ Currently, this is not fully implemented.  The format
          is recognized, input is consumed but no field in TM is set.

          This format is a GNU extension following a GNU extension of
          'strftime'.

     '%G'
          The year corresponding to the ISO week number.

          _Note:_ Currently, this is not fully implemented.  The format
          is recognized, input is consumed but no field in TM is set.

          This format is a GNU extension following a GNU extension of
          'strftime'.

     '%H'
     '%k'
          The hour as a decimal number, using a 24-hour clock (range
          '00' through  23’).

          '%k' is a GNU extension following a GNU extension of
          'strftime'.

     '%OH'
          Same as '%H' but using the locale s alternative numeric
          symbols.

     '%I'
     '%l'
          The hour as a decimal number, using a 12-hour clock (range
          '01' through  12’).

          '%l' is a GNU extension following a GNU extension of
          'strftime'.

     '%OI'
          Same as '%I' but using the locale s alternative numeric
          symbols.

     '%j'
          The day of the year as a decimal number (range '1' through
          '366').

          Leading zeroes are permitted but not required.

     '%m'
          The month as a decimal number (range '1' through  12’).

          Leading zeroes are permitted but not required.

     '%Om'
          Same as '%m' but using the locale s alternative numeric
          symbols.

     '%M'
          The minute as a decimal number (range '0' through  59’).

          Leading zeroes are permitted but not required.

     '%OM'
          Same as '%M' but using the locale s alternative numeric
          symbols.

     '%n'
     '%t'
          Matches any white space.

     '%p'
     '%P'
          The locale-dependent equivalent to 'AM' or  PM’.

          This format is not useful unless '%I' or  %l’ is also used.
          Another complication is that the locale might not define these
          values at all and therefore the conversion fails.

          '%P' is a GNU extension following a GNU extension to
          'strftime'.

     '%r'
          The complete time using the AM/PM format of the current
          locale.

          A complication is that the locale might not define this format
          at all and therefore the conversion fails.

     '%R'
          The hour and minute in decimal numbers using the format
          '%H:%M'.

          '%R' is a GNU extension following a GNU extension to
          'strftime'.

     '%s'
          The number of seconds since the epoch, i.e., since 1970-01-01
          00:00:00 UTC. Leap seconds are not counted unless leap second
          support is available.

          '%s' is a GNU extension following a GNU extension to
          'strftime'.

     '%S'
          The seconds as a decimal number (range '0' through  60’).

          Leading zeroes are permitted but not required.

          NB: The Unix specification says the upper bound on this
          value is '61', a result of a decision to allow double leap
          seconds.  You will not see the value '61' because no minute
          has more than one leap second, but the myth persists.

     '%OS'
          Same as '%S' but using the locale s alternative numeric
          symbols.

     '%T'
          Equivalent to the use of '%H:%M:%S' in this place.

     '%u'
          The day of the week as a decimal number (range '1' through
          '7'), Monday being  1’.

          Leading zeroes are permitted but not required.

          _Note:_ Currently, this is not fully implemented.  The format
          is recognized, input is consumed but no field in TM is set.

     '%U'
          The week number of the current year as a decimal number (range
          '0' through  53’).

          Leading zeroes are permitted but not required.

     '%OU'
          Same as '%U' but using the locale s alternative numeric
          symbols.

     '%V'
          The ISO 8601:1988 week number as a decimal number (range '1'
          through '53').

          Leading zeroes are permitted but not required.

          _Note:_ Currently, this is not fully implemented.  The format
          is recognized, input is consumed but no field in TM is set.

     '%w'
          The day of the week as a decimal number (range '0' through
          '6'), Sunday being  0’.

          Leading zeroes are permitted but not required.

          _Note:_ Currently, this is not fully implemented.  The format
          is recognized, input is consumed but no field in TM is set.

     '%Ow'
          Same as '%w' but using the locale s alternative numeric
          symbols.

     '%W'
          The week number of the current year as a decimal number (range
          '0' through  53’).

          Leading zeroes are permitted but not required.

          _Note:_ Currently, this is not fully implemented.  The format
          is recognized, input is consumed but no field in TM is set.

     '%OW'
          Same as '%W' but using the locale s alternative numeric
          symbols.

     '%x'
          The date using the locale's date format.

     '%Ex'
          Like '%x' but the locale s alternative data representation is
          used.

     '%X'
          The time using the locale's time format.

     '%EX'
          Like '%X' but the locale s alternative time representation is
          used.

     '%y'
          The year without a century as a decimal number (range '0'
          through '99').

          Leading zeroes are permitted but not required.

          Note that it is questionable to use this format without the
          '%C' format.  The  strptime’ function does regard input values
          in the range 68 to 99 as the years 1969 to 1999 and the values
          0 to 68 as the years 2000 to 2068.  But maybe this heuristic
          fails for some input data.

          Therefore it is best to avoid '%y' completely and use  %Y’
          instead.

     '%Ey'
          The offset from '%EC' in the locale s alternative
          representation.

     '%Oy'
          The offset of the year (from '%C') using the locale s
          alternative numeric symbols.

     '%Y'
          The year as a decimal number, using the Gregorian calendar.

     '%EY'
          The full alternative year representation.

     '%z'
          The offset from GMT in ISO 8601/RFC822 format.

     '%Z'
          The timezone name.

          _Note:_ Currently, this is not fully implemented.  The format
          is recognized, input is consumed but no field in TM is set.

     '%%'
          A literal '%' character.

     All other characters in the format string must have a matching
     character in the input string.  Exceptions are white spaces in the
     input string which can match zero or more whitespace characters in
     the format string.

     *Portability Note:* The XPG standard advises applications to use at
     least one whitespace character (as specified by 'isspace') or other
     non-alphanumeric characters between any two conversion
     specifications.  The GNU C Library does not have this limitation
     but other libraries might have trouble parsing formats like
     '"%d%m%Y%H%M%S"'.

     The 'strptime' function processes the input string from right to
     left.  Each of the three possible input elements (white space,
     literal, or format) are handled one after the other.  If the input
     cannot be matched to the format string the function stops.  The
     remainder of the format and input strings are not processed.

     The function returns a pointer to the first character it was unable
     to process.  If the input string contains more characters than
     required by the format string the return value points right after
     the last consumed input character.  If the whole input string is
     consumed the return value points to the 'NULL' byte at the end of
     the string.  If an error occurs, i.e., 'strptime' fails to match
     all of the format string, the function returns 'NULL'.

   The specification of the function in the XPG standard is rather
vague, leaving out a few important pieces of information.  Most
importantly, it does not specify what happens to those elements of TM
which are not directly initialized by the different formats.  The
implementations on different Unix systems vary here.

   The GNU C Library implementation does not touch those fields which
are not directly initialized.  Exceptions are the 'tm_wday' and
'tm_yday' elements, which are recomputed if any of the year, month, or
date elements changed.  This has two implications:

   - Before calling the 'strptime' function for a new input string, you
     should prepare the TM structure you pass.  Normally this will mean
     initializing all values to zero.  Alternatively, you can set all
     fields to values like 'INT_MAX', allowing you to determine which
     elements were set by the function call.  Zero does not work here
     since it is a valid value for many of the fields.

     Careful initialization is necessary if you want to find out whether
     a certain field in TM was initialized by the function call.

   - You can construct a 'struct tm' value with several consecutive
     'strptime' calls.  A useful application of this is e.g.  the
     parsing of two separate strings, one containing date information
     and the other time information.  By parsing one after the other
     without clearing the structure in-between, you can construct a
     complete broken-down time.

   The following example shows a function which parses a string which
contains the date information in either US style or ISO 8601 form:

     const char *
     parse_date (const char *input, struct tm *tm)
     {
       const char *cp;

       /* First clear the result structure.  */
       memset (tm, '\0', sizeof (*tm));

       /* Try the ISO format first.  */
       cp = strptime (input, "%F", tm);
       if (cp == NULL)
         {
           /* Does not match.  Try the US form.  */
           cp = strptime (input, "%D", tm);
         }

       return cp;
     }

==============================================================================
File: libc.info,  Node: |General_Time_String_Parsing|,  Prev: |Low_Level_Time_String_Parsing|,  Up: |Parsing_Date_and_Time|
==============================================================================

                                                   *General_Time_String_Parsing*

21.4.6.2 A More User-friendly Way to Parse Times and Dates
----------------------------------------------------------

The Unix standard defines another function for parsing date strings.
The interface is weird, but if the function happens to suit your
application it is just fine.  It is problematic to use this function in
multi-threaded programs or libraries, since it returns a pointer to a
static variable, and uses a global variable and global state (an
environment variable).

 -- Variable: getdate_err
     This variable of type 'int' contains the error code of the last
     unsuccessful call to 'getdate'.  Defined values are:

     1
          The environment variable 'DATEMSK' is not defined or null.
     2
          The template file denoted by the 'DATEMSK' environment
          variable cannot be opened.
     3
          Information about the template file cannot retrieved.
     4
          The template file is not a regular file.
     5
          An I/O error occurred while reading the template file.
     6
          Not enough memory available to execute the function.
     7
          The template file contains no matching template.
     8
          The input date is invalid, but would match a template
          otherwise.  This includes dates like February 31st, and dates
          which cannot be represented in a 'time_t' variable.

 -- Function: struct tm * getdate (const char *STRING)
     Preliminary: | MT-Unsafe race:getdate env locale | AS-Unsafe heap
     lock | AC-Unsafe lock mem fd | *Note POSIX Safety Concepts::.

     The interface to 'getdate' is the simplest possible for a function
     to parse a string and return the value.  STRING is the input string
     and the result is returned in a statically-allocated variable.

     The details about how the string is processed are hidden from the
     user.  In fact, they can be outside the control of the program.
     Which formats are recognized is controlled by the file named by the
     environment variable 'DATEMSK'.  This file should contain lines of
     valid format strings which could be passed to 'strptime'.

     The 'getdate' function reads these format strings one after the
     other and tries to match the input string.  The first line which
     completely matches the input string is used.

     Elements not initialized through the format string retain the
     values present at the time of the 'getdate' function call.

     The formats recognized by 'getdate' are the same as for  strptime’.
     See above for an explanation.  There are only a few extensions to
     the 'strptime' behavior:

        - If the '%Z' format is given the broken-down time is based on
          the current time of the timezone matched, not of the current
          timezone of the runtime environment.

          _Note_: This is not implemented (currently).  The problem is
          that timezone names are not unique.  If a fixed timezone is
          assumed for a given string (say 'EST' meaning US East Coast
          time), then uses for countries other than the USA will fail.
          So far we have found no good solution to this.

        - If only the weekday is specified the selected day depends on
          the current date.  If the current weekday is greater than or
          equal to the 'tm_wday' value the current week s day is chosen,
          otherwise the day next week is chosen.

        - A similar heuristic is used when only the month is given and
          not the year.  If the month is greater than or equal to the
          current month, then the current year is used.  Otherwise it
          wraps to next year.  The first day of the month is assumed if
          one is not explicitly specified.

        - The current hour, minute, and second are used if the
          appropriate value is not set through the format.

        - If no date is given tomorrow's date is used if the time is
          smaller than the current time.  Otherwise today's date is
          taken.

     It should be noted that the format in the template file need not
     only contain format elements.  The following is a list of possible
     format strings (taken from the Unix standard):

          %m
          %A %B %d, %Y %H:%M:%S
          %A
          %B
          %m/%d/%y %I %p
          %d,%m,%Y %H:%M
          at %A the %dst of %B in %Y
          run job at %I %p,%B %dnd
          %A den %d. %B %Y %H.%M Uhr

     As you can see, the template list can contain very specific strings
     like 'run job at %I %p,%B %dnd'.  Using the above list of templates
     and assuming the current time is Mon Sep 22 12:19:47 EDT 1986, we
     can obtain the following results for the given input.

     Input          Match        Result
     Mon            %a           Mon Sep 22 12:19:47 EDT 1986
     Sun            %a           Sun Sep 28 12:19:47 EDT 1986
     Fri            %a           Fri Sep 26 12:19:47 EDT 1986
     September      %B           Mon Sep 1 12:19:47 EDT 1986
     January        %B           Thu Jan 1 12:19:47 EST 1987
     December       %B           Mon Dec 1 12:19:47 EST 1986
     Sep Mon        %b %a        Mon Sep 1 12:19:47 EDT 1986
     Jan Fri        %b %a        Fri Jan 2 12:19:47 EST 1987
     Dec Mon        %b %a        Mon Dec 1 12:19:47 EST 1986
     Jan Wed 1989   %b %a %Y     Wed Jan 4 12:19:47 EST 1989
     Fri 9          %a %H        Fri Sep 26 09:00:00 EDT 1986
     Feb 10:30      %b %H:%S     Sun Feb 1 10:00:30 EST 1987
     10:30          %H:%M        Tue Sep 23 10:30:00 EDT 1986
     13:30          %H:%M        Mon Sep 22 13:30:00 EDT 1986

     The return value of the function is a pointer to a static variable
     of type 'struct tm', or a null pointer if an error occurred.  The
     result is only valid until the next 'getdate' call, making this
     function unusable in multi-threaded applications.

     The 'errno' variable is _not_ changed.  Error conditions are stored
     in the global variable 'getdate_err'.  See the description above
     for a list of the possible error values.

     _Warning:_ The 'getdate' function should _never_ be used in
     SUID-programs.  The reason is obvious: using the 'DATEMSK'
     environment variable you can get the function to open any arbitrary
     file and chances are high that with some bogus input (such as a
     binary file) the program will crash.

 -- Function: int getdate_r (const char *STRING, struct tm *TP)
     Preliminary: | MT-Safe env locale | AS-Unsafe heap lock | AC-Unsafe
     lock mem fd | *Note POSIX Safety Concepts::.

     The 'getdate_r' function is the reentrant counterpart of  getdate’.
     It does not use the global variable 'getdate_err' to signal an
     error, but instead returns an error code.  The same error codes as
     described in the 'getdate_err' documentation above are used, with 0
     meaning success.

     Moreover, 'getdate_r' stores the broken-down time in the variable
     of type 'struct tm' pointed to by the second argument, rather than
     in a static variable.

     This function is not defined in the Unix standard.  Nevertheless it
     is available on some other Unix systems as well.

     The warning against using 'getdate' in SUID-programs applies to
     'getdate_r' as well.

==============================================================================
File: libc.info,  Node: |TZ_Variable|,  Next: |Time_Zone_Functions|,  Prev: |Parsing_Date_and_Time|,  Up: |Calendar_Time|
==============================================================================

                                                                   *TZ_Variable*

21.4.7 Specifying the Time Zone with 'TZ'
-----------------------------------------

In POSIX systems, a user can specify the time zone by means of the 'TZ'
environment variable.  For information about how to set environment
variables, see *note Environment Variables::.  The functions for
accessing the time zone are declared in 'time.h'.

   You should not normally need to set 'TZ'.  If the system is
configured properly, the default time zone will be correct.  You might
set 'TZ' if you are using a computer over a network from a different
time zone, and would like times reported to you in the time zone local
to you, rather than what is local to the computer.

   In POSIX.1 systems the value of the 'TZ' variable can be in one of
three formats.  With the GNU C Library, the most common format is the
last one, which can specify a selection from a large database of time
zone information for many regions of the world.  The first two formats
are used to describe the time zone information directly, which is both
more cumbersome and less precise.  But the POSIX.1 standard only
specifies the details of the first two formats, so it is good to be
familiar with them in case you come across a POSIX.1 system that doesn't
support a time zone information database.

   The first format is used when there is no Daylight Saving Time (or
summer time) in the local time zone:

     STD OFFSET

   The STD string specifies the name of the time zone.  It must be three
or more characters long and must not contain a leading colon, embedded
digits, commas, nor plus and minus signs.  There is no space character
separating the time zone name from the OFFSET, so these restrictions are
necessary to parse the specification correctly.

   The OFFSET specifies the time value you must add to the local time to
get a Coordinated Universal Time value.  It has syntax like
['+'| -’]HH[‘:’MM[‘:’SS]].  This is positive if the local time zone is
west of the Prime Meridian and negative if it is east.  The hour must be
between '0' and  24’, and the minute and seconds between ‘0’ and ‘59’.

   For example, here is how we would specify Eastern Standard Time, but
without any Daylight Saving Time alternative:

     EST+5

   The second format is used when there is Daylight Saving Time:

     STD OFFSET DST [OFFSET]','START[ /’TIME]‘,’END[‘/’TIME]

   The initial STD and OFFSET specify the standard time zone, as
described above.  The DST string and OFFSET specify the name and offset
for the corresponding Daylight Saving Time zone; if the OFFSET is
omitted, it defaults to one hour ahead of standard time.

   The remainder of the specification describes when Daylight Saving
Time is in effect.  The START field is when Daylight Saving Time goes
into effect and the END field is when the change is made back to
standard time.  The following formats are recognized for these fields:

'JN'
     This specifies the Julian day, with N between '1' and  365’.
     February 29 is never counted, even in leap years.

'N'
     This specifies the Julian day, with N between '0' and  365’.
     February 29 is counted in leap years.

'MM.W.D'
     This specifies day D of week W of month M.  The day D must be
     between '0' (Sunday) and  6’.  The week W must be between ‘1’ and
     '5'; week  1’ is the first week in which day D occurs, and week ‘5’
     specifies the _last_ D day in the month.  The month M should be
     between '1' and  12’.

   The TIME fields specify when, in the local time currently in effect,
the change to the other time occurs.  If omitted, the default is
'02:00:00'.  The hours part of the time fields can range from  167
through 167; this is an extension to POSIX.1, which allows only the
range 0 through 24.

   Here are some example 'TZ' values, including the appropriate Daylight
Saving Time and its dates of applicability.  In North American Eastern
Standard Time (EST) and Eastern Daylight Time (EDT), the normal offset
from UTC is 5 hours; since this is west of the prime meridian, the sign
is positive.  Summer time begins on March's second Sunday at 2:00am, and
ends on November's first Sunday at 2:00am.

     EST+5EDT,M3.2.0/2,M11.1.0/2

   Israel Standard Time (IST) and Israel Daylight Time (IDT) are 2 hours
ahead of the prime meridian in winter, springing forward an hour on
March's fourth Thursday at 26:00 (i.e., 02:00 on the first Friday on or
after March 23), and falling back on October's last Sunday at 02:00.

     IST-2IDT,M3.4.4/26,M10.5.0

   Western Argentina Summer Time (WARST) is 3 hours behind the prime
meridian all year.  There is a dummy fall-back transition on December 31
at 25:00 daylight saving time (i.e., 24:00 standard time, equivalent to
January 1 at 00:00 standard time), and a simultaneous spring-forward
transition on January 1 at 00:00 standard time, so daylight saving time
is in effect all year and the initial 'WART' is a placeholder.

     WART4WARST,J1/0,J365/25

   Western Greenland Time (WGT) and Western Greenland Summer Time (WGST)
are 3 hours behind UTC in the winter.  Its clocks follow the European
Union rules of springing forward by one hour on March's last Sunday at
01:00 UTC ( 02:00 local time) and falling back on October's last Sunday
at 01:00 UTC ( 01:00 local time).

     WGT3WGST,M3.5.0/-2,M10.5.0/-1

   The schedule of Daylight Saving Time in any particular jurisdiction
has changed over the years.  To be strictly correct, the conversion of
dates and times in the past should be based on the schedule that was in
effect then.  However, this format has no facilities to let you specify
how the schedule has changed from year to year.  The most you can do is
specify one particular schedule usually the present day schedule—and
this is used to convert any date, no matter when.  For precise time zone
specifications, it is best to use the time zone information database
(see below).

   The third format looks like this:

     :CHARACTERS

   Each operating system interprets this format differently; in the GNU
C Library, CHARACTERS is the name of a file which describes the time
zone.

   If the 'TZ' environment variable does not have a value, the operation
chooses a time zone by default.  In the GNU C Library, the default time
zone is like the specification 'TZ=:/etc/localtime' (or
'TZ=:/usr/local/etc/localtime', depending on how the GNU C Library was
configured; *note Installation::).  Other C libraries use their own rule
for choosing the default time zone, so there is little we can say about
them.

   If CHARACTERS begins with a slash, it is an absolute file name;
otherwise the library looks for the file
'/usr/share/zoneinfo/CHARACTERS'.  The  zoneinfo’ directory contains
data files describing local time zones in many different parts of the
world.  The names represent major cities, with subdirectories for
geographical areas; for example, 'America/New_York',  Europe/London’,
'Asia/Hong_Kong'.  These data files are installed by the system
administrator, who also sets '/etc/localtime' to point to the data file
for the local time zone.  The files typically come from the Time Zone
Database (http://www.iana.org/time-zones) of time zone and daylight
saving time information for most regions of the world, which is
maintained by a community of volunteers and put in the public domain.

==============================================================================
File: libc.info,  Node: |Time_Zone_Functions|,  Next: |Time_Functions_Example|,  Prev: |TZ_Variable|,  Up: |Calendar_Time|
==============================================================================

                                                           *Time_Zone_Functions*

21.4.8 Functions and Variables for Time Zones
---------------------------------------------

 -- Variable: char * tzname [2]
     The array 'tzname' contains two strings, which are the standard
     names of the pair of time zones (standard and Daylight Saving) that
     the user has selected.  'tzname[0]' is the name of the standard
     time zone (for example, '"EST"'), and  tzname[1]’ is the name for
     the time zone when Daylight Saving Time is in use (for example,
     '"EDT"').  These correspond to the STD and DST strings
     (respectively) from the 'TZ' environment variable.  If Daylight
     Saving Time is never used, 'tzname[1]' is the empty string.

     The 'tzname' array is initialized from the  TZ’ environment
     variable whenever 'tzset',  ctime’, ‘strftime’, ‘mktime’, or
     'localtime' is called.  If multiple abbreviations have been used
     (e.g.  '"EWT"' and  "EDT"’ for U.S. Eastern War Time and Eastern
     Daylight Time), the array contains the most recent abbreviation.

     The 'tzname' array is required for POSIX.1 compatibility, but in
     GNU programs it is better to use the 'tm_zone' member of the
     broken-down time structure, since 'tm_zone' reports the correct
     abbreviation even when it is not the latest one.

     Though the strings are declared as 'char *' the user must refrain
     from modifying these strings.  Modifying the strings will almost
     certainly lead to trouble.

 -- Function: void tzset (void)
     Preliminary: | MT-Safe env locale | AS-Unsafe heap lock | AC-Unsafe
     lock mem fd | *Note POSIX Safety Concepts::.

     The 'tzset' function initializes the  tzname’ variable from the
     value of the 'TZ' environment variable.  It is not usually
     necessary for your program to call this function, because it is
     called automatically when you use the other time conversion
     functions that depend on the time zone.

   The following variables are defined for compatibility with System V
Unix.  Like 'tzname', these variables are set by calling  tzset’ or the
other time conversion functions.

 -- Variable: long int timezone
     This contains the difference between UTC and the latest local
     standard time, in seconds west of UTC. For example, in the U.S.
     Eastern time zone, the value is '56060'.  Unlike the  tm_gmtoff’
     member of the broken-down time structure, this value is not
     adjusted for daylight saving, and its sign is reversed.  In GNU
     programs it is better to use 'tm_gmtoff', since it contains the
     correct offset even when it is not the latest one.

 -- Variable: int daylight
     This variable has a nonzero value if Daylight Saving Time rules
     apply.  A nonzero value does not necessarily mean that Daylight
     Saving Time is now in effect; it means only that Daylight Saving
     Time is sometimes in effect.

==============================================================================
File: libc.info,  Node: |Time_Functions_Example|,  Prev: |Time_Zone_Functions|,  Up: |Calendar_Time|
==============================================================================

                                                        *Time_Functions_Example*

21.4.9 Time Functions Example
-----------------------------

Here is an example program showing the use of some of the calendar time
functions.


     #include <time.h>
     #include <stdio.h>

     #define SIZE 256

     int
     main (void)
     {
       char buffer[SIZE];
       time_t curtime;
       struct tm *loctime;

       /* Get the current time. */
       curtime = time (NULL);

       /* Convert it to local time representation. */
       loctime = localtime (&curtime);

       /* Print out the date and time in the standard format. */
       fputs (asctime (loctime), stdout);

       /* Print it out in a nice format. */
       strftime (buffer, SIZE, "Today is %A, %B %d.\n", loctime);
       fputs (buffer, stdout);
       strftime (buffer, SIZE, "The time is %I:%M %p.\n", loctime);
       fputs (buffer, stdout);

       return 0;
     }

   It produces output like this:

     Wed Jul 31 13:02:36 1991
     Today is Wednesday, July 31.
     The time is 01:02 PM.

==============================================================================
File: libc.info,  Node: |Setting_an_Alarm|,  Next: |Sleeping|,  Prev: |Calendar_Time|,  Up: |Date_and_Time|
==============================================================================

                                                              *Setting_an_Alarm*

21.5 Setting an Alarm
---------------------

The 'alarm' and  setitimer’ functions provide a mechanism for a process
to interrupt itself in the future.  They do this by setting a timer;
when the timer expires, the process receives a signal.

   Each process has three independent interval timers available:

   - A real-time timer that counts elapsed time.  This timer sends a
     'SIGALRM' signal to the process when it expires.

   - A virtual timer that counts processor time used by the process.
     This timer sends a 'SIGVTALRM' signal to the process when it
     expires.

   - A profiling timer that counts both processor time used by the
     process, and processor time spent in system calls on behalf of the
     process.  This timer sends a 'SIGPROF' signal to the process when
     it expires.

     This timer is useful for profiling in interpreters.  The interval
     timer mechanism does not have the fine granularity necessary for
     profiling native code.

   You can only have one timer of each kind set at any given time.  If
you set a timer that has not yet expired, that timer is simply reset to
the new value.

   You should establish a handler for the appropriate alarm signal using
'signal' or  sigaction’ before issuing a call to ‘setitimer’ or ‘alarm’.
Otherwise, an unusual chain of events could cause the timer to expire
before your program establishes the handler.  In this case it would be
terminated, since termination is the default action for the alarm
signals.  *Note Signal Handling::.

   To be able to use the alarm function to interrupt a system call which
might block otherwise indefinitely it is important to _not_ set the
'SA_RESTART' flag when registering the signal handler using  sigaction’.
When not using 'sigaction' things get even uglier: the  signal’ function
has fixed semantics with respect to restarts.  The BSD semantics for
this function is to set the flag.  Therefore, if 'sigaction' for
whatever reason cannot be used, it is necessary to use 'sysv_signal' and
not 'signal'.

   The 'setitimer' function is the primary means for setting an alarm.
This facility is declared in the header file 'sys/time.h'.  The  alarm’
function, declared in 'unistd.h', provides a somewhat simpler interface
for setting the real-time timer.

 -- Data Type: struct itimerval
     This structure is used to specify when a timer should expire.  It
     contains the following members:
     'struct timeval it_interval'
          This is the period between successive timer interrupts.  If
          zero, the alarm will only be sent once.

     'struct timeval it_value'
          This is the period between now and the first timer interrupt.
          If zero, the alarm is disabled.

     The 'struct timeval' data type is described in *note Elapsed
     Time::.

 -- Function: int setitimer (int WHICH, const struct itimerval *NEW,
          struct itimerval *OLD)
     Preliminary: | MT-Safe timer | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'setitimer' function sets the timer specified by WHICH
     according to NEW.  The WHICH argument can have a value of
     'ITIMER_REAL',  ITIMER_VIRTUAL’, or ‘ITIMER_PROF’.

     If OLD is not a null pointer, 'setitimer' returns information about
     any previous unexpired timer of the same kind in the structure it
     points to.

     The return value is '0' on success and  -1’ on failure.  The
     following 'errno' error conditions are defined for this function:

     'EINVAL'
          The timer period is too large.

 -- Function: int getitimer (int WHICH, struct itimerval *OLD)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'getitimer' function stores information about the timer
     specified by WHICH in the structure pointed at by OLD.

     The return value and error conditions are the same as for
     'setitimer'.

'ITIMER_REAL'
     This constant can be used as the WHICH argument to the 'setitimer'
     and 'getitimer' functions to specify the real-time timer.

'ITIMER_VIRTUAL'
     This constant can be used as the WHICH argument to the 'setitimer'
     and 'getitimer' functions to specify the virtual timer.

'ITIMER_PROF'
     This constant can be used as the WHICH argument to the 'setitimer'
     and 'getitimer' functions to specify the profiling timer.

 -- Function: unsigned int alarm (unsigned int SECONDS)
     Preliminary: | MT-Safe timer | AS-Safe | AC-Safe | *Note POSIX
     Safety Concepts::.

     The 'alarm' function sets the real-time timer to expire in SECONDS
     seconds.  If you want to cancel any existing alarm, you can do this
     by calling 'alarm' with a SECONDS argument of zero.

     The return value indicates how many seconds remain before the
     previous alarm would have been sent.  If there was no previous
     alarm, 'alarm' returns zero.

   The 'alarm' function could be defined in terms of  setitimer’ like
this:

     unsigned int
     alarm (unsigned int seconds)
     {
       struct itimerval old, new;
       new.it_interval.tv_usec = 0;
       new.it_interval.tv_sec = 0;
       new.it_value.tv_usec = 0;
       new.it_value.tv_sec = (long int) seconds;
       if (setitimer (ITIMER_REAL, &new, &old) < 0)
         return 0;
       else
         return old.it_value.tv_sec;
     }

   There is an example showing the use of the 'alarm' function in *note
Handler Returns::.

   If you simply want your process to wait for a given number of
seconds, you should use the 'sleep' function.  *Note Sleeping::.

   You shouldn't count on the signal arriving precisely when the timer
expires.  In a multiprocessing environment there is typically some
amount of delay involved.

   *Portability Note:* The 'setitimer' and  getitimer’ functions are
derived from BSD Unix, while the 'alarm' function is specified by the
POSIX.1 standard.  'setitimer' is more powerful than  alarm’, but
'alarm' is more widely used.

==============================================================================
File: libc.info,  Node: |Sleeping|,  Prev: |Setting_an_Alarm|,  Up: |Date_and_Time|
==============================================================================

                                                                      *Sleeping*

21.6 Sleeping
-------------

The function 'sleep' gives a simple way to make the program wait for a
short interval.  If your program doesn't use signals (except to
terminate), then you can expect 'sleep' to wait reliably throughout the
specified interval.  Otherwise, 'sleep' can return sooner if a signal
arrives; if you want to wait for a given interval regardless of signals,
use 'select' (*note Waiting for I/O::) and don t specify any descriptors
to wait for.

 -- Function: unsigned int sleep (unsigned int SECONDS)
     Preliminary: | MT-Unsafe sig:SIGCHLD/linux | AS-Unsafe | AC-Unsafe
     | *Note POSIX Safety Concepts::.

     The 'sleep' function waits for SECONDS seconds or until a signal is
     delivered, whichever happens first.

     If 'sleep' returns because the requested interval is over, it
     returns a value of zero.  If it returns because of delivery of a
     signal, its return value is the remaining time in the sleep
     interval.

     The 'sleep' function is declared in  unistd.h’.

   Resist the temptation to implement a sleep for a fixed amount of time
by using the return value of 'sleep', when nonzero, to call  sleep’
again.  This will work with a certain amount of accuracy as long as
signals arrive infrequently.  But each signal can cause the eventual
wakeup time to be off by an additional second or so.  Suppose a few
signals happen to arrive in rapid succession by bad luck there is no
limit on how much this could shorten or lengthen the wait.

   Instead, compute the calendar time at which the program should stop
waiting, and keep trying to wait until that calendar time.  This won't
be off by more than a second.  With just a little more work, you can use
'select' and make the waiting period quite accurate.  (Of course, heavy
system load can cause additional unavoidable delays unless the machine
is dedicated to one application, there is no way you can avoid this.)

   On some systems, 'sleep' can do strange things if your program uses
'SIGALRM' explicitly.  Even if  SIGALRM’ signals are being ignored or
blocked when 'sleep' is called,  sleep’ might return prematurely on
delivery of a 'SIGALRM' signal.  If you have established a handler for
'SIGALRM' signals and a  SIGALRM’ signal is delivered while the process
is sleeping, the action taken might be just to cause 'sleep' to return
instead of invoking your handler.  And, if 'sleep' is interrupted by
delivery of a signal whose handler requests an alarm or alters the
handling of 'SIGALRM', this handler and  sleep’ will interfere.

   On GNU systems, it is safe to use 'sleep' and  SIGALRM’ in the same
program, because 'sleep' does not work by means of  SIGALRM’.

 -- Function: int nanosleep (const struct timespec *REQUESTED_TIME,
          struct timespec *REMAINING)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     If resolution to seconds is not enough the 'nanosleep' function can
     be used.  As the name suggests the sleep interval can be specified
     in nanoseconds.  The actual elapsed time of the sleep interval
     might be longer since the system rounds the elapsed time you
     request up to the next integer multiple of the actual resolution
     the system can deliver.

     *'requested_time' is the elapsed time of the interval you want to
     sleep.

     The function returns as *'remaining' the elapsed time left in the
     interval for which you requested to sleep.  If the interval
     completed without getting interrupted by a signal, this is zero.

     'struct timespec' is described in *Note Elapsed Time::.

     If the function returns because the interval is over the return
     value is zero.  If the function returns -1 the global variable
     ERRNO is set to the following values:

     'EINTR'
          The call was interrupted because a signal was delivered to the
          thread.  If the REMAINING parameter is not the null pointer
          the structure pointed to by REMAINING is updated to contain
          the remaining elapsed time.

     'EINVAL'
          The nanosecond value in the REQUESTED_TIME parameter contains
          an illegal value.  Either the value is negative or greater
          than or equal to 1000 million.

     This function is a cancellation point in multi-threaded programs.
     This is a problem if the thread allocates some resources (like
     memory, file descriptors, semaphores or whatever) at the time
     'nanosleep' is called.  If the thread gets canceled these resources
     stay allocated until the program ends.  To avoid this calls to
     'nanosleep' should be protected using cancellation handlers.

     The 'nanosleep' function is declared in  time.h’.

==============================================================================
File: libc.info,  Node: |Resource_Usage_And_Limitation|,  Next: |Non_Local_Exits|,  Prev: |Date_and_Time|,  Up: |Top|
==============================================================================

                                                 *Resource_Usage_And_Limitation*

22 Resource Usage And Limitation
================================

This chapter describes functions for examining how much of various kinds
of resources (CPU time, memory, etc.)  a process has used and getting
and setting limits on future usage.

MENU

* |Resource_Usage|::		Measuring various resources used.
* |Limits_on_Resources|::		Specifying limits on resource usage.
* |Priority|::			Reading or setting process run priority.
* |Memory_Resources|::            Querying memory available resources.
* |Processor_Resources|::         Learn about the processors available.

==============================================================================
File: libc.info,  Node: |Resource_Usage|,  Next: |Limits_on_Resources|,  Up: |Resource_Usage_And_Limitation|
==============================================================================

                                                                *Resource_Usage*

22.1 Resource Usage
-------------------

The function 'getrusage' and the data type  struct rusage’ are used to
examine the resource usage of a process.  They are declared in
'sys/resource.h'.

 -- Function: int getrusage (int PROCESSES, struct rusage *RUSAGE)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function reports resource usage totals for processes specified
     by PROCESSES, storing the information in '*RUSAGE'.

     In most systems, PROCESSES has only two valid values:

     'RUSAGE_SELF'
          Just the current process.

     'RUSAGE_CHILDREN'
          All child processes (direct and indirect) that have already
          terminated.

     The return value of 'getrusage' is zero for success, and  -1’ for
     failure.

     'EINVAL'
          The argument PROCESSES is not valid.

   One way of getting resource usage for a particular child process is
with the function 'wait4', which returns totals for a child when it
terminates.  *Note BSD Wait Functions::.

 -- Data Type: struct rusage
     This data type stores various resource usage statistics.  It has
     the following members, and possibly others:

     'struct timeval ru_utime'
          Time spent executing user instructions.

     'struct timeval ru_stime'
          Time spent in operating system code on behalf of PROCESSES.

     'long int ru_maxrss'
          The maximum resident set size used, in kilobytes.  That is,
          the maximum number of kilobytes of physical memory that
          PROCESSES used simultaneously.

     'long int ru_ixrss'
          An integral value expressed in kilobytes times ticks of
          execution, which indicates the amount of memory used by text
          that was shared with other processes.

     'long int ru_idrss'
          An integral value expressed the same way, which is the amount
          of unshared memory used for data.

     'long int ru_isrss'
          An integral value expressed the same way, which is the amount
          of unshared memory used for stack space.

     'long int ru_minflt'
          The number of page faults which were serviced without
          requiring any I/O.

     'long int ru_majflt'
          The number of page faults which were serviced by doing I/O.

     'long int ru_nswap'
          The number of times PROCESSES was swapped entirely out of main
          memory.

     'long int ru_inblock'
          The number of times the file system had to read from the disk
          on behalf of PROCESSES.

     'long int ru_oublock'
          The number of times the file system had to write to the disk
          on behalf of PROCESSES.

     'long int ru_msgsnd'
          Number of IPC messages sent.

     'long int ru_msgrcv'
          Number of IPC messages received.

     'long int ru_nsignals'
          Number of signals received.

     'long int ru_nvcsw'
          The number of times PROCESSES voluntarily invoked a context
          switch (usually to wait for some service).

     'long int ru_nivcsw'
          The number of times an involuntary context switch took place
          (because a time slice expired, or another process of higher
          priority was scheduled).

   'vtimes' is a historical function that does some of what  getrusage’
does.  'getrusage' is a better choice.

   'vtimes' and its  vtimes’ data structure are declared in
'sys/vtimes.h'.

 -- Function: int vtimes (struct vtimes *CURRENT, struct vtimes *CHILD)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'vtimes' reports resource usage totals for a process.

     If CURRENT is non-null, 'vtimes' stores resource usage totals for
     the invoking process alone in the structure to which it points.  If
     CHILD is non-null, 'vtimes' stores resource usage totals for all
     past children (which have terminated) of the invoking process in
     the structure to which it points.

      -- Data Type: struct vtimes
          This data type contains information about the resource usage
          of a process.  Each member corresponds to a member of the
          'struct rusage' data type described above.

          'vm_utime'
               User CPU time.  Analogous to 'ru_utime' in  struct
               rusage'
          'vm_stime'
               System CPU time.  Analogous to 'ru_stime' in  struct
               rusage'
          'vm_idsrss'
               Data and stack memory.  The sum of the values that would
               be reported as 'ru_idrss' and  ru_isrss’ in ‘struct
               rusage'
          'vm_ixrss'
               Shared memory.  Analogous to 'ru_ixrss' in  struct
               rusage'
          'vm_maxrss'
               Maximent resident set size.  Analogous to 'ru_maxrss' in
               'struct rusage'
          'vm_majflt'
               Major page faults.  Analogous to 'ru_majflt' in  struct
               rusage'
          'vm_minflt'
               Minor page faults.  Analogous to 'ru_minflt' in  struct
               rusage'
          'vm_nswap'
               Swap count.  Analogous to 'ru_nswap' in  struct rusage’
          'vm_inblk'
               Disk reads.  Analogous to 'ru_inblk' in  struct rusage’
          'vm_oublk'
               Disk writes.  Analogous to 'ru_oublk' in  struct rusage’

     The return value is zero if the function succeeds; '-1' otherwise.

   An additional historical function for examining resource usage,
'vtimes', is supported but not documented here.  It is declared in
'sys/vtimes.h'.

==============================================================================
File: libc.info,  Node: |Limits_on_Resources|,  Next: |Priority|,  Prev: |Resource_Usage|,  Up: |Resource_Usage_And_Limitation|
==============================================================================

                                                           *Limits_on_Resources*

22.2 Limiting Resource Usage
----------------------------

You can specify limits for the resource usage of a process.  When the
process tries to exceed a limit, it may get a signal, or the system call
by which it tried to do so may fail, depending on the resource.  Each
process initially inherits its limit values from its parent, but it can
subsequently change them.

   There are two per-process limits associated with a resource:

'current limit'
     The current limit is the value the system will not allow usage to
     exceed.  It is also called the 'soft limit' because the process
     being limited can generally raise the current limit at will.

'maximum limit'
     The maximum limit is the maximum value to which a process is
     allowed to set its current limit.  It is also called the 'hard
     limit' because there is no way for a process to get around it.  A
     process may lower its own maximum limit, but only the superuser may
     increase a maximum limit.

   The symbols for use with 'getrlimit',  setrlimit’, ‘getrlimit64’, and
'setrlimit64' are defined in  sys/resource.h’.

 -- Function: int getrlimit (int RESOURCE, struct rlimit *RLP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Read the current and maximum limits for the resource RESOURCE and
     store them in '*RLP'.

     The return value is '0' on success and  -1’ on failure.  The only
     possible 'errno' error condition is  EFAULT’.

     When the sources are compiled with '_FILE_OFFSET_BITS == 64' on a
     32-bit system this function is in fact 'getrlimit64'.  Thus, the
     LFS interface transparently replaces the old interface.

 -- Function: int getrlimit64 (int RESOURCE, struct rlimit64 *RLP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function is similar to 'getrlimit' but its second parameter is
     a pointer to a variable of type 'struct rlimit64', which allows it
     to read values which wouldn't fit in the member of a 'struct
     rlimit'.

     If the sources are compiled with '_FILE_OFFSET_BITS == 64' on a
     32-bit machine, this function is available under the name
     'getrlimit' and so transparently replaces the old interface.

 -- Function: int setrlimit (int RESOURCE, const struct rlimit *RLP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Store the current and maximum limits for the resource RESOURCE in
     '*RLP'.

     The return value is '0' on success and  -1’ on failure.  The
     following 'errno' error condition is possible:

     'EPERM'
             - The process tried to raise a current limit beyond the
               maximum limit.

             - The process tried to raise a maximum limit, but is not
               superuser.

     When the sources are compiled with '_FILE_OFFSET_BITS == 64' on a
     32-bit system this function is in fact 'setrlimit64'.  Thus, the
     LFS interface transparently replaces the old interface.

 -- Function: int setrlimit64 (int RESOURCE, const struct rlimit64 *RLP)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function is similar to 'setrlimit' but its second parameter is
     a pointer to a variable of type 'struct rlimit64' which allows it
     to set values which wouldn't fit in the member of a 'struct
     rlimit'.

     If the sources are compiled with '_FILE_OFFSET_BITS == 64' on a
     32-bit machine this function is available under the name
     'setrlimit' and so transparently replaces the old interface.

 -- Data Type: struct rlimit
     This structure is used with 'getrlimit' to receive limit values,
     and with 'setrlimit' to specify limit values for a particular
     process and resource.  It has two fields:

     'rlim_t rlim_cur'
          The current limit

     'rlim_t rlim_max'
          The maximum limit.

     For 'getrlimit', the structure is an output; it receives the
     current values.  For 'setrlimit', it specifies the new values.

   For the LFS functions a similar type is defined in 'sys/resource.h'.

 -- Data Type: struct rlimit64
     This structure is analogous to the 'rlimit' structure above, but
     its components have wider ranges.  It has two fields:

     'rlim64_t rlim_cur'
          This is analogous to 'rlimit.rlim_cur', but with a different
          type.

     'rlim64_t rlim_max'
          This is analogous to 'rlimit.rlim_max', but with a different
          type.

   Here is a list of resources for which you can specify a limit.
Memory and file sizes are measured in bytes.

'RLIMIT_CPU'
     The maximum amount of CPU time the process can use.  If it runs for
     longer than this, it gets a signal: 'SIGXCPU'.  The value is
     measured in seconds.  *Note Operation Error Signals::.

'RLIMIT_FSIZE'
     The maximum size of file the process can create.  Trying to write a
     larger file causes a signal: 'SIGXFSZ'.  *Note Operation Error
     Signals::.

'RLIMIT_DATA'
     The maximum size of data memory for the process.  If the process
     tries to allocate data memory beyond this amount, the allocation
     function fails.

'RLIMIT_STACK'
     The maximum stack size for the process.  If the process tries to
     extend its stack past this size, it gets a 'SIGSEGV' signal.  *Note
     Program Error Signals::.

'RLIMIT_CORE'
     The maximum size core file that this process can create.  If the
     process terminates and would dump a core file larger than this,
     then no core file is created.  So setting this limit to zero
     prevents core files from ever being created.

'RLIMIT_RSS'
     The maximum amount of physical memory that this process should get.
     This parameter is a guide for the system's scheduler and memory
     allocator; the system may give the process more memory when there
     is a surplus.

'RLIMIT_MEMLOCK'
     The maximum amount of memory that can be locked into physical
     memory (so it will never be paged out).

'RLIMIT_NPROC'
     The maximum number of processes that can be created with the same
     user ID. If you have reached the limit for your user ID, 'fork'
     will fail with 'EAGAIN'.  *Note Creating a Process::.

'RLIMIT_NOFILE'
'RLIMIT_OFILE'
     The maximum number of files that the process can open.  If it tries
     to open more files than this, its open attempt fails with 'errno'
     'EMFILE'.  *Note Error Codes::.  Not all systems support this
     limit; GNU does, and 4.4 BSD does.

'RLIMIT_AS'
     The maximum size of total memory that this process should get.  If
     the process tries to allocate more memory beyond this amount with,
     for example, 'brk',  malloc’, ‘mmap’ or ‘sbrk’, the allocation
     function fails.

'RLIM_NLIMITS'
     The number of different resource limits.  Any valid RESOURCE
     operand must be less than 'RLIM_NLIMITS'.

 -- Constant: rlim_t RLIM_INFINITY
     This constant stands for a value of 'infinity' when supplied as the
     limit value in 'setrlimit'.

   The following are historical functions to do some of what the
functions above do.  The functions above are better choices.

   'ulimit' and the command symbols are declared in  ulimit.h’.

 -- Function: long int ulimit (int CMD, ...)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     'ulimit' gets the current limit or sets the current and maximum
     limit for a particular resource for the calling process according
     to the command CMD.

     If you are getting a limit, the command argument is the only
     argument.  If you are setting a limit, there is a second argument:
     'long int' LIMIT which is the value to which you are setting the
     limit.

     The CMD values and the operations they specify are:

     'GETFSIZE'
          Get the current limit on the size of a file, in units of 512
          bytes.

     'SETFSIZE'
          Set the current and maximum limit on the size of a file to
          LIMIT * 512 bytes.

     There are also some other CMD values that may do things on some
     systems, but they are not supported.

     Only the superuser may increase a maximum limit.

     When you successfully get a limit, the return value of 'ulimit' is
     that limit, which is never negative.  When you successfully set a
     limit, the return value is zero.  When the function fails, the
     return value is '-1' and  errno’ is set according to the reason:

     'EPERM'
          A process tried to increase a maximum limit, but is not
          superuser.

   'vlimit' and its resource symbols are declared in  sys/vlimit.h’.

 -- Function: int vlimit (int RESOURCE, int LIMIT)
     Preliminary: | MT-Unsafe race:setrlimit | AS-Unsafe | AC-Safe |
     *Note POSIX Safety Concepts::.

     'vlimit' sets the current limit for a resource for a process.

     RESOURCE identifies the resource:

     'LIM_CPU'
          Maximum CPU time.  Same as 'RLIMIT_CPU' for  setrlimit’.
     'LIM_FSIZE'
          Maximum file size.  Same as 'RLIMIT_FSIZE' for  setrlimit’.
     'LIM_DATA'
          Maximum data memory.  Same as 'RLIMIT_DATA' for  setrlimit’.
     'LIM_STACK'
          Maximum stack size.  Same as 'RLIMIT_STACK' for  setrlimit’.
     'LIM_CORE'
          Maximum core file size.  Same as 'RLIMIT_COR' for  setrlimit’.
     'LIM_MAXRSS'
          Maximum physical memory.  Same as 'RLIMIT_RSS' for
          'setrlimit'.

     The return value is zero for success, and '-1' with  errno’ set
     accordingly for failure:

     'EPERM'
          The process tried to set its current limit beyond its maximum
          limit.

==============================================================================
File: libc.info,  Node: |Priority|,  Next: |Memory_Resources|,  Prev: |Limits_on_Resources|,  Up: |Resource_Usage_And_Limitation|
==============================================================================

                                                                      *Priority*

22.3 Process CPU Priority And Scheduling
----------------------------------------

When multiple processes simultaneously require CPU time, the system's
scheduling policy and process CPU priorities determine which processes
get it.  This section describes how that determination is made and GNU C
Library functions to control it.

   It is common to refer to CPU scheduling simply as scheduling and a
process' CPU priority simply as the process  priority, with the CPU
resource being implied.  Bear in mind, though, that CPU time is not the
only resource a process uses or that processes contend for.  In some
cases, it is not even particularly important.  Giving a process a high
'priority' may have very little effect on how fast a process runs with
respect to other processes.  The priorities discussed in this section
apply only to CPU time.

   CPU scheduling is a complex issue and different systems do it in
wildly different ways.  New ideas continually develop and find their way
into the intricacies of the various systems' scheduling algorithms.
This section discusses the general concepts, some specifics of systems
that commonly use the GNU C Library, and some standards.

   For simplicity, we talk about CPU contention as if there is only one
CPU in the system.  But all the same principles apply when a processor
has multiple CPUs, and knowing that the number of processes that can run
at any one time is equal to the number of CPUs, you can easily
extrapolate the information.

   The functions described in this section are all defined by the
POSIX.1 and POSIX.1b standards (the 'sched...' functions are POSIX.1b).
However, POSIX does not define any semantics for the values that these
functions get and set.  In this chapter, the semantics are based on the
Linux kernel's implementation of the POSIX standard.  As you will see,
the Linux implementation is quite the inverse of what the authors of the
POSIX syntax had in mind.

MENU

* |Absolute_Priority|::               The first tier of priority.  Posix
* |Realtime_Scheduling|::             Scheduling among the process nobility
* |Basic_Scheduling_Functions|::      Get/set scheduling policy, priority
* |Traditional_Scheduling|::          Scheduling among the vulgar masses
* |CPU_Affinity|::                    Limiting execution to certain CPUs

==============================================================================
File: libc.info,  Node: |Absolute_Priority|,  Next: |Realtime_Scheduling|,  Up: |Priority|
==============================================================================

                                                             *Absolute_Priority*

22.3.1 Absolute Priority
------------------------

Every process has an absolute priority, and it is represented by a
number.  The higher the number, the higher the absolute priority.

   On systems of the past, and most systems today, all processes have
absolute priority 0 and this section is irrelevant.  In that case, *Note
Traditional Scheduling::.  Absolute priorities were invented to
accommodate realtime systems, in which it is vital that certain
processes be able to respond to external events happening in real time,
which means they cannot wait around while some other process that _wants
to_, but doesn't _need to_ run occupies the CPU.

   When two processes are in contention to use the CPU at any instant,
the one with the higher absolute priority always gets it.  This is true
even if the process with the lower priority is already using the CPU
(i.e., the scheduling is preemptive).  Of course, we're only talking
about processes that are running or 'ready to run,' which means they are
ready to execute instructions right now.  When a process blocks to wait
for something like I/O, its absolute priority is irrelevant.

   NB: The term 'runnable' is a synonym for  ready to run.”

   When two processes are running or ready to run and both have the same
absolute priority, it's more interesting.  In that case, who gets the
CPU is determined by the scheduling policy.  If the processes have
absolute priority 0, the traditional scheduling policy described in
*note Traditional Scheduling:: applies.  Otherwise, the policies
described in *note Realtime Scheduling:: apply.

   You normally give an absolute priority above 0 only to a process that
can be trusted not to hog the CPU. Such processes are designed to block
(or terminate) after relatively short CPU runs.

   A process begins life with the same absolute priority as its parent
process.  Functions described in *note Basic Scheduling Functions:: can
change it.

   Only a privileged process can change a process' absolute priority to
something other than '0'.  Only a privileged process or the target
process' owner can change its absolute priority at all.

   POSIX requires absolute priority values used with the realtime
scheduling policies to be consecutive with a range of at least 32.  On
Linux, they are 1 through 99.  The functions 'sched_get_priority_max'
and 'sched_set_priority_min' portably tell you what the range is on a
particular system.

22.3.1.1 Using Absolute Priority
--------------------------------

One thing you must keep in mind when designing real time applications is
that having higher absolute priority than any other process doesn't
guarantee the process can run continuously.  Two things that can wreck a
good CPU run are interrupts and page faults.

   Interrupt handlers live in that limbo between processes.  The CPU is
executing instructions, but they aren't part of any process.  An
interrupt will stop even the highest priority process.  So you must
allow for slight delays and make sure that no device in the system has
an interrupt handler that could cause too long a delay between
instructions for your process.

   Similarly, a page fault causes what looks like a straightforward
sequence of instructions to take a long time.  The fact that other
processes get to run while the page faults in is of no consequence,
because as soon as the I/O is complete, the higher priority process will
kick them out and run again, but the wait for the I/O itself could be a
problem.  To neutralize this threat, use 'mlock' or  mlockall’.

   There are a few ramifications of the absoluteness of this priority on
a single-CPU system that you need to keep in mind when you choose to set
a priority and also when you're working on a program that runs with high
absolute priority.  Consider a process that has higher absolute priority
than any other process in the system and due to a bug in its program, it
gets into an infinite loop.  It will never cede the CPU. You can't run a
command to kill it because your command would need to get the CPU in
order to run.  The errant program is in complete control.  It controls
the vertical, it controls the horizontal.

   There are two ways to avoid this: 1) keep a shell running somewhere
with a higher absolute priority or 2) keep a controlling terminal
attached to the high priority process group.  All the priority in the
world won't stop an interrupt handler from running and delivering a
signal to the process if you hit Control-C.

   Some systems use absolute priority as a means of allocating a fixed
percentage of CPU time to a process.  To do this, a super high priority
privileged process constantly monitors the process' CPU usage and raises
its absolute priority when the process isn't getting its entitled share
and lowers it when the process is exceeding it.

   NB: The absolute priority is sometimes called the 'static
priority.' We don't use that term in this manual because it misses the
most important feature of the absolute priority: its absoluteness.

==============================================================================
File: libc.info,  Node: |Realtime_Scheduling|,  Next: |Basic_Scheduling_Functions|,  Prev: |Absolute_Priority|,  Up: |Priority|
==============================================================================

                                                           *Realtime_Scheduling*

22.3.2 Realtime Scheduling
--------------------------

Whenever two processes with the same absolute priority are ready to run,
the kernel has a decision to make, because only one can run at a time.
If the processes have absolute priority 0, the kernel makes this
decision as described in *note Traditional Scheduling::.  Otherwise, the
decision is as described in this section.

   If two processes are ready to run but have different absolute
priorities, the decision is much simpler, and is described in *note
Absolute Priority::.

   Each process has a scheduling policy.  For processes with absolute
priority other than zero, there are two available:

  1. First Come First Served
  2. Round Robin

   The most sensible case is where all the processes with a certain
absolute priority have the same scheduling policy.  We'll discuss that
first.

   In Round Robin, processes share the CPU, each one running for a small
quantum of time ('time slice') and then yielding to another in a
circular fashion.  Of course, only processes that are ready to run and
have the same absolute priority are in this circle.

   In First Come First Served, the process that has been waiting the
longest to run gets the CPU, and it keeps it until it voluntarily
relinquishes the CPU, runs out of things to do (blocks), or gets
preempted by a higher priority process.

   First Come First Served, along with maximal absolute priority and
careful control of interrupts and page faults, is the one to use when a
process absolutely, positively has to run at full CPU speed or not at
all.

   Judicious use of 'sched_yield' function invocations by processes with
First Come First Served scheduling policy forms a good compromise
between Round Robin and First Come First Served.

   To understand how scheduling works when processes of different
scheduling policies occupy the same absolute priority, you have to know
the nitty gritty details of how processes enter and exit the ready to
run list.

   In both cases, the ready to run list is organized as a true queue,
where a process gets pushed onto the tail when it becomes ready to run
and is popped off the head when the scheduler decides to run it.  Note
that ready to run and running are two mutually exclusive states.  When
the scheduler runs a process, that process is no longer ready to run and
no longer in the ready to run list.  When the process stops running, it
may go back to being ready to run again.

   The only difference between a process that is assigned the Round
Robin scheduling policy and a process that is assigned First Come First
Serve is that in the former case, the process is automatically booted
off the CPU after a certain amount of time.  When that happens, the
process goes back to being ready to run, which means it enters the queue
at the tail.  The time quantum we're talking about is small.  Really
small.  This is not your father's timesharing.  For example, with the
Linux kernel, the round robin time slice is a thousand times shorter
than its typical time slice for traditional scheduling.

   A process begins life with the same scheduling policy as its parent
process.  Functions described in *note Basic Scheduling Functions:: can
change it.

   Only a privileged process can set the scheduling policy of a process
that has absolute priority higher than 0.

==============================================================================
File: libc.info,  Node: |Basic_Scheduling_Functions|,  Next: |Traditional_Scheduling|,  Prev: |Realtime_Scheduling|,  Up: |Priority|
==============================================================================

                                                    *Basic_Scheduling_Functions*

22.3.3 Basic Scheduling Functions
---------------------------------

This section describes functions in the GNU C Library for setting the
absolute priority and scheduling policy of a process.

   *Portability Note:* On systems that have the functions in this
section, the macro _POSIX_PRIORITY_SCHEDULING is defined in
'<unistd.h>'.

   For the case that the scheduling policy is traditional scheduling,
more functions to fine tune the scheduling are in *note Traditional
Scheduling::.

   Don't try to make too much out of the naming and structure of these
functions.  They don't match the concepts described in this manual
because the functions are as defined by POSIX.1b, but the implementation
on systems that use the GNU C Library is the inverse of what the POSIX
structure contemplates.  The POSIX scheme assumes that the primary
scheduling parameter is the scheduling policy and that the priority
value, if any, is a parameter of the scheduling policy.  In the
implementation, though, the priority value is king and the scheduling
policy, if anything, only fine tunes the effect of that priority.

   The symbols in this section are declared by including file 'sched.h'.

 -- Data Type: struct sched_param
     This structure describes an absolute priority.
     'int sched_priority'
          absolute priority value

 -- Function: int sched_setscheduler (pid_t PID, int POLICY, const
          struct sched_param *PARAM)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function sets both the absolute priority and the scheduling
     policy for a process.

     It assigns the absolute priority value given by PARAM and the
     scheduling policy POLICY to the process with Process ID PID, or the
     calling process if PID is zero.  If POLICY is negative,
     'sched_setscheduler' keeps the existing scheduling policy.

     The following macros represent the valid values for POLICY:

     'SCHED_OTHER'
          Traditional Scheduling
     'SCHED_FIFO'
          First In First Out
     'SCHED_RR'
          Round Robin

     On success, the return value is '0'.  Otherwise, it is  -1’ and
     'ERRNO' is set accordingly.  The  errno’ values specific to this
     function are:

     'EPERM'
             - The calling process does not have 'CAP_SYS_NICE'
               permission and POLICY is not 'SCHED_OTHER' (or it s
               negative and the existing policy is not 'SCHED_OTHER'.

             - The calling process does not have 'CAP_SYS_NICE'
               permission and its owner is not the target process'
               owner.  I.e., the effective uid of the calling process is
               neither the effective nor the real uid of process PID.

     'ESRCH'
          There is no process with pid PID and PID is not zero.

     'EINVAL'
             - POLICY does not identify an existing scheduling policy.

             - The absolute priority value identified by *PARAM is
               outside the valid range for the scheduling policy POLICY
               (or the existing scheduling policy if POLICY is negative)
               or PARAM is null.  'sched_get_priority_max' and
               'sched_get_priority_min' tell you what the valid range
               is.

             - PID is negative.

 -- Function: int sched_getscheduler (pid_t PID)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns the scheduling policy assigned to the process
     with Process ID (pid) PID, or the calling process if PID is zero.

     The return value is the scheduling policy.  See
     'sched_setscheduler' for the possible values.

     If the function fails, the return value is instead '-1' and  errno’
     is set accordingly.

     The 'errno' values specific to this function are:

     'ESRCH'
          There is no process with pid PID and it is not zero.

     'EINVAL'
          PID is negative.

     Note that this function is not an exact mate to
     'sched_setscheduler' because while that function sets the
     scheduling policy and the absolute priority, this function gets
     only the scheduling policy.  To get the absolute priority, use
     'sched_getparam'.

 -- Function: int sched_setparam (pid_t PID, const struct sched_param
          *PARAM)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function sets a process' absolute priority.

     It is functionally identical to 'sched_setscheduler' with POLICY =
     '-1'.

 -- Function: int sched_getparam (pid_t PID, struct sched_param *PARAM)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns a process' absolute priority.

     PID is the Process ID (pid) of the process whose absolute priority
     you want to know.

     PARAM is a pointer to a structure in which the function stores the
     absolute priority of the process.

     On success, the return value is '0'.  Otherwise, it is  -1’ and
     'errno' is set accordingly.  The  errno’ values specific to this
     function are:

     'ESRCH'
          There is no process with pid PID and it is not zero.

     'EINVAL'
          PID is negative.

 -- Function: int sched_get_priority_min (int POLICY)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns the lowest absolute priority value that is
     allowable for a process with scheduling policy POLICY.

     On Linux, it is 0 for SCHED_OTHER and 1 for everything else.

     On success, the return value is '0'.  Otherwise, it is  -1’ and
     'ERRNO' is set accordingly.  The  errno’ values specific to this
     function are:

     'EINVAL'
          POLICY does not identify an existing scheduling policy.

 -- Function: int sched_get_priority_max (int POLICY)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns the highest absolute priority value that is
     allowable for a process that with scheduling policy POLICY.

     On Linux, it is 0 for SCHED_OTHER and 99 for everything else.

     On success, the return value is '0'.  Otherwise, it is  -1’ and
     'ERRNO' is set accordingly.  The  errno’ values specific to this
     function are:

     'EINVAL'
          POLICY does not identify an existing scheduling policy.

 -- Function: int sched_rr_get_interval (pid_t PID, struct timespec
          *INTERVAL)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function returns the length of the quantum (time slice) used
     with the Round Robin scheduling policy, if it is used, for the
     process with Process ID PID.

     It returns the length of time as INTERVAL.

     With a Linux kernel, the round robin time slice is always 150
     microseconds, and PID need not even be a real pid.

     The return value is '0' on success and in the pathological case
     that it fails, the return value is '-1' and  errno’ is set
     accordingly.  There is nothing specific that can go wrong with this
     function, so there are no specific 'errno' values.

 -- Function: int sched_yield (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function voluntarily gives up the process' claim on the CPU.

     Technically, 'sched_yield' causes the calling process to be made
     immediately ready to run (as opposed to running, which is what it
     was before).  This means that if it has absolute priority higher
     than 0, it gets pushed onto the tail of the queue of processes that
     share its absolute priority and are ready to run, and it will run
     again when its turn next arrives.  If its absolute priority is 0,
     it is more complicated, but still has the effect of yielding the
     CPU to other processes.

     If there are no other processes that share the calling process'
     absolute priority, this function doesn't have any effect.

     To the extent that the containing program is oblivious to what
     other processes in the system are doing and how fast it executes,
     this function appears as a no-op.

     The return value is '0' on success and in the pathological case
     that it fails, the return value is '-1' and  errno’ is set
     accordingly.  There is nothing specific that can go wrong with this
     function, so there are no specific 'errno' values.

==============================================================================
File: libc.info,  Node: |Traditional_Scheduling|,  Next: |CPU_Affinity|,  Prev: |Basic_Scheduling_Functions|,  Up: |Priority|
==============================================================================

                                                        *Traditional_Scheduling*

22.3.4 Traditional Scheduling
-----------------------------

This section is about the scheduling among processes whose absolute
priority is 0.  When the system hands out the scraps of CPU time that
are left over after the processes with higher absolute priority have
taken all they want, the scheduling described herein determines who
among the great unwashed processes gets them.

MENU

* |Traditional_Scheduling_Intro|::
* |Traditional_Scheduling_Functions|::

==============================================================================
File: libc.info,  Node: |Traditional_Scheduling_Intro|,  Next: |Traditional_Scheduling_Functions|,  Up: |Traditional_Scheduling|
==============================================================================

                                                  *Traditional_Scheduling_Intro*

22.3.4.1 Introduction To Traditional Scheduling
-----------------------------------------------

Long before there was absolute priority (See *note Absolute Priority::),
Unix systems were scheduling the CPU using this system.  When POSIX came
in like the Romans and imposed absolute priorities to accommodate the
needs of realtime processing, it left the indigenous Absolute Priority
Zero processes to govern themselves by their own familiar scheduling
policy.

   Indeed, absolute priorities higher than zero are not available on
many systems today and are not typically used when they are, being
intended mainly for computers that do realtime processing.  So this
section describes the only scheduling many programmers need to be
concerned about.

   But just to be clear about the scope of this scheduling: Any time a
process with an absolute priority of 0 and a process with an absolute
priority higher than 0 are ready to run at the same time, the one with
absolute priority 0 does not run.  If it's already running when the
higher priority ready-to-run process comes into existence, it stops
immediately.

   In addition to its absolute priority of zero, every process has
another priority, which we will refer to as "dynamic priority" because
it changes over time.  The dynamic priority is meaningless for processes
with an absolute priority higher than zero.

   The dynamic priority sometimes determines who gets the next turn on
the CPU. Sometimes it determines how long turns last.  Sometimes it
determines whether a process can kick another off the CPU.

   In Linux, the value is a combination of these things, but mostly it
just determines the length of the time slice.  The higher a process'
dynamic priority, the longer a shot it gets on the CPU when it gets one.
If it doesn't use up its time slice before giving up the CPU to do
something like wait for I/O, it is favored for getting the CPU back when
it's ready for it, to finish out its time slice.  Other than that,
selection of processes for new time slices is basically round robin.
But the scheduler does throw a bone to the low priority processes: A
process' dynamic priority rises every time it is snubbed in the
scheduling process.  In Linux, even the fat kid gets to play.

   The fluctuation of a process' dynamic priority is regulated by
another value: The 'nice' value.  The nice value is an integer, usually
in the range -20 to 20, and represents an upper limit on a process'
dynamic priority.  The higher the nice number, the lower that limit.

   On a typical Linux system, for example, a process with a nice value
of 20 can get only 10 milliseconds on the CPU at a time, whereas a
process with a nice value of -20 can achieve a high enough priority to
get 400 milliseconds.

   The idea of the nice value is deferential courtesy.  In the
beginning, in the Unix garden of Eden, all processes shared equally in
the bounty of the computer system.  But not all processes really need
the same share of CPU time, so the nice value gave a courteous process
the ability to refuse its equal share of CPU time that others might
prosper.  Hence, the higher a process' nice value, the nicer the process
is.  (Then a snake came along and offered some process a negative nice
value and the system became the crass resource allocation system we know
today.)

   Dynamic priorities tend upward and downward with an objective of
smoothing out allocation of CPU time and giving quick response time to
infrequent requests.  But they never exceed their nice limits, so on a
heavily loaded CPU, the nice value effectively determines how fast a
process runs.

   In keeping with the socialistic heritage of Unix process priority, a
process begins life with the same nice value as its parent process and
can raise it at will.  A process can also raise the nice value of any
other process owned by the same user (or effective user).  But only a
privileged process can lower its nice value.  A privileged process can
also raise or lower another process' nice value.

   GNU C Library functions for getting and setting nice values are
described in *Note Traditional Scheduling Functions::.

==============================================================================
File: libc.info,  Node: |Traditional_Scheduling_Functions|,  Prev: |Traditional_Scheduling_Intro|,  Up: |Traditional_Scheduling|
==============================================================================

                                              *Traditional_Scheduling_Functions*

22.3.4.2 Functions For Traditional Scheduling
---------------------------------------------

This section describes how you can read and set the nice value of a
process.  All these symbols are declared in 'sys/resource.h'.

   The function and macro names are defined by POSIX, and refer to
"priority," but the functions actually have to do with nice values, as
the terms are used both in the manual and POSIX.

   The range of valid nice values depends on the kernel, but typically
it runs from '-20' to  20’.  A lower nice value corresponds to higher
priority for the process.  These constants describe the range of
priority values:

'PRIO_MIN'
     The lowest valid nice value.

'PRIO_MAX'
     The highest valid nice value.

 -- Function: int getpriority (int CLASS, int ID)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Return the nice value of a set of processes; CLASS and ID specify
     which ones (see below).  If the processes specified do not all have
     the same nice value, this returns the lowest value that any of them
     has.

     On success, the return value is '0'.  Otherwise, it is  -1’ and
     'errno' is set accordingly.  The  errno’ values specific to this
     function are:

     'ESRCH'
          The combination of CLASS and ID does not match any existing
          process.

     'EINVAL'
          The value of CLASS is not valid.

     If the return value is '-1', it could indicate failure, or it could
     be the nice value.  The only way to make certain is to set 'errno =
     0' before calling 'getpriority , then use ‘errno != 0’ afterward as
     the criterion for failure.

 -- Function: int setpriority (int CLASS, int ID, int NICEVAL)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     Set the nice value of a set of processes to NICEVAL; CLASS and ID
     specify which ones (see below).

     The return value is '0' on success, and  -1’ on failure.  The
     following 'errno' error condition are possible for this function:

     'ESRCH'
          The combination of CLASS and ID does not match any existing
          process.

     'EINVAL'
          The value of CLASS is not valid.

     'EPERM'
          The call would set the nice value of a process which is owned
          by a different user than the calling process (i.e., the target
          process' real or effective uid does not match the calling
          process' effective uid) and the calling process does not have
          'CAP_SYS_NICE' permission.

     'EACCES'
          The call would lower the process' nice value and the process
          does not have 'CAP_SYS_NICE' permission.

   The arguments CLASS and ID together specify a set of processes in
which you are interested.  These are the possible values of CLASS:

'PRIO_PROCESS'
     One particular process.  The argument ID is a process ID (pid).

'PRIO_PGRP'
     All the processes in a particular process group.  The argument ID
     is a process group ID (pgid).

'PRIO_USER'
     All the processes owned by a particular user (i.e., whose real uid
     indicates the user).  The argument ID is a user ID (uid).

   If the argument ID is 0, it stands for the calling process, its
process group, or its owner (real uid), according to CLASS.

 -- Function: int nice (int INCREMENT)
     Preliminary: | MT-Unsafe race:setpriority | AS-Unsafe | AC-Safe |
     *Note POSIX Safety Concepts::.

     Increment the nice value of the calling process by INCREMENT.  The
     return value is the new nice value on success, and '-1' on failure.
     In the case of failure, 'errno' will be set to the same values as
     for 'setpriority'.

     Here is an equivalent definition of 'nice':

          int
          nice (int increment)
          {
            int result, old = getpriority (PRIO_PROCESS, 0);
            result = setpriority (PRIO_PROCESS, 0, old + increment);
            if (result != -1)
                return old + increment;
            else
                return -1;
          }

==============================================================================
File: libc.info,  Node: |CPU_Affinity|,  Prev: Traditional Scheduling,  Up: |Priority|
==============================================================================

                                                                  *CPU_Affinity*

22.3.5 Limiting execution to certain CPUs
-----------------------------------------

On a multi-processor system the operating system usually distributes the
different processes which are runnable on all available CPUs in a way
which allows the system to work most efficiently.  Which processes and
threads run can be to some extend be control with the scheduling
functionality described in the last sections.  But which CPU finally
executes which process or thread is not covered.

   There are a number of reasons why a program might want to have
control over this aspect of the system as well:

   - One thread or process is responsible for absolutely critical work
     which under no circumstances must be interrupted or hindered from
     making progress by other processes or threads using CPU resources.
     In this case the special process would be confined to a CPU which
     no other process or thread is allowed to use.

   - The access to certain resources (RAM, I/O ports) has different
     costs from different CPUs.  This is the case in NUMA (Non-Uniform
     Memory Architecture) machines.  Preferably memory should be
     accessed locally but this requirement is usually not visible to the
     scheduler.  Therefore forcing a process or thread to the CPUs which
     have local access to the most-used memory helps to significantly
     boost the performance.

   - In controlled runtimes resource allocation and book-keeping work
     (for instance garbage collection) is performance local to
     processors.  This can help to reduce locking costs if the resources
     do not have to be protected from concurrent accesses from different
     processors.

   The POSIX standard up to this date is of not much help to solve this
problem.  The Linux kernel provides a set of interfaces to allow
specifying _affinity sets_ for a process.  The scheduler will schedule
the thread or process on CPUs specified by the affinity masks.  The
interfaces which the GNU C Library define follow to some extent the
Linux kernel interface.

 -- Data Type: cpu_set_t
     This data set is a bitset where each bit represents a CPU. How the
     system's CPUs are mapped to bits in the bitset is system dependent.
     The data type has a fixed size; in the unlikely case that the
     number of bits are not sufficient to describe the CPUs of the
     system a different interface has to be used.

     This type is a GNU extension and is defined in 'sched.h'.

   To manipulate the bitset, to set and reset bits, a number of macros
are defined.  Some of the macros take a CPU number as a parameter.  Here
it is important to never exceed the size of the bitset.  The following
macro specifies the number of bits in the 'cpu_set_t' bitset.

 -- Macro: int CPU_SETSIZE
     The value of this macro is the maximum number of CPUs which can be
     handled with a 'cpu_set_t' object.

   The type 'cpu_set_t' should be considered opaque; all manipulation
should happen via the next four macros.

 -- Macro: void CPU_ZERO (cpu_set_t *SET)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro initializes the CPU set SET to be the empty set.

     This macro is a GNU extension and is defined in 'sched.h'.

 -- Macro: void CPU_SET (int CPU, cpu_set_t *SET)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro adds CPU to the CPU set SET.

     The CPU parameter must not have side effects since it is evaluated
     more than once.

     This macro is a GNU extension and is defined in 'sched.h'.

 -- Macro: void CPU_CLR (int CPU, cpu_set_t *SET)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro removes CPU from the CPU set SET.

     The CPU parameter must not have side effects since it is evaluated
     more than once.

     This macro is a GNU extension and is defined in 'sched.h'.

 -- Macro: int CPU_ISSET (int CPU, const cpu_set_t *SET)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This macro returns a nonzero value (true) if CPU is a member of the
     CPU set SET, and zero (false) otherwise.

     The CPU parameter must not have side effects since it is evaluated
     more than once.

     This macro is a GNU extension and is defined in 'sched.h'.

   CPU bitsets can be constructed from scratch or the currently
installed affinity mask can be retrieved from the system.

 -- Function: int sched_getaffinity (pid_t PID, size_t CPUSETSIZE,
          cpu_set_t *CPUSET)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function stores the CPU affinity mask for the process or
     thread with the ID PID in the CPUSETSIZE bytes long bitmap pointed
     to by CPUSET.  If successful, the function always initializes all
     bits in the 'cpu_set_t' object and returns zero.

     If PID does not correspond to a process or thread on the system the
     or the function fails for some other reason, it returns '-1' and
     'errno' is set to represent the error condition.

     'ESRCH'
          No process or thread with the given ID found.

     'EFAULT'
          The pointer CPUSET does not point to a valid object.

     This function is a GNU extension and is declared in 'sched.h'.

   Note that it is not portably possible to use this information to
retrieve the information for different POSIX threads.  A separate
interface must be provided for that.

 -- Function: int sched_setaffinity (pid_t PID, size_t CPUSETSIZE, const
          cpu_set_t *CPUSET)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     This function installs the CPUSETSIZE bytes long affinity mask
     pointed to by CPUSET for the process or thread with the ID PID.  If
     successful the function returns zero and the scheduler will in the
     future take the affinity information into account.

     If the function fails it will return '-1' and  errno’ is set to the
     error code:

     'ESRCH'
          No process or thread with the given ID found.

     'EFAULT'
          The pointer CPUSET does not point to a valid object.

     'EINVAL'
          The bitset is not valid.  This might mean that the affinity
          set might not leave a processor for the process or thread to
          run on.

     This function is a GNU extension and is declared in 'sched.h'.

==============================================================================
File: libc.info,  Node: |Memory_Resources|,  Next: |Processor_Resources|,  Prev: |Priority|,  Up: |Resource_Usage_And_Limitation|
==============================================================================

                                                              *Memory_Resources*

22.4 Querying memory available resources
----------------------------------------

The amount of memory available in the system and the way it is organized
determines oftentimes the way programs can and have to work.  For
functions like 'mmap' it is necessary to know about the size of
individual memory pages and knowing how much memory is available enables
a program to select appropriate sizes for, say, caches.  Before we get
into these details a few words about memory subsystems in traditional
Unix systems will be given.

MENU

* |Memory_Subsystem|::           Overview about traditional Unix memory handling.
* |Query_Memory_Parameters|::    How to get information about the memory
                                subsystem?

==============================================================================
File: libc.info,  Node: |Memory_Subsystem|,  Next: |Query_Memory_Parameters|,  Up: |Memory_Resources|
==============================================================================

                                                              *Memory_Subsystem*

22.4.1 Overview about traditional Unix memory handling
------------------------------------------------------

Unix systems normally provide processes virtual address spaces.  This
means that the addresses of the memory regions do not have to correspond
directly to the addresses of the actual physical memory which stores the
data.  An extra level of indirection is introduced which translates
virtual addresses into physical addresses.  This is normally done by the
hardware of the processor.

   Using a virtual address space has several advantages.  The most
important is process isolation.  The different processes running on the
system cannot interfere directly with each other.  No process can write
into the address space of another process (except when shared memory is
used but then it is wanted and controlled).

   Another advantage of virtual memory is that the address space the
processes see can actually be larger than the physical memory available.
The physical memory can be extended by storage on an external media
where the content of currently unused memory regions is stored.  The
address translation can then intercept accesses to these memory regions
and make memory content available again by loading the data back into
memory.  This concept makes it necessary that programs which have to use
lots of memory know the difference between available virtual address
space and available physical memory.  If the working set of virtual
memory of all the processes is larger than the available physical memory
the system will slow down dramatically due to constant swapping of
memory content from the memory to the storage media and back.  This is
called 'thrashing'.

   A final aspect of virtual memory which is important and follows from
what is said in the last paragraph is the granularity of the virtual
address space handling.  When we said that the virtual address handling
stores memory content externally it cannot do this on a byte-by-byte
basis.  The administrative overhead does not allow this (leaving alone
the processor hardware).  Instead several thousand bytes are handled
together and form a 'page'.  The size of each page is always a power of
two bytes.  The smallest page size in use today is 4096, with 8192,
16384, and 65536 being other popular sizes.

==============================================================================
File: libc.info,  Node: |Query_Memory_Parameters|,  Prev: |Memory_Subsystem|,  Up: |Memory_Resources|
==============================================================================

                                                       *Query_Memory_Parameters*

22.4.2 How to get information about the memory subsystem?
---------------------------------------------------------

The page size of the virtual memory the process sees is essential to
know in several situations.  Some programming interfaces (e.g., 'mmap',
*note Memory-mapped I/O::) require the user to provide information
adjusted to the page size.  In the case of 'mmap' it is necessary to
provide a length argument which is a multiple of the page size.  Another
place where the knowledge about the page size is useful is in memory
allocation.  If one allocates pieces of memory in larger chunks which
are then subdivided by the application code it is useful to adjust the
size of the larger blocks to the page size.  If the total memory
requirement for the block is close (but not larger) to a multiple of the
page size the kernel's memory handling can work more effectively since
it only has to allocate memory pages which are fully used.  (To do this
optimization it is necessary to know a bit about the memory allocator
which will require a bit of memory itself for each block and this
overhead must not push the total size over the page size multiple.)

   The page size traditionally was a compile time constant.  But recent
development of processors changed this.  Processors now support
different page sizes and they can possibly even vary among different
processes on the same system.  Therefore the system should be queried at
runtime about the current page size and no assumptions (except about it
being a power of two) should be made.

   The correct interface to query about the page size is 'sysconf'
(*note Sysconf Definition::) with the parameter '_SC_PAGESIZE'.  There
is a much older interface available, too.

 -- Function: int getpagesize (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe | *Note POSIX Safety
     Concepts::.

     The 'getpagesize' function returns the page size of the process.
     This value is fixed for the runtime of the process but can vary in
     different runs of the application.

     The function is declared in 'unistd.h'.

   Widely available on System V derived systems is a method to get
information about the physical memory the system has.  The call

       sysconf (_SC_PHYS_PAGES)

returns the total number of pages of physical memory the system has.
This does not mean all this memory is available.  This information can
be found using

       sysconf (_SC_AVPHYS_PAGES)

   These two values help to optimize applications.  The value returned
for '_SC_AVPHYS_PAGES' is the amount of memory the application can use
without hindering any other process (given that no other process
increases its memory usage).  The value returned for '_SC_PHYS_PAGES' is
more or less a hard limit for the working set.  If all applications
together constantly use more than that amount of memory the system is in
trouble.

   The GNU C Library provides in addition to these already described way
to get this information two functions.  They are declared in the file
'sys/sysinfo.h'.  Programmers should prefer to use the  sysconf’ method
described above.

 -- Function: long int get_phys_pages (void)
     Preliminary: | MT-Safe | AS-Unsafe heap lock | AC-Unsafe lock fd
     mem | *Note POSIX Safety Concepts::.

     The 'get_phys_pages' function returns the total number of pages of
     physical memory the system has.  To get the amount of memory this
     number has to be multiplied by the page size.

     This function is a GNU extension.

 -- Function: long int get_avphys_pages (void)
     Preliminary: | MT-Safe | AS-Unsafe heap lock | AC-Unsafe lock fd
     mem | *Note POSIX Safety Concepts::.

     The 'get_avphys_pages' function returns the number of available
     pages of physical memory the system has.  To get the amount of
     memory this number has to be multiplied by the page size.

     This function is a GNU extension.

==============================================================================
File: libc.info,  Node: |Processor_Resources|,  Prev: Memory Resources,  Up: |Resource_Usage_And_Limitation|
==============================================================================

                                                           *Processor_Resources*

22.5 Learn about the processors available
-----------------------------------------

The use of threads or processes with shared memory allows an application
to take advantage of all the processing power a system can provide.  If
the task can be parallelized the optimal way to write an application is
to have at any time as many processes running as there are processors.
To determine the number of processors available to the system one can
run

       sysconf (_SC_NPROCESSORS_CONF)

which returns the number of processors the operating system configured.
But it might be possible for the operating system to disable individual
processors and so the call

       sysconf (_SC_NPROCESSORS_ONLN)

returns the number of processors which are currently online (i.e.,
available).

   For these two pieces of information the GNU C Library also provides
functions to get the information directly.  The functions are declared
in 'sys/sysinfo.h'.

 -- Function: int get_nprocs_conf (void)
     Preliminary: | MT-Safe | AS-Unsafe heap lock | AC-Unsafe lock fd
     mem | *Note POSIX Safety Concepts::.

     The 'get_nprocs_conf' function returns the number of processors the
     operating system configured.

     This function is a GNU extension.

 -- Function: int get_nprocs (void)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe fd | *Note POSIX Safety
     Concepts::.

     The 'get_nprocs' function returns the number of available
     processors.

     This function is a GNU extension.

   Before starting more threads it should be checked whether the
processors are not already overused.  Unix systems calculate something
called the 'load average'.  This is a number indicating how many
processes were running.  This number is an average over different
periods of time (normally 1, 5, and 15 minutes).

 -- Function: int getloadavg (double LOADAVG[], int NELEM)
     Preliminary: | MT-Safe | AS-Safe | AC-Safe fd | *Note POSIX Safety
     Concepts::.

     This function gets the 1, 5 and 15 minute load averages of the
     system.  The values are placed in LOADAVG.  'getloadavg' will place
     at most NELEM elements into the array but never more than three
     elements.  The return value is the number of elements written to
     LOADAVG, or -1 on error.

     This function is declared in 'stdlib.h'.

==============================================================================
File: libc.info,  Node: |Non_Local_Exits|,  Next: |Signal_Handling|,  Prev: |Resource_Usage_And_Limitation|,  Up: |Top|
==============================================================================

                                                               *Non_Local_Exits*

23 Non-Local Exits
==================

Sometimes when your program detects an unusual situation inside a deeply
nested set of function calls, you would like to be able to immediately
return to an outer level of control.  This section describes how you can
do such 'non-local exits' using the 'setjmp' and  longjmp’ functions.

MENU

 vim:tw=78:ts=8:ft=help:norl:
vim:ft=help bt=nowrite bufhidden=delete readonly nomodifiable nobuflisted:
